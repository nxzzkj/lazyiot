<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoFixture</name>
    </assembly>
    <members>
        <member name="T:AutoFixture.AutoPropertiesTarget">
            <summary>
            A marker class, used to explicitly identify the target for
            <i>Auto-properties</i> in an <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph.
            </summary>
            <remarks>
            The only purpose of this class is to act as an easily identifiable
            container. This makes it easier to find the target for
            <i>Auto-properties</i> even if it is buried deep in a larger graph.
            </remarks>
        </member>
        <member name="M:AutoFixture.AutoPropertiesTarget.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.AutoPropertiesTarget" /> class.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <remarks>
            <para>
            After initialization <paramref name="builder" /> is available via
            the <see cref="P:AutoFixture.AutoPropertiesTarget.Builder" /> property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder" /> is null.
            </exception>
            <seealso cref="P:AutoFixture.AutoPropertiesTarget.Builder"/>
        </member>
        <member name="M:AutoFixture.AutoPropertiesTarget.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.AutoPropertiesTarget.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>Creates a new specimen based on a request.</summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            The requested specimen if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen" /> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request" /> can be any object, but will often
            be a <see cref="T:System.Type" /> or other
            <see cref="T:System.Reflection.MemberInfo" /> instances.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.AutoPropertiesTarget.GetEnumerator">
            <summary>Returns the decorated builder as a sequence.</summary>
            <returns><see cref="P:AutoFixture.AutoPropertiesTarget.Builder" /> wrapped in an Iterator.</returns>
            <seealso cref="P:AutoFixture.AutoPropertiesTarget.Builder" />
        </member>
        <member name="M:AutoFixture.AutoPropertiesTarget.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can
            be used to iterate through the collection.
            </returns>
            <seealso cref="M:AutoFixture.AutoPropertiesTarget.GetEnumerator" />
        </member>
        <member name="P:AutoFixture.AutoPropertiesTarget.Builder">
            <summary>Gets the builder decorated by this instance.</summary>
            <value>The builder originally supplied via the constructor.</value>
            <seealso cref="M:AutoFixture.AutoPropertiesTarget.#ctor(AutoFixture.Kernel.ISpecimenBuilder)" />
        </member>
        <member name="T:AutoFixture.BehaviorRoot">
            <summary>
            A marker class, used to explicitly identify the root of the
            <i>behaviors</i> role in an <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph.
            </summary>
            <remarks>
            The only purpose of this class is to act as an easily identifiable
            container. This makes it easier to find the root of the of
            <i>behaviors</i> even if it is buried deep in a larger graph.
            </remarks>
        </member>
        <member name="M:AutoFixture.BehaviorRoot.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.BehaviorRoot" />
            class.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <remarks>
            <para>
            After initialization <paramref name="builder" /> is available via
            the <see cref="P:AutoFixture.BehaviorRoot.Builder" /> property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder" /> is null.
            </exception>
            <seealso cref="P:AutoFixture.BehaviorRoot.Builder" />
        </member>
        <member name="M:AutoFixture.BehaviorRoot.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.BehaviorRoot.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>Creates a new specimen based on a request.</summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            The requested specimen if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen" /> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request" /> can be any object, but will often
            be a <see cref="T:System.Type" /> or other
            <see cref="T:System.Reflection.MemberInfo" /> instances.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.BehaviorRoot.GetEnumerator">
            <summary>Returns the decorated builder as a sequence.</summary>
            <returns><see cref="P:AutoFixture.BehaviorRoot.Builder" /> wrapped in an Iterator.</returns>
            <seealso cref="P:AutoFixture.BehaviorRoot.Builder" />
        </member>
        <member name="M:AutoFixture.BehaviorRoot.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can
            be used to iterate through the collection.
            </returns>
            <seealso cref="M:AutoFixture.BehaviorRoot.GetEnumerator" />
        </member>
        <member name="P:AutoFixture.BehaviorRoot.Builder">
            <summary>Gets the builder decorated by this instance.</summary>
            <value>The builder originally supplied via the constructor.</value>
            <seealso cref="M:AutoFixture.BehaviorRoot.#ctor(AutoFixture.Kernel.ISpecimenBuilder)" />
        </member>
        <member name="T:AutoFixture.BooleanSwitch">
            <summary>
            Creates an alternating sequence of <see langword="true"/> and <see langword="false"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.BooleanSwitch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.BooleanSwitch"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.BooleanSwitch.Create">
            <summary>
            Returns an alternating sequence of <see langword="true"/> and <see langword="false"/>
            every other time it is invoked.
            </summary>
            <returns>
            <see langword="true"/>, followed by <see langword="false"/> at the next invocation, and so on.
            </returns>
        </member>
        <member name="M:AutoFixture.BooleanSwitch.CreateAnonymous">
            <summary>
            Returns an alternating sequence of <see langword="true"/> and <see langword="false"/>
            every other time it is invoked.
            </summary>
            <returns>
            <see langword="true"/>, followed by <see langword="false"/> at the next invocation, and
            so on.
            </returns>
            <remarks>Obsolete: Please move over to using <see cref="M:AutoFixture.BooleanSwitch.Create">Create()</see> as this method will be removed in the next release.</remarks>
        </member>
        <member name="M:AutoFixture.BooleanSwitch.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Returns an alternating sequence of <see langword="true"/> and <see langword="false"/>
            every other time it is invoked.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            <see langword="true"/>, followed by <see langword="false"/> at the next invocation, and
            so on, if <paramref name="request"/> is a request for a boolean; otherwise, a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.ByteSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.ByteSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.ByteSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.ByteSequenceGenerator.Create">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.ByteSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
            <remarks>Obsolete: Please move over to using <see cref="M:AutoFixture.ByteSequenceGenerator.Create">Create()</see> as this method will be removed in the next release.</remarks>
        </member>
        <member name="M:AutoFixture.ByteSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous byte.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next byte in a consecutive sequence, if <paramref name="request"/> is a request
            for a byte; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.CharSequenceGenerator">
            <summary>
            Creates a sequence of printable ASCII characters (Dec 33-126), starting at '!' (Dec 33).
            </summary>
        </member>
        <member name="M:AutoFixture.CharSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.CharSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.CharSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.CollectionFiller">
            <summary>
            Contains extension methods for populating collections with specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.CollectionFiller.AddMany``1(System.Collections.Generic.ICollection{``0},System.Func{``0},System.Int32)">
            <summary>
            Adds many objects to a list.
            </summary>
            <typeparam name="T">The type of object contained within the list.</typeparam>
            <param name="collection">The collection to which objects should be added.</param>
            <param name="creator">
            A function that will be called many times to create objects that will be added to
            <paramref name="collection"/>.</param>
            <param name="repeatCount">
            The number of times <paramref name="creator"/> is invoked, and hence the number of
            items added to <paramref name="collection"/>.
            </param>
        </member>
        <member name="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0})">
            <summary>
            Adds many anonymously created objects to a list.
            </summary>
            <typeparam name="T">The type of object that is contained in the list.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="collection">
            The list to which the anonymously created objects will be added.
            </param>
            <remarks>
            <para>
            The number of objects created and added is determined by
            <see cref="P:AutoFixture.IFixture.RepeatCount"/>.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Int32)"/>
            <seealso cref="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Func{``0})"/>
        </member>
        <member name="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Adds many anonymously created objects to a list.
            </summary>
            <typeparam name="T">The type of object that is contained in the list.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="collection">
            The list to which the anonymously created objects will be added.
            </param>
            <param name="repeatCount">The number of objects created and added.</param>
            <seealso cref="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0})"/>
            <seealso cref="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Func{``0})"/>
        </member>
        <member name="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Func{``0})">
            <summary>
            Adds many objects to a list using the provided function to create each object.
            </summary>
            <typeparam name="T">The type of object that is contained in the list.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="collection">
            The list to which the created objects will be added.
            </param>
            <param name="creator">
            The function that creates each object which is subsequently added to
            <paramref name="collection"/>.
            </param>
            <remarks>
            <para>
            The number of objects created and added is determined by
            <see cref="P:AutoFixture.IFixture.RepeatCount"/>.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0})"/>
            <seealso cref="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Int32)"/>
        </member>
        <member name="T:AutoFixture.CompositeCustomization">
            <summary>
            Customizes an <see cref="T:AutoFixture.IFixture"/> by using all contained <see cref="P:AutoFixture.CompositeCustomization.Customizations"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.CompositeCustomization.#ctor(System.Collections.Generic.IEnumerable{AutoFixture.ICustomization})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.CompositeCustomization"/> class.
            </summary>
            <param name="customizations">The customizations.</param>
        </member>
        <member name="M:AutoFixture.CompositeCustomization.#ctor(AutoFixture.ICustomization[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.CompositeCustomization"/> class.
            </summary>
            <param name="customizations">The customizations.</param>
        </member>
        <member name="P:AutoFixture.CompositeCustomization.Customizations">
            <summary>
            Gets the customizations contained within this instance.
            </summary>
        </member>
        <member name="M:AutoFixture.CompositeCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.ConstrainedStringGenerator">
            <summary>
            Creates a constrained string.
            </summary>
        </member>
        <member name="M:AutoFixture.ConstrainedStringGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a constrained string based on a ConstrainedStringRequest.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested number if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.ConstructorCustomization">
            <summary>
            A customization that uses a particular constructor selection mechanism to pick and invoke
            a constructor to create specimens of the targeted type.
            </summary>
        </member>
        <member name="M:AutoFixture.ConstructorCustomization.#ctor(System.Type,AutoFixture.Kernel.IMethodQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.ConstructorCustomization"/> class.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> for which <paramref name="query"/> should be used to select the
            most appropriate constructor.
            </param>
            <param name="query">
            The query that selects a constructor for <paramref name="targetType"/>.
            </param>
        </member>
        <member name="P:AutoFixture.ConstructorCustomization.TargetType">
            <summary>
            Gets the <see cref="T:System.Type"/> for which <see cref="P:AutoFixture.ConstructorCustomization.Query"/> should be used to select the
            most appropriate constructor.
            </summary>
        </member>
        <member name="P:AutoFixture.ConstructorCustomization.Query">
            <summary>
            Gets the query that selects a constructor for <see cref="P:AutoFixture.ConstructorCustomization.TargetType"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.ConstructorCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by modifying <see cref="P:AutoFixture.ConstructorCustomization.TargetType"/> to use
            <see cref="P:AutoFixture.ConstructorCustomization.Query"/> as the strategy for creating new specimens.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.CurrentDateTimeCustomization">
            <summary>
            A customization that enables DateTime specimens to be based on the current <see cref="P:System.DateTime.Now"/> value.
            </summary>
            <remarks>
            <para>
            When this customization is added to an <see cref="T:AutoFixture.IFixture"/> instance, requests for DateTime specimens
            will be satisfied by returning the current <see cref="P:System.DateTime.Now"/> value.
            </para>
            <para>
            This customization reproduces the generation strategy for DateTime specimens used in AutoFixture up to version 2.1.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.CurrentDateTimeCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by adding the <see cref="T:System.Type"/> specific numeric sequence generators.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.CurrentDateTimeGenerator">
            <summary>
            Creates new <see cref="T:System.DateTime"/> specimens based on the current <see cref="P:System.DateTime.Now"/> value.
            </summary>
        </member>
        <member name="M:AutoFixture.CurrentDateTimeGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            A new <see cref="T:System.DateTime"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.DateTime"/>; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.CustomizationExtensions">
            <summary>
            A set of useful helpers to simplify work with fixture customizations.
            </summary>
        </member>
        <member name="M:AutoFixture.CustomizationExtensions.ToCustomization(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Create customization that inserts the <paramref name="builder"/> to the beginning of the
            customizations collection.
            </summary>
        </member>
        <member name="T:AutoFixture.CustomizationNode">
            <summary>
            A marker class, used to explicitly identify the <i>customizations</i>
            role in an <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph.
            </summary>
            <remarks>
            The only purpose of this class is to act as an easily identifiable
            container. This makes it easier to find the collection of
            <i>customization</i> even if it is buried deep in a larger graph.
            </remarks>
        </member>
        <member name="M:AutoFixture.CustomizationNode.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.CustomizationNode" />
            class.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <remarks>
            <para>
            After initialization <paramref name="builder" /> is available via
            the <see cref="P:AutoFixture.CustomizationNode.Builder" /> property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder" /> is null.
            </exception>
            <seealso cref="P:AutoFixture.CustomizationNode.Builder"/>
        </member>
        <member name="M:AutoFixture.CustomizationNode.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.CustomizationNode.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>Creates a new specimen based on a request.</summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            The requested specimen if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen" /> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request" /> can be any object, but will often
            be a <see cref="T:System.Type" /> or other
            <see cref="T:System.Reflection.MemberInfo" /> instances.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.CustomizationNode.GetEnumerator">
            <summary>Returns the decorated builder as a sequence.</summary>
            <returns><see cref="P:AutoFixture.CustomizationNode.Builder" /> wrapped in an Iterator.</returns>
            <seealso cref="P:AutoFixture.CustomizationNode.Builder" />
        </member>
        <member name="M:AutoFixture.CustomizationNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can
            be used to iterate through the collection.
            </returns>
            <seealso cref="M:AutoFixture.CustomizationNode.GetEnumerator" />
        </member>
        <member name="P:AutoFixture.CustomizationNode.Builder">
            <summary>Gets the builder decorated by this instance.</summary>
            <value>The builder originally supplied via the constructor.</value>
            <seealso cref="M:AutoFixture.CustomizationNode.#ctor(AutoFixture.Kernel.ISpecimenBuilder)" />
        </member>
        <member name="T:AutoFixture.DataAnnotations.DataAnnotationsSupportNode">
            <summary>
            A marker class, used to explicitly identify builders related to the data annotation handling.
            </summary>
            <remarks>
            The only purpose of this class is to act as an easily identifiable container.
            This makes it easier to find the collection of data annotation related nodes in the customization list.
            </remarks>
        </member>
        <member name="P:AutoFixture.DataAnnotations.DataAnnotationsSupportNode.Builder">
            <summary>
            Builder used to handle the incoming requests.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.DataAnnotationsSupportNode.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of <see cref="T:AutoFixture.DataAnnotations.DataAnnotationsSupportNode"/>.
            </summary>
            <param name="builder">Builder that handles all the data annotation related requests.</param>
        </member>
        <member name="M:AutoFixture.DataAnnotations.DataAnnotationsSupportNode.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.DataAnnotations.DataAnnotationsSupportNode.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.DataAnnotations.DataAnnotationsSupportNode.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.DataAnnotations.DataAnnotationsSupportNode.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.DataAnnotations.EnumRangedRequestRelay">
            <summary>
            Handles <see cref="T:AutoFixture.DataAnnotations.RangedRequest"/> of enum type by forwarding requests
            to the <see cref="T:AutoFixture.Kernel.RangedNumberRequest"/> of the underlying enum type.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.EnumRangedRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.DataAnnotations.MinAndMaxLengthAttributeRelay">
            <summary>
            Relays a request for a constrained string to a <see cref="T:AutoFixture.Kernel.ConstrainedStringRequest"/>.
            </summary>
        </member>
        <member name="P:AutoFixture.DataAnnotations.MinAndMaxLengthAttributeRelay.RequestMemberTypeResolver">
            <summary>
            Gets or sets the current IRequestMemberTypeResolver.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.MinAndMaxLengthAttributeRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a specified minimum or maximum length of characters that are allowed.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:AutoFixture.Kernel.RangedNumberRequest"/> encapsulating the operand
            type, the minimum and the maximum of the requested number, if possible; otherwise,
            a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.DataAnnotations.NoDataAnnotationsCustomization">
            <summary>
            A customization that removes support for generating values that are customized
            based on the member's data annotations attributes.
            </summary>
            <remarks>
            This removes the <see cref="T:AutoFixture.DataAnnotations.RangeAttributeRelay"/>,
            <see cref="T:AutoFixture.DataAnnotations.StringLengthAttributeRelay"/>, and
            <see cref="T:AutoFixture.DataAnnotations.RegularExpressionAttributeRelay"/>. Support for the removal of data
            annotations is provided for performance reasons, however a typical user of
            AutoFixture would not need to worry about the performance.
            </remarks>
        </member>
        <member name="M:AutoFixture.DataAnnotations.NoDataAnnotationsCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes specified fixture by removing any default data annotations relays.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.DataAnnotations.NumericRangedRequestRelay">
            <summary>
            Handles the <see cref="T:AutoFixture.DataAnnotations.RangedRequest"/> for the number type by forwarding it
            to the <see cref="T:AutoFixture.Kernel.RangedNumberRequest"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.NumericRangedRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.DataAnnotations.RangeAttributeRelay">
            <summary>
            Relays a request for a ranged request to a <see cref="T:AutoFixture.DataAnnotations.RangedRequest"/>.
            </summary>
        </member>
        <member name="P:AutoFixture.DataAnnotations.RangeAttributeRelay.RequestMemberTypeResolver">
            <summary>
            Gets or sets the current IRequestMemberTypeResolver.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.RangeAttributeRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a requested range.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:AutoFixture.DataAnnotations.RangedRequest"/> encapsulating the operand
            type, the minimum and the maximum of the requested value, if possible; otherwise,
            a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.DataAnnotations.RangedRequest">
            <summary>
            Encapsulates a request of a specified type within the specified range.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.RangedRequest.#ctor(System.Type,System.Type,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.DataAnnotations.RangedRequest"/> class.
            </summary>
            <param name="memberType">Type of the member the range is specified for.</param>
            <param name="operandType">Type of the operand.</param>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="P:AutoFixture.DataAnnotations.RangedRequest.MemberType">
            <summary>
            Gets the type of the member the range is specified for.
            This property defines the expected type of the result.
            Refer to the <see cref="P:AutoFixture.DataAnnotations.RangedRequest.OperandType"/> for additional hints about the actual range value type.
            </summary>
        </member>
        <member name="P:AutoFixture.DataAnnotations.RangedRequest.OperandType">
            <summary>
            Gets the specified type of the operand the range is specified for.
            This property might not correspond to the actual type of a member for which the Range is specified.
            Refer to the <see cref="P:AutoFixture.DataAnnotations.RangedRequest.MemberType"/> property to get the actual member type.
            </summary>
        </member>
        <member name="P:AutoFixture.DataAnnotations.RangedRequest.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:AutoFixture.DataAnnotations.RangedRequest.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.RangedRequest.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.DataAnnotations.RangedRequest.Equals(AutoFixture.DataAnnotations.RangedRequest)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.DataAnnotations.RangedRequest.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.DataAnnotations.RangedRequest.GetConvertedMinimum(System.Type)">
            <summary>
            Gets minimum value converted to the specified type.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.RangedRequest.GetConvertedMaximum(System.Type)">
            <summary>
            Gets maximum value converted to the specified type.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.RangedRequest.ToString">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.DataAnnotations.RegularExpressionAttributeRelay">
            <summary>
            Relays a request for a string that matches a regular expression to a <see cref="T:AutoFixture.Kernel.RegularExpressionRequest"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.RegularExpressionAttributeRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.DataAnnotations.StringLengthAttributeRelay">
            <summary>
            Relays a request for a constrained string to a <see cref="T:AutoFixture.Kernel.ConstrainedStringRequest"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.StringLengthAttributeRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a specified length of characters that are allowed.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:AutoFixture.Kernel.RangedNumberRequest"/> encapsulating the operand
            type, the minimum and the maximum of the requested number, if possible; otherwise,
            a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.DataAnnotations.TimeSpanRangedRequestRelay">
            <summary>
            Handles <see cref="T:AutoFixture.DataAnnotations.RangedRequest"/> of TimeSpan type by forwarding requests
            to the <see cref="T:AutoFixture.Kernel.RangedNumberRequest"/> with min and max TimeSpan as milliseconds values.
            </summary>
        </member>
        <member name="M:AutoFixture.DataAnnotations.TimeSpanRangedRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.DecimalSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.DecimalSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Int64SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.DecimalSequenceGenerator.Create">
            <summary>
            Creates an anonymous number.
            </summary>
        </member>
        <member name="M:AutoFixture.DecimalSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
        </member>
        <member name="M:AutoFixture.DecimalSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.DefaultEngineParts">
            <summary>
            Supplies <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instances that can be used to implement the default
            engine of AutoFixture.
            </summary>
        </member>
        <member name="M:AutoFixture.DefaultEngineParts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.DefaultEngineParts"/> class with
            an instance of <see cref="T:AutoFixture.DefaultPrimitiveBuilders"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.DefaultEngineParts.#ctor(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.DefaultEngineParts"/> class with the
            supplied sequence of <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="primitiveBuilders">
            The builders to use instead of <see cref="T:AutoFixture.DefaultPrimitiveBuilders"/>.
            </param>
        </member>
        <member name="M:AutoFixture.DefaultEngineParts.#ctor(AutoFixture.Kernel.ISpecimenBuilder[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.DefaultEngineParts"/> class with the
            supplied array of <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="primitiveBuilders">
            The builders to use instead of <see cref="T:AutoFixture.DefaultPrimitiveBuilders"/>.
            </param>
        </member>
        <member name="M:AutoFixture.DefaultEngineParts.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.DefaultPrimitiveBuilders">
            <summary>
            Supplies <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instances that can resolve requests for many common
            primitives, such as <see cref="T:System.String"/> and <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.DefaultPrimitiveBuilders.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:AutoFixture.DefaultPrimitiveBuilders.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.DefaultRelays">
            <summary>
            Supplies <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instances that works as AutoFixture's
            'transmission'. Without those builders, very little is likely to work.
            </summary>
        </member>
        <member name="M:AutoFixture.DefaultRelays.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:AutoFixture.DefaultRelays.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.DictionaryFiller">
            <summary>
            Contains methods for populating dictionaries with specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.DictionaryFiller.AddMany(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Adds many items to a dictionary.
            </summary>
            <param name="specimen">The dictionary to which items should be added.</param>
            <param name="context">The context which can be used to resolve other specimens.</param>
            <remarks>
            <para>
            This method mainly exists to support AutoFixture's infrastructure code (particularly
            <see cref="T:AutoFixture.MultipleCustomization" /> and is not intended for use in user code.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="specimen"/> is not an instance of <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </exception>
        </member>
        <member name="M:AutoFixture.DictionaryFiller.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Adds many items to a dictionary.
            </summary>
            <param name="specimen">The dictionary to which items should be added.</param>
            <param name="context">The context which can be used to resolve other specimens.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="specimen"/> is not an instance of <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </exception>
        </member>
        <member name="T:AutoFixture.DisposableTrackingCustomization">
            <summary>
            Encapsulates a customization that adds tracking of disposable specimens to an
            <see cref="T:AutoFixture.IFixture"/>.
            </summary>
            <remarks>
            <para>
            Customize an <see cref="T:AutoFixture.IFixture"/> to enable tracking of disposable specimens. Invoke
            <see cref="M:AutoFixture.DisposableTrackingCustomization.Dispose"/> on the instance to dispose of all tracked instances.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.DisposableTrackingBehavior"/>
        </member>
        <member name="M:AutoFixture.DisposableTrackingCustomization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.DisposableTrackingCustomization"/> class.
            </summary>
        </member>
        <member name="P:AutoFixture.DisposableTrackingCustomization.Behavior">
            <summary>
            Gets the behavior that this customization adds to <see cref="T:AutoFixture.IFixture"/> instances.
            </summary>
            <seealso cref="T:AutoFixture.Kernel.DisposableTrackingBehavior"/>
        </member>
        <member name="M:AutoFixture.DisposableTrackingCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by applying <see cref="P:AutoFixture.DisposableTrackingCustomization.Behavior"/>.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="M:AutoFixture.DisposableTrackingCustomization.Dispose">
            <summary>
            Disposes <see cref="P:AutoFixture.DisposableTrackingCustomization.Behavior"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.DisposableTrackingCustomization.Dispose(System.Boolean)">
            <summary>
            Disposes <see cref="P:AutoFixture.DisposableTrackingCustomization.Behavior"/>.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:AutoFixture.DomainName">
            <summary>
            Represents a domain name.
            </summary>
        </member>
        <member name="M:AutoFixture.DomainName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.DomainName"/> class. Throws ArgumentNullException
            if domainName is null. Throws ArgumentException if domainName is empty.
            </summary>
        </member>
        <member name="P:AutoFixture.DomainName.Domain">
            <summary>
            Get the name of the domain.
            </summary>
        </member>
        <member name="M:AutoFixture.DomainName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the domain name for this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the domain name for this instance.
            </returns>
        </member>
        <member name="M:AutoFixture.DomainName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:AutoFixture.DomainName.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="T:AutoFixture.DomainNameGenerator">
            <summary>
            Creates new <see cref="T:AutoFixture.DomainName"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.DomainNameGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.DoubleSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.DoubleSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.DoubleSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.DoubleSequenceGenerator.Create">
            <summary>
            Creates an anonymous number.
            </summary>
        </member>
        <member name="M:AutoFixture.DoubleSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
        </member>
        <member name="M:AutoFixture.DoubleSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.Dsl.CompositeNodeComposer`1">
            <summary>
            Aggregates an arbitrary number of
            <see cref="T:AutoFixture.Dsl.ICustomizationComposer`1"/> instances by wrapping a
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" />.
            </summary>
            <typeparam name="T">The type of specimen to customize.</typeparam>
            <remarks>
            <para>
            This implementation finds all <see cref="T:AutoFixture.Dsl.NodeComposer`1" /> sub-nodes
            in the wrapped graph and applies the appropriate method to all matches.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Dsl.CompositeNodeComposer`1.Node">
            <summary>Gets the encapsulated node.</summary>
            <value>The encapsulated node.</value>
            <seealso cref="M:AutoFixture.Dsl.CompositeNodeComposer`1.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode)" />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Dsl.CompositeNodeComposer`1" /> class.
            </summary>
            <param name="node">
            A node which may contain <see cref="T:AutoFixture.Dsl.NodeComposer`1" /> sub-nodes.
            </param>
            <exception cref="T:System.ArgumentNullException">
            node is null.
            </exception>
            <seealso cref="P:AutoFixture.Dsl.CompositeNodeComposer`1.Node" />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.FromSeed(System.Func{`0,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.FromFactory(AutoFixture.Kernel.ISpecimenBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.FromFactory(System.Func{`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.FromFactory``1(System.Func{``0,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.Compose">
            <summary>
            Composes a new <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instance which can be used to
            produce specimens according to the behavior specified by previous
            method calls.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.Do(System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.OmitAutoProperties">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.With``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``1,``0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.WithAutoProperties">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositeNodeComposer`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.Dsl.CompositePostprocessComposer`1">
            <summary>
            Aggregates an arbitrary number of <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> instances.
            </summary>
            <typeparam name="T">The type of specimen to customize.</typeparam>
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.#ctor(System.Collections.Generic.IEnumerable{AutoFixture.Dsl.IPostprocessComposer{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Dsl.CompositePostprocessComposer`1"/>
            class with a sequence of <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> instances.
            </summary>
            <param name="composers">The composers to aggregate.</param>
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.#ctor(AutoFixture.Dsl.IPostprocessComposer{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Dsl.CompositePostprocessComposer`1"/>
            class with an array of <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> instances.
            </summary>
            <param name="composers">The composers to aggregate.</param>
        </member>
        <member name="P:AutoFixture.Dsl.CompositePostprocessComposer`1.Composers">
            <summary>
            Gets the aggregated composers.
            </summary>
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.Do(System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.OmitAutoProperties">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.With``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``1,``0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.WithAutoProperties">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.CompositePostprocessComposer`1.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.Dsl.ICustomizationComposer`1">
            <summary>
            Provides statements that can be used to control how specimens are created and
            post-processed.
            </summary>
            <typeparam name="T">The type of specimen to customize.</typeparam>
        </member>
        <member name="T:AutoFixture.Dsl.IFactoryComposer`1">
            <summary>
            Provides statements that can be used to control how specimens are created.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="M:AutoFixture.Dsl.IFactoryComposer`1.FromSeed(System.Func{`0,`0})">
            <summary>
            Specifies a function that defines how to create a specimen from a seed.
            </summary>
            <param name="factory">The factory used to create specimens from seeds.</param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IFactoryComposer`1.FromFactory(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Specifies an <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the
            appropriate type. Mostly for advanced scenarios.
            </summary>
            <param name="factory">
            An <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the appropriate type.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
            <remarks>
            <para>
            This method is mostly intended for advanced scenarios where a more loosely coupled
            strategy is desired to create specimens, but the advantages of the strongly typed
            <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> are still desired for post-processing.
            </para>
            <para>
            One possible scenario is for post-processing of interfaces or abstract types where
            auto-mocking is desired to create the instance. This method makes it possible to supply
            an auto-mocking <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/>.
            </para>
            <para>
            <paramref name="factory"/> must be able to create specimens of the requested type, or
            exceptions may be thrown.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Dsl.IFactoryComposer`1.FromFactory(System.Func{`0})">
            <summary>
            Specifies that an anonymous object should be created in a particular way; often by
            using a constructor.
            </summary>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IFactoryComposer`1.FromFactory``1(System.Func{``0,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using a single input
            parameter for the factory.
            </summary>
            <typeparam name="TInput">
            The type of input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes a single constructor argument of type <typeparamref name="TInput"/>.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IFactoryComposer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using two input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes two constructor arguments of type <typeparamref name="TInput1"/> and
            <typeparamref name="TInput2"/>.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IFactoryComposer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using three input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/> and <typeparamref name="TInput3"/>.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IFactoryComposer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using four input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput4">
            The type of the fourth input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/>, <typeparamref name="TInput3"/> and
            <typeparamref name="TInput4"/>.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="T:AutoFixture.Dsl.IPostprocessComposer`1">
            <summary>
            Provides statements that can be used to control how specimens are post-processed.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="M:AutoFixture.Dsl.IPostprocessComposer`1.Do(System.Action{`0})">
            <summary>
            Performs the specified action on a specimen.
            </summary>
            <param name="action">The action to perform.</param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IPostprocessComposer`1.OmitAutoProperties">
            <summary>
            Disables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IPostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property or field should be assigned an anonymous value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will should have a value
            assigned.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IPostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Registers that a writable property or field should be assigned a specific value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have
            <paramref name="value"/> assigned.
            </param>
            <param name="value">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IPostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0})">
            <summary>
            Registers that a writable property or field should be assigned generated value as a part of specimen post-processing.
            </summary>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have <paramref name="valueFactory"/> result assigned.
            </param>
            <param name="valueFactory">
            The factory of value to assign to the property or field identified by <paramref name="propertyPicker"/>.
            </param>
        </member>
        <member name="M:AutoFixture.Dsl.IPostprocessComposer`1.With``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``1,``0})">
            <summary>
            Registers that a writable property or field should be assigned generated value as a part of specimen post-processing.
            </summary>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have <paramref name="valueFactory"/> result assigned.
            </param>
            <param name="valueFactory">
            The factory of value to assign to the property or field identified by <paramref name="propertyPicker"/>.
            </param>
        </member>
        <member name="M:AutoFixture.Dsl.IPostprocessComposer`1.WithAutoProperties">
            <summary>
            Enables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.IPostprocessComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property should not be assigned any automatic value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property or field to ignore.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field to be ignored.
            </param>
            <returns>
            An <see cref="T:AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="T:AutoFixture.Dsl.NodeComposer`1">
            <summary>
            Enables composition customization of a single type of specimen.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="P:AutoFixture.Dsl.NodeComposer`1.Builder">
            <summary>Gets the encapsulated builder.</summary>
            <value>The encapsulated builder.</value>
            <seealso cref="M:AutoFixture.Dsl.NodeComposer`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder)" />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Dsl.NodeComposer`1" />
            class.
            </summary>
            <param name="builder">
            A builder to which specimen creation responsibilities are
            delegated.
            </param>
            <remarks>
            A new <see cref="T:AutoFixture.Dsl.NodeComposer`1" /> instance with an appropriate
            initial <paramref name="builder" /> can be easily produced by
            <see cref="M:AutoFixture.Kernel.SpecimenBuilderNodeFactory.CreateComposer``1" />.
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.SpecimenBuilderNodeFactory.CreateComposer``1" />
            <seealso cref="P:AutoFixture.Dsl.NodeComposer`1.Builder" />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.FromSeed(System.Func{`0,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.FromFactory(AutoFixture.Kernel.ISpecimenBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.FromFactory(System.Func{`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.FromFactory``1(System.Func{``0,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.Compose">
            <summary>
            Composes a new <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instance which can be used to
            produce specimens according to the behavior specified by previous
            method calls.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.Do(System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.OmitAutoProperties">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.With``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``1,``0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.WithAutoProperties">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.WithAutoProperties(System.Boolean)">
            <summary>
            Controls whether auto-properties will be enabled or not.
            </summary>
            <param name="enable">
            Set to <see langword="true"/> to enable auto-properties.
            </param>
            <returns>
            A new instance of <see cref="T:AutoFixture.Dsl.NodeComposer`1" /> where
            auto-properties are either enabled or disabled according to
            <paramref name="enable" />.
            </returns>
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.GetGraphWithAutoPropertiesNode">
            <summary>
            Looks for the AutoProperties postprocessor in the current graph.
            If postprocessor is missing, it's created in inactive state.
            </summary>
        </member>
        <member name="M:AutoFixture.Dsl.NodeComposer`1.ExcludeMemberFromAutoProperties(System.Reflection.MemberInfo,AutoFixture.Kernel.ISpecimenBuilderNode)">
            <summary>
            Adjusts the AutoProperties postprocessor and changes rule to avoid the specified member population.
            If AutoProperties node is missing, nothing is done.
            </summary>
        </member>
        <member name="T:AutoFixture.Dsl.NullComposer`1">
            <summary>
            An <see cref="T:AutoFixture.Dsl.ICustomizationComposer`1"/> that does not customize anything, but can still
            compose an <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> - typically by returning the instance it is
            configured to use.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Dsl.NullComposer`1"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Dsl.NullComposer`1"/> class with an
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> that will be returned by the <see cref="M:AutoFixture.Dsl.NullComposer`1.Compose"/> method.
            </summary>
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.#ctor(System.Func{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Dsl.NullComposer`1"/> class with a
            function used to implement the <see cref="M:AutoFixture.Dsl.NullComposer`1.Compose"/> method.
            </summary>
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.FromSeed(System.Func{`0,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.FromFactory(AutoFixture.Kernel.ISpecimenBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.FromFactory(System.Func{`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.FromFactory``1(System.Func{``0,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.Do(System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.OmitAutoProperties">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.With``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``1,``0})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.WithAutoProperties">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.Compose">
            <summary>
            Composes a new <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <remarks>
            <para>
            Which <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> is returned depends on how the
            <see cref="T:AutoFixture.Dsl.NullComposer`1"/> instance was configured through its constructor.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Dsl.NullComposer`1.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.ElementsBuilder`1">
            <summary>
            Draws a random element from the given collection.
            </summary>
        </member>
        <member name="M:AutoFixture.ElementsBuilder`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.ElementsBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.ElementsBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.ElementsBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.ElementsBuilder`1.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Returns one of the element present in the collection given when the object was constructed.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            One of the element present in the collection given to the constructor if <paramref name="request"/>
            is a request for <typeparamref name="T"/>; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.EmailAddressLocalPart">
            <summary>
            Represents the local part of the email address, defined as everything up to, but not including, the @ sign.
            Since EmailAddressLocalPart is used in constructing MailAddress, enforcement of rules on a valid email address
            is performed by <see cref="T:System.Net.Mail.MailAddress"/> and not EmailAddressLocalPart other than as noted.
            </summary>
        </member>
        <member name="M:AutoFixture.EmailAddressLocalPart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.EmailAddressLocalPart"/> class. Throws ArgumentNullException
            if localPart is null.  Throws ArgumentException if localPart is empty.
            </summary>
            <param name="localPart">The local part.</param>
        </member>
        <member name="P:AutoFixture.EmailAddressLocalPart.LocalPart">
            <summary>
            Get the local part.
            </summary>
        </member>
        <member name="M:AutoFixture.EmailAddressLocalPart.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:AutoFixture.EmailAddressLocalPart.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:AutoFixture.EmailAddressLocalPart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the local part for this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the local part for this instance.
            </returns>
        </member>
        <member name="T:AutoFixture.EmailAddressLocalPartGenerator">
            <summary>
            Creates new <see cref="T:AutoFixture.EmailAddressLocalPart"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.EmailAddressLocalPartGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.EnumGenerator">
            <summary>
            Generates enum values in a round-robin fashion.
            </summary>
        </member>
        <member name="M:AutoFixture.EnumGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.EnumGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.EnumGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new enum value based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">
            A context that can be used to create other specimens. Not used.
            </param>
            <returns>
            An enum value if appropriate; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a <see cref="T:System.Type"/> that represents an enum, an
            instance of that enum is returned. Differing values are returned, starting with the
            first value. When all values of the enum type have been served, the sequence starts
            over again.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Fixture">
            <summary>
            Provides object creation services.
            </summary>
        </member>
        <member name="M:AutoFixture.Fixture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Fixture"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Fixture.#ctor(AutoFixture.DefaultRelays)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Fixture"/> class with the supplied engine parts.
            </summary>
        </member>
        <member name="M:AutoFixture.Fixture.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.MultipleRelay)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Fixture"/> class with the supplied engine
            and a definition of what 'many' means.
            </summary>
            <param name="engine">The engine.</param>
            <param name="multiple">The definition and implementation of 'many'.</param>
        </member>
        <member name="P:AutoFixture.Fixture.Behaviors">
            <inheritdoc />
        </member>
        <member name="P:AutoFixture.Fixture.Customizations">
            <inheritdoc />
        </member>
        <member name="P:AutoFixture.Fixture.Engine">
            <summary>
            Gets the core engine of the <see cref="T:AutoFixture.Fixture"/> instance.
            </summary>
            <remarks>
            <para>
            This is the core engine that drives a <see cref="T:AutoFixture.Fixture"/> instance. Even with no
            <see cref="P:AutoFixture.Fixture.Customizations"/> or <see cref="P:AutoFixture.Fixture.ResidueCollectors"/>, the
            <see cref="P:AutoFixture.Fixture.Engine"/> should be capably of resolving a wide range of different requests,
            based on conventions.
            </para>
            </remarks>
            <see cref="P:AutoFixture.Fixture.Customizations"/>
            <see cref="P:AutoFixture.Fixture.ResidueCollectors"/>
        </member>
        <member name="P:AutoFixture.Fixture.OmitAutoProperties">
            <inheritdoc />
        </member>
        <member name="P:AutoFixture.Fixture.RepeatCount">
            <inheritdoc />
            <summary>
            Gets or sets a number that controls how many objects are created when a
            <see cref="T:AutoFixture.Fixture"/> creates more than one anonymous objects.
            </summary>
        </member>
        <member name="P:AutoFixture.Fixture.ResidueCollectors">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Fixture.Build``1">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Fixture.Customize(AutoFixture.ICustomization)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Fixture.Customize``1(System.Func{AutoFixture.Dsl.ICustomizationComposer{``0},AutoFixture.Kernel.ISpecimenBuilder})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Fixture.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Fixture.GetEnumerator">
            <summary>
            Gets an enumerator over the internal specimen builders used to create objects.
            </summary>
            <returns>
            An enumerator over the internal specimen builders used to create objects.
            </returns>
        </member>
        <member name="M:AutoFixture.Fixture.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.FixtureFreezer">
            <summary>
            Contains extension methods for freezing specimens in <see cref="T:AutoFixture.IFixture"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)">
            <summary>
            Freezes the type to a single value.
            </summary>
            <typeparam name="T">The type to freeze.</typeparam>
            <param name="fixture">The fixture.</param>
            <returns>
            The value that will subsequently always be created for <typeparamref name="T"/>.
            </returns>
            <remarks>
            <para>
            The <see cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)"/> method freezes the type to always return the same
            instance whenever an instance of the type is requested either directly, or indirectly as a
            nested value of other types.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture,System.Func{AutoFixture.Dsl.ICustomizationComposer{``0},AutoFixture.Kernel.ISpecimenBuilder})"/>
        </member>
        <member name="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture,System.Func{AutoFixture.Dsl.ICustomizationComposer{``0},AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Freezes the type to a single value.
            </summary>
            <typeparam name="T">The type to freeze.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="composerTransformation">
            A function that customizes a given <see cref="T:AutoFixture.Dsl.ICustomizationComposer`1"/> and returns
            the modified composer.
            </param>
            <returns>
            The value that will subsequently always be created for <typeparamref name="T"/>.
            </returns>
            <remarks>
            <para>
            This method freezes the type to always return the
            same instance whenever an instance of the type is requested either directly, or
            indirectly as a nested value of other types. The frozen instance is created by an
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> that is the result of applying the
            <paramref name="composerTransformation" />.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)"/>
        </member>
        <member name="T:AutoFixture.FixtureRegistrar">
            <summary>
            Contains extension methods for registering specimens in <see cref="T:AutoFixture.IFixture"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.FixtureRegistrar.Inject``1(AutoFixture.IFixture,``0)">
             <summary>
             Injects a specific instance for a specific type, in order to make
             that instance a shared instance, no matter how many times the
             Fixture is asked to create an instance of that type.
             </summary>
             <typeparam name="T">
             The type for which <paramref name="item"/> should be injected.
             </typeparam>
             <param name="fixture">The fixture.</param>
             <param name="item">The item to inject.</param>
             <remarks>
             <para>
             Injecting an instance of a specific type into a
             <see cref="T:AutoFixture.Fixture" /> effectively 'locks' the type to that
             specific instance. The injected <paramref name="item" /> becomes a
             shared instance. No matter how many times the Fixture instance is
             asked to create an instance of <typeparamref name="T" />, the
             shared item is returned.
             </para>
             <para>
             It's possible to inject a sub-type of T into the Fixture. As long
             as the item can be converted to T (i.e. as long at the code
             compiles), you can inject a sub-type of T into the Fixture. This
             can for example be used to lock an interface to a specific instance
             of a concrete type.
             </para>
             <para>
             If you are familiar with DI Container lifetime management, the
             following parallel may be helpful. If not, skip the next paragraph.
             </para>
             <para>
             Most DI Containers come with several built-in lifetime styles. The
             two most common lifetime styles are Transient (a new instance is
             created for every request) and Singleton (the same instance is used
             for all requests) (don't confuse the Singleton lifetime style with
             the Singleton design pattern; they are related, but different). By
             default, Fixture uses the Transient lifetime style: it creates a
             new instance for every request. However, using the Inject method,
             effectively changes the lifetime style for that particular type to
             Singleton.
             </para>
             </remarks>
             <example>
             This example demonstrates that when injecting an instance of the
             custom class MyClass into a Fixture instance, that Fixture instance
             will return the originally injected MyClass instance every time
             it's asked to create an instance of MyClass.
             <code>
             var fixture = new Fixture();
             var original = new MyClass();
             fixture.Inject(original);
            
             var actual1 = fixture.Create&lt;MyClass&gt;();
             var actual2 = fixture.Create&lt;MyClass&gt;();
            
             // actual1 and actual2 are equal, and equal to original
             Assert.Same(actual1, actual2);
             Assert.Same(original, actual1);
             Assert.Same(original, actual2);
             </code>
             </example>
             <seealso cref="M:AutoFixture.FixtureRegistrar.Register``1(AutoFixture.IFixture,System.Func{``0})" />
             <seealso cref="M:AutoFixture.FixtureRegistrar.Register``2(AutoFixture.IFixture,System.Func{``0,``1})" />
             <seealso cref="M:AutoFixture.FixtureRegistrar.Register``3(AutoFixture.IFixture,System.Func{``0,``1,``2})" />
             <seealso cref="M:AutoFixture.FixtureRegistrar.Register``4(AutoFixture.IFixture,System.Func{``0,``1,``2,``3})" />
             <seealso cref="M:AutoFixture.FixtureRegistrar.Register``5(AutoFixture.IFixture,System.Func{``0,``1,``2,``3,``4})" />
        </member>
        <member name="M:AutoFixture.FixtureRegistrar.Register``1(AutoFixture.IFixture,System.Func{``0})">
            <summary>
            Registers a creation function for a specific type.
            </summary>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="M:AutoFixture.FixtureRegistrar.Register``2(AutoFixture.IFixture,System.Func{``0,``1})">
            <summary>
            Registers a creation function for a specific type, when that creation function requires
            a single input parameter.
            </summary>
            <typeparam name="TInput">
            The type of the input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="M:AutoFixture.FixtureRegistrar.Register``3(AutoFixture.IFixture,System.Func{``0,``1,``2})">
            <summary>
            Registers a creation function for a specific type, when that creation function requires
            two input parameters.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="M:AutoFixture.FixtureRegistrar.Register``4(AutoFixture.IFixture,System.Func{``0,``1,``2,``3})">
            <summary>
            Registers a creation function for a specific type, when that creation function requires
            three input parameters.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="M:AutoFixture.FixtureRegistrar.Register``5(AutoFixture.IFixture,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Registers a creation function for a specific type, when that creation function requires
            four input parameters.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput4">
            The type of the fourth input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="T:AutoFixture.FixtureRepeater">
            <summary>
            Contains extension methods for repeating a function in <see cref="T:AutoFixture.IFixture"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.FixtureRepeater.Repeat``1(AutoFixture.IFixture,System.Func{``0})">
            <summary>
            Repeats a function many times.
            </summary>
            <typeparam name="T">
            The type of object that <paramref name="function"/> creates.
            </typeparam>
            <param name="fixture">
            The <see cref="T:AutoFixture.IFixture"/>to use.
            </param>
            <param name="function">
            A function that creates an instance of <typeparamref name="T"/>.
            </param>
            <returns>A sequence of objects created by <paramref name="function"/>.</returns>
            <remarks>
            <para>
            The number of times <paramref name="function"/> is invoked is determined by
            <see cref="P:AutoFixture.IFixture.RepeatCount"/>.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.FreezeOnMatchCustomization">
            <summary>
            A customization that freezes specimens of a specific <see cref="T:System.Type"/>
            and uses them to satisfy requests that match a set of criteria.
            </summary>
            <remarks>
            The criteria that determine whether the frozen specimen will be used
            to satisfy a given request are specified at construction time
            as a <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> object.
            Multiple criteria can be combined together as a boolean expression
            by composing them into a <see cref="T:AutoFixture.Kernel.AndRequestSpecification"/>
            or <see cref="T:AutoFixture.Kernel.OrRequestSpecification"/> object.
            </remarks>
        </member>
        <member name="M:AutoFixture.FreezeOnMatchCustomization.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.FreezeOnMatchCustomization"/> class.
            </summary>
            <param name="request">The request used to create a specimen to freeze.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="request"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:AutoFixture.FreezeOnMatchCustomization.#ctor(System.Object,AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.FreezeOnMatchCustomization"/> class.
            </summary>
            <param name="request">The request used to create a specimen to freeze.</param>
            <param name="matcher">
            The <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> used to match the requests
            that will be satisfied by the frozen specimen.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="request"/> or <paramref name="matcher"/> is null.
            </exception>
        </member>
        <member name="P:AutoFixture.FreezeOnMatchCustomization.TargetType">
            <summary>
            The <see cref="T:System.Type"/> of the frozen specimen.
            </summary>
        </member>
        <member name="P:AutoFixture.FreezeOnMatchCustomization.Request">
            <summary>
            The request used to resolve specimens. By default that is TargetType.
            </summary>
        </member>
        <member name="P:AutoFixture.FreezeOnMatchCustomization.Matcher">
            <summary>
            The <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> used to match the requests
            that will be satisfied by the frozen specimen.
            </summary>
        </member>
        <member name="M:AutoFixture.FreezeOnMatchCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.FreezingCustomization">
            <summary>
            A customization that will freeze a specimen of a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.FreezingCustomization.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.FreezingCustomization"/> class.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> to freeze.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetType"/> is null.
            </exception>
        </member>
        <member name="M:AutoFixture.FreezingCustomization.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.FreezingCustomization"/> class.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> to freeze.</param>
            <param name="registeredType">
            The <see cref="T:System.Type"/> to map the frozen <paramref name="targetType"/> value to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="targetType"/> or <paramref name="registeredType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="registeredType"/> is not assignable from <paramref name="targetType"/>.
            </exception>
        </member>
        <member name="P:AutoFixture.FreezingCustomization.TargetType">
            <summary>
            Gets the <see cref="T:System.Type"/> to freeze.
            </summary>
        </member>
        <member name="P:AutoFixture.FreezingCustomization.RegisteredType">
            <summary>
            Gets the <see cref="T:System.Type"/> to which the frozen <see cref="P:AutoFixture.FreezingCustomization.TargetType"/> value
            should be mapped to. Defaults to the same <see cref="T:System.Type"/> as <see cref="P:AutoFixture.FreezingCustomization.TargetType"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.FreezingCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the fixture by freezing the value of <see cref="P:AutoFixture.FreezingCustomization.TargetType"/>.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fixture"/> is null.
            </exception>
        </member>
        <member name="T:AutoFixture.Generator`1">
            <summary>
            Generates a perpetual sequence of items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <remarks>
            <para>
            This is a generator that generates a perpetual sequence of items of
            type <typeparamref name="T" />, based on an encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" />. This can be useful when zipping a
            against a finite sequence, since this sequence will go on for as long
            as required.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Generator`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Generator`1" />
            class.
            </summary>
            <param name="builder">
            A builder which is used to generate items.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder" /> is null.
            </exception>
        </member>
        <member name="M:AutoFixture.Generator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:AutoFixture.Generator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.GuidGenerator">
            <summary>
            Creates new <see cref="T:System.Guid"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.GuidGenerator.Create">
            <summary>
            Creates a new <see cref="T:System.Guid"/> instance.
            </summary>
        </member>
        <member name="M:AutoFixture.GuidGenerator.CreateAnonymous">
            <summary>
            Creates a new <see cref="T:System.Guid"/> instance.
            </summary>
        </member>
        <member name="M:AutoFixture.GuidGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.ICustomization">
            <summary>
            Encapsulates a customization of an <see cref="T:AutoFixture.IFixture"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.ICustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.IFixture">
            <summary>
            Provides object creation services.
            </summary>
        </member>
        <member name="P:AutoFixture.IFixture.Behaviors">
            <summary>
            Gets the behaviors that are applied as Decorators around other
            parts of a Fixture.
            is invoked.
            </summary>
        </member>
        <member name="P:AutoFixture.IFixture.Customizations">
            <summary>
            Gets the customizations that intercept the request handling by the core.
            </summary>
            <remarks>
            <para>
            Any <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> in this list are invoked before predefined builders
            giving them a chance to intercept a request and resolve it.
            </para>
            <para>
            <see cref="M:AutoFixture.IFixture.Customize``1(System.Func{AutoFixture.Dsl.ICustomizationComposer{``0},AutoFixture.Kernel.ISpecimenBuilder})"/> places resulting customizations in this list.
            </para>
            </remarks>
            <seealso cref="P:AutoFixture.IFixture.Behaviors"/>
            <seealso cref="P:AutoFixture.IFixture.ResidueCollectors"/>
        </member>
        <member name="P:AutoFixture.IFixture.OmitAutoProperties">
            <summary>
            Gets or sets if writable properties should generally be assigned a value when
            generating an anonymous object.
            </summary>
        </member>
        <member name="P:AutoFixture.IFixture.RepeatCount">
            <summary>
            Gets or sets a number that controls how many objects are created when a
            <see cref="T:AutoFixture.Fixture"/> creates more than one anonymous objects.
            </summary>
            <seealso cref="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0})" />
            <seealso cref="M:AutoFixture.CollectionFiller.AddManyTo``1(AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Func{``0})" />
            <seealso cref="M:AutoFixture.FixtureRepeater.Repeat``1(AutoFixture.IFixture,System.Func{``0})"/>
        </member>
        <member name="P:AutoFixture.IFixture.ResidueCollectors">
            <summary>
            Gets the residue collectors that can be used to handle requests that neither the
            <see cref="P:AutoFixture.IFixture.Customizations"/> nor the predefined builders could handle.
            </summary>
            <remarks>
            <para>
            These <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instances will be invoked if no previous builder
            could resolve a request. This gives you the opportunity to define fallback strategies
            to deal with unresolved requests.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.IFixture.Build``1">
            <summary>
            Customizes the creation algorithm for a single object, effectively turning off all
            Customizations on the <see cref="T:AutoFixture.IFixture"/>.
            </summary>
            <typeparam name="T">
            The type of object for which the algorithm should be customized.
            </typeparam>
            <returns>
            A <see cref="T:AutoFixture.Dsl.ICustomizationComposer`1"/> that can be used to customize the creation
            algorithm before creating the object.
            </returns>
            <remarks>
            <para>
            The Build method kicks off a Fluent API which is usually completed by invoking
            <see cref="M:AutoFixture.SpecimenFactory.Create``1(AutoFixture.Dsl.IPostprocessComposer{``0})"/> on the method
            chain.
            </para>
            <para>
            Note that the Build method chain is best understood as a one-off Customization. It
            bypasses all Customizations on the <see cref="T:AutoFixture.Fixture"/> instance. Instead, it allows
            fine-grained control when building a specific specimen. However, in most cases, adding
            a convention-based <see cref="T:AutoFixture.ICustomization"/> is a better, more flexible option.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.IFixture.Customize(AutoFixture.ICustomization)">
            <summary>
            Applies a customization.
            </summary>
            <param name="customization">The customization to apply.</param>
            <returns>An <see cref="T:AutoFixture.IFixture"/> where the customization is applied.</returns>
            <remarks>
            <para>
            Note to implementers: the returned <see cref="T:AutoFixture.IFixture"/> is expected to have
            <paramref name="customization"/> applied. Whether the return value is the same instance
            as the current instance, or a copy is unspecified.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.IFixture.Customize``1(System.Func{AutoFixture.Dsl.ICustomizationComposer{``0},AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Customizes the creation algorithm for all objects of a given type.
            </summary>
            <typeparam name="T">The type of object to customize.</typeparam>
            <param name="composerTransformation">
            A function that customizes a given <see cref="T:AutoFixture.Dsl.ICustomizationComposer`1"/> and returns
            the modified composer.
            </param>
            <remarks>
            <para>
            The resulting <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> is added to <see cref="P:AutoFixture.IFixture.Customizations"/>.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.IncrementingDateTimeCustomization">
            <summary>
            A customization that enables <see cref="T:System.DateTime"/> specimens
            to be based on an incrementing sequence of days starting from <see cref="P:System.DateTime.Now"/>.
            </summary>
            <remarks>
            <para>
            This customization reproduces the generation strategy for <see cref="T:System.DateTime"/> specimens
            used in AutoFixture up to version 3.0.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.IncrementingDateTimeCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fixture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:AutoFixture.Int16SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.Int16SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Int16SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Int16SequenceGenerator.Create">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.Int16SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
            /// <remarks>Obsolete: Please move over to using <see cref="M:AutoFixture.Int16SequenceGenerator.Create">Create()</see> as this method will be removed in the next release.</remarks>
        </member>
        <member name="M:AutoFixture.Int16SequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consecutive sequence, if <paramref name="request"/> is a request
            for a 16-bit integer; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Int32SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.Int32SequenceGenerator.Create">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.Int32SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <remarks>Obsolete: Please move over to using <see cref="M:AutoFixture.Int32SequenceGenerator.Create">Create()</see> as this method will be removed in the next release.</remarks>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.Int32SequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consecutive sequence, if <paramref name="request"/> is a request
            for an integer; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Int64SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.Int64SequenceGenerator.Create">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.Int64SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <remarks>Obsolete: Please move over to using <see cref="M:AutoFixture.Int64SequenceGenerator.Create">Create()</see> as this method will be removed in the next release.</remarks>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.Int64SequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consecutive sequence, if <paramref name="request"/> is a request
            for an 64-bit integer; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.InvariantCultureGenerator">
            <summary>
            Handles creation requests for <see cref="T:System.Globalization.CultureInfo"/> instances,
            returning always the same <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.InvariantCultureGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Generates a CultureInfo specimen based on a <see cref="T:System.Globalization.CultureInfo"/> type request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>>
            The generated CultureInfo will always be the same as <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
        </member>
        <member name="T:AutoFixture.IParameterCustomizationSource">
            <summary>
                Source of the <see cref="T:AutoFixture.ICustomization" /> instances specific for the particular
                <see cref="T:System.Reflection.ParameterInfo" /> parameter.
                The main clients of this interface might be glue libraries which provide support for the parameter specific
                customizations.
            </summary>
        </member>
        <member name="M:AutoFixture.IParameterCustomizationSource.GetCustomization(System.Reflection.ParameterInfo)">
            <summary>
                Gets a customization for a parameter.
            </summary>
            <param name="parameter">The parameter for which the customization is requested.</param>
            <returns></returns>
        </member>
        <member name="T:AutoFixture.IRequestMemberTypeResolver">
            <summary>
            Resolver of the member type for the class member requests (e.g. PropertyInfo, FieldInfo).
            </summary>
        </member>
        <member name="M:AutoFixture.IRequestMemberTypeResolver.TryGetMemberType(System.Object,System.Type@)">
            <summary>
            Tries to determine requested member type and returns it.
            </summary>
        </member>
        <member name="T:AutoFixture.Kernel.AbstractTypeSpecification">
            <summary>
            A specification that evaluates whether a request is a request for an abstract type such as an abstract base class or an interface.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.AbstractTypeSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Type"/> that represents an abstract base class or an interface;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ActionSpecimenCommand`1">
            <summary>
            Adapts an action delegate to <see cref="T:AutoFixture.Kernel.ISpecimenCommand" />.
            </summary>
            <typeparam name="T">
            The type of specimen operated on by the adapted action delegate.
            </typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.ActionSpecimenCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.ActionSpecimenCommand`1" /> class.
            </summary>
            <param name="action">
            An action to be performed when <see cref="M:AutoFixture.Kernel.ActionSpecimenCommand`1.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)" /> is invoked.
            </param>
            <seealso cref="M:AutoFixture.Kernel.ActionSpecimenCommand`1.#ctor(System.Action{`0,AutoFixture.Kernel.ISpecimenContext})" />
        </member>
        <member name="M:AutoFixture.Kernel.ActionSpecimenCommand`1.#ctor(System.Action{`0,AutoFixture.Kernel.ISpecimenContext})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.ActionSpecimenCommand`1" /> class.
            </summary>
            <param name="action">
            An action to be performed when <see cref="M:AutoFixture.Kernel.ActionSpecimenCommand`1.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)" /> is invoked.
            </param>
            <seealso cref="M:AutoFixture.Kernel.ActionSpecimenCommand`1.#ctor(System.Action{`0})" />
        </member>
        <member name="M:AutoFixture.Kernel.ActionSpecimenCommand`1.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>Invokes the adapted action on the specimen.</summary>
            <param name="specimen">
            The specimen on which to invoke the adapted action.
            </param>
            <param name="context">The context.</param>
            <remarks>
            <para>
            This method invokes the adapted action supplied via one of the
            constructors, passing <paramref name="specimen" /> and
            <paramref name="context" /> to the action.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.ActionSpecimenCommand`1.#ctor(System.Action{`0})" />
            <seealso cref="M:AutoFixture.Kernel.ActionSpecimenCommand`1.#ctor(System.Action{`0,AutoFixture.Kernel.ISpecimenContext})" />
        </member>
        <member name="T:AutoFixture.Kernel.AndRequestSpecification">
            <summary>
            A boolean 'And' Composite <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.AndRequestSpecification.#ctor(AutoFixture.Kernel.IRequestSpecification[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.AndRequestSpecification"/> with the
            supplied specifications.
            </summary>
            <param name="specifications">An array of <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.</param>
        </member>
        <member name="M:AutoFixture.Kernel.AndRequestSpecification.#ctor(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.IRequestSpecification})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.AndRequestSpecification"/> class with the
            supplied specifications.
            </summary>
            <param name="specifications">A sequence of <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.</param>
        </member>
        <member name="P:AutoFixture.Kernel.AndRequestSpecification.Specifications">
            <summary>
            Gets the decorated specifications.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.AndRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by all
            <see cref="P:AutoFixture.Kernel.AndRequestSpecification.Specifications"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.AnyTypeSpecification">
            <summary>
            A specification that evaluates whether a request is a request for a type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.AnyTypeSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Type"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ArrayFavoringConstructorQuery">
            <summary>
            Selects public constructors ordered so that any constructor with array arguments are
            selected before any other public constructor.
            </summary>
            <remarks>
            The main target of this <see cref="T:AutoFixture.Kernel.IMethodQuery" /> implementation is to pick constructors
            with array arguments before any other constructor.
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.ArrayFavoringConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, giving priority to any constructor
            with one or more array arguments.
            </returns>
            <remarks>
            <para>
            Given several constructors, this implementation will favor those constructors which
            contain array arguments. Constructors with most matching arguments are returned before
            constructors with less matching arguments.
            </para>
            <para>
            Any other constructors are returned with the most modest constructors first.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.ArrayFavoringConstructorQuery" />
        </member>
        <member name="T:AutoFixture.Kernel.ArrayRelay">
            <summary>
            Relays a request for an array to a <see cref="T:AutoFixture.Kernel.MultipleRequest"/> and converts the result
            to the desired array type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ArrayRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new array based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            An array of the requested type if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an array and <paramref name="context"/>
            can satisfy a <see cref="T:AutoFixture.Kernel.MultipleRequest"/> for the element type, the return value is a
            populated array of the requested type. If not, the return value is a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.AutoPropertiesCommand">
            <summary>
            A command that assigns anonymous values to all writable properties and fields of a type.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.AutoPropertiesCommand.ExplicitSpecimenType">
            <summary>
            The explicitly specified <see cref="T:System.Type"/> that should be used to resolve fields and properties
            to populate for the specimen.
            <remarks>
            <para>
            Property will return null if no explicit specimen type was specified during the command construction.
            In this case command uses the runtime type of the generated specimen to resolve its fields and properties.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand"/> class.
            </summary>
            <remarks>
            <para>
            When created without an explicit specimen type, the <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand"/>
            will infer the specimen type from the actual specimen instance.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand"/> class with the
            supplied specimen type.
            </summary>
            <param name="specimenType">The specimen type on which properties are assigned.</param>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand.#ctor(AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand"/> class with the
            supplied specification.
            </summary>
            <param name="specification">
            A specification that is used as a filter to include properties or fields.
            </param>
            <remarks>
            <para>
            Only properties or fields satisfied by <paramref name="specification"/> will get
            assigned values.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand.#ctor(System.Type,AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand"/> class with the
            supplied specimen type and specification.
            </summary>
            <param name="specimenType">The specimen type on which properties are assigned.</param>
            <param name="specification">
            A specification that is used as a filter to include properties or fields.
            </param>
            <remarks>
            <para>
            Only properties or fields satisfied by <paramref name="specification"/> will get
            assigned values.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand.GetSpecimenType(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.Kernel.AutoPropertiesCommand`1">
            <summary>
            A command that assigns anonymous values to all writable properties and fields of a type.
            </summary>
            <typeparam name="T">The specimen type on which properties are assigned.</typeparam>
        </member>
        <member name="P:AutoFixture.Kernel.AutoPropertiesCommand`1.Specification">
            <summary>
            Specification that filters properties and files that should be populated.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand`1"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand`1.#ctor(AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand`1"/> class with the
            the supplied specification.
            </summary>
            <param name="specification">
            A specification that is used as a filter to include properties or fields.
            </param>
            <remarks>
            <para>
            Only properties or fields satisfied by <paramref name="specification"/> will get
            assigned values.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand`1.Execute(`0,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Assigns anonymous values to properties and fields on a specimen.
            </summary>
            <param name="specimen">
            The specimen on which property and field values will be assigned.
            </param>
            <param name="context">
            An <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> that is used to create property and field values.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand`1.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates whether a request matches a property or field affected by this command.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Reflection.PropertyInfo"/>
            or <see cref="T:System.Reflection.FieldInfo"/> that identifies a property or field affected by this
            <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand`1.GetSpecimenType(System.Object)">
            <summary>
            Gets the type of the specimen.
            </summary>
            <param name="specimen">The specimen.</param>
            <returns>The type of the specimen.</returns>
            <remarks>
            <para>
            This implementation ignores <paramref name="specimen"/> and returns the type parameter
            of <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand`1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.AutoPropertiesCommand`1.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Assigns anonymous values to properties and fields on a specimen.
            </summary>
        </member>
        <member name="T:AutoFixture.Kernel.BindingCommand`2">
            <summary>
            Encapsulates a command that binds a property or a field to a value.
            </summary>
            <typeparam name="T">
            The type of the specimen on which the property or value will be set.
            </typeparam>
            <typeparam name="TProperty">The type of property or field.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.BindingCommand`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.BindingCommand`2"/> class with
            the supplied property picker expression.
            </summary>
            <param name="propertyPicker">An expression that identifies a property or field.</param>
            <remarks>
            <para>
            This constructor implies that an anonymous value will be assigned to the property or
            field identified by <paramref name="propertyPicker"/>.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.BindingCommand`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.BindingCommand`2"/> class with
            the supplied property picker expression and the value to be assigned to that property
            or field.
            </summary>
            <param name="propertyPicker">An expression that identifies a property or field.</param>
            <param name="propertyValue">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.BindingCommand`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Func{AutoFixture.Kernel.ISpecimenContext,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.BindingCommand`2"/> class with
            the supplied property picker expression and a function that creates a value to be
            assigned to that property or field.
            </summary>
            <param name="propertyPicker">An expression that identifies a property or field.</param>
            <param name="valueCreator">
            A function that creates a value that will be assigned to the property or field
            identified by <paramref name="propertyPicker"/>.
            </param>
        </member>
        <member name="P:AutoFixture.Kernel.BindingCommand`2.Member">
            <summary>
            Gets the member identified by the expression supplied through the constructor.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.BindingCommand`2.ValueCreator">
            <summary>
            Gets the function that creates a value to be assigned to the property or field
            identified by <see cref="P:AutoFixture.Kernel.BindingCommand`2.Member"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.BindingCommand`2.Execute(`0,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Executes the command on the supplied specimen by assigning the property of field the
            correct value.
            </summary>
            <param name="specimen">
            A specimen that should have its property or field assigned.
            </param>
            <param name="context">
            An <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> which can supply an anonymous value for the
            property or field.
            </param>
            <remarks>
            <para>
            This method assigns a value to the property or field identified by the expression
            supplied to the class' constructor. If no value (or creator) was supplied to the
            constructor, <paramref name="context"/> will be used to create the value.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.BindingCommand`2.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates whether a request matches the property or field affected by this command.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Reflection.PropertyInfo"/>
            or <see cref="T:System.Reflection.FieldInfo"/> that identifies the property or field affected by this
            <see cref="T:AutoFixture.Kernel.BindingCommand`2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.BindingCommand`2.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Executes the command on the supplied specimen by assigning the property of field the correct value.
            </summary>
            <remarks>
            <para>
            This method assigns a value to the property or field identified by
            the expression supplied to the class' constructor. If no value (or
            creator) was supplied to the constructor,
            <paramref name="context" /> will be used to create the value.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.CollectionRelay">
            <summary>
            Relays a request for an <see cref="T:System.Collections.Generic.ICollection`1" /> to a request for a
            <see cref="T:System.Collections.Generic.List`1"/> and returns the result.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.CollectionRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A populated <see cref="T:System.Collections.Generic.ICollection`1"/> of the appropriate item type if possible;
            otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an <see cref="T:System.Collections.Generic.ICollection`1"/> and
            <paramref name="context"/> can satisfy a request for a populated specimen of that type,
            this value will be returned. If not, the return value is a <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.CollectionSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.CollectionSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.ObjectModel.Collection`1" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.CompositeMethodQuery">
            <summary>
            An implementation of <see cref="T:AutoFixture.Kernel.IMethodQuery"/> that composes other IMethodQuery instances.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeMethodQuery.#ctor(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.IMethodQuery})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.CompositeMethodQuery"/> class.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeMethodQuery.#ctor(AutoFixture.Kernel.IMethodQuery[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.CompositeMethodQuery"/> class.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="P:AutoFixture.Kernel.CompositeMethodQuery.Queries">
            <summary>
            Gets the queries supplied through one of the constructors.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeMethodQuery.SelectMethods(System.Type)">
            <summary>
            Selects the methods for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>Methods for <paramref name="type"/>.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.CompositeSpecimenBuilder">
            <summary>
            Creates specimens by returning the first specimen created by its children.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenBuilder.#ctor(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.CompositeSpecimenBuilder"/> class with the
            supplied builders.
            </summary>
            <param name="builders">The child builders.</param>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenBuilder.#ctor(AutoFixture.Kernel.ISpecimenBuilder[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.CompositeSpecimenBuilder"/> class with the
            supplied builders.
            </summary>
            <param name="builders">The child builders.</param>
        </member>
        <member name="P:AutoFixture.Kernel.CompositeSpecimenBuilder.Builders">
            <summary>
            Gets the child builders.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen by delegating to <see cref="P:AutoFixture.Kernel.CompositeSpecimenBuilder.Builders"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>The first result created by <see cref="P:AutoFixture.Kernel.CompositeSpecimenBuilder.Builders"/>.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenBuilder.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenBuilder.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenBuilder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can
            be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.CompositeSpecimenCommand">
            <summary>
            Aggregates a set of <see cref="T:AutoFixture.Kernel.ISpecimenCommand"/>.
            Executing the aggregate will trigger the execution of the parts.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenCommand.#ctor(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenCommand})">
            <summary>
            Initializes a new instance of <see cref="T:AutoFixture.Kernel.CompositeSpecimenCommand"/> class with the supplied set of commands.
            </summary>
            <param name="commands">The child commands.</param>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenCommand.#ctor(AutoFixture.Kernel.ISpecimenCommand[])">
            <summary>
            Initializes a new instance of <see cref="T:AutoFixture.Kernel.CompositeSpecimenCommand"/> class with the supplied set of commands.
            </summary>
            <param name="commands">The child commands.</param>
        </member>
        <member name="P:AutoFixture.Kernel.CompositeSpecimenCommand.Commands">
            <summary>
            Gets the child commands.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.CompositeSpecimenCommand.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Executes all child commands using a given specimen and context.
            </summary>
            <param name="specimen">The specimen on which the child commands will be executed.</param>
            <param name="context">The context of <paramref name="specimen"/>.</param>
        </member>
        <member name="T:AutoFixture.Kernel.ConstrainedStringRequest">
            <summary>
            Encapsulates a maximum length for a string.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ConstrainedStringRequest.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ConstrainedStringRequest"/> class.
            </summary>
            <param name="minimumLength">The minimum length.</param>
            <param name="maximumLength">The maximum length.</param>
        </member>
        <member name="M:AutoFixture.Kernel.ConstrainedStringRequest.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ConstrainedStringRequest"/> class.
            </summary>
            <param name="maximumLength">The maximum.</param>
        </member>
        <member name="P:AutoFixture.Kernel.ConstrainedStringRequest.MinimumLength">
            <summary>
            Gets the minimum length.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.ConstrainedStringRequest.MaximumLength">
            <summary>
            Gets the maximum length.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ConstrainedStringRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:AutoFixture.Kernel.ConstrainedStringRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.ConstrainedStringRequest.Equals(AutoFixture.Kernel.ConstrainedStringRequest)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ConstructorMethod">
            <summary>
            Encapsulates a constructor as a method.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ConstructorMethod.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ConstructorMethod"/> class.
            </summary>
            <param name="constructor">The constructor.</param>
        </member>
        <member name="P:AutoFixture.Kernel.ConstructorMethod.Constructor">
            <summary>
            Gets the constructor.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ConstructorMethod.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.ConstructorMethod.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="P:AutoFixture.Kernel.ConstructorMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ConstructorMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.ConstructorMethod.Equals(AutoFixture.Kernel.ConstructorMethod)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.Criterion`1">
            <summary>
            Serves as a criterion against which a value can be compared. When a
            given value equals the criterion, it can be said to match the
            criterion; otherwise not.
            </summary>
            <typeparam name="T">The type of values being compared.</typeparam>
            <remarks>
            <para>
            Sometimes you need to compare various candidates against a particular
            value, but the comparison rules may vary. Sometimes, strict equality
            is warranted, but otherwise (e.g. when comparing strings) looser
            comparison rules can be applied (e.g. case-insensitve comparison of
            strings).
            </para>
            <para>
            The Criterion class enables you to capture the desied value (the
            <see cref="P:AutoFixture.Kernel.Criterion`1.Target" />) together with the appropriate comparison method
            (the <see cref="P:AutoFixture.Kernel.Criterion`1.Comparer" />) in a single object.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.Criterion`1.#ctor(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Criterion`1" />
            class.
            </summary>
            <param name="target">
            The target value against which candidates will be compared. Can be
            <see langword="null" />.
            </param>
            <param name="comparer">
            The comparison method used to compare candidates against
            <paramref name="target" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer" /> is <see langword="null" />.
            </exception>
            <seealso cref="P:AutoFixture.Kernel.Criterion`1.Target" />
            <seealso cref="P:AutoFixture.Kernel.Criterion`1.Comparer" />
        </member>
        <member name="M:AutoFixture.Kernel.Criterion`1.Equals(`0)">
            <summary>
            Compares a candidate value against this
            <see cref="T:AutoFixture.Kernel.Criterion`1" />.
            </summary>
            <param name="other">
            The candidate to compare against this value.
            </param>
            <returns>
            <see langword="true" /> if <paramref name="other" /> is deemed
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            This method compares the candidate <paramref name="other" />
            against <see cref="P:AutoFixture.Kernel.Criterion`1.Target" />, using <see cref="P:AutoFixture.Kernel.Criterion`1.Comparer" /> as
            the comparison method. If this combination of target value and
            comparison method deems the candidate to be equal to this
            criterion, the return value is <see langword="true" />.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.Criterion`1.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to another object.
            </summary>
            <param name="obj">The object to compare to this object.</param>
            <returns>
            <see langword="true" /> if <paramref name="obj" /> is equal to this
            object; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:AutoFixture.Kernel.Criterion`1.Target">
            <summary>
            The desired target value, as supplied via the constructor.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.Criterion`1.Comparer">
            <summary>
            The comparison method used to compare <see cref="P:AutoFixture.Kernel.Criterion`1.Target" /> to
            candidates.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.Criterion`1.GetHashCode">
            <summary>
            Returns the hash code for the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.DelegateGenerator">
            <summary>
            Creates new <see cref="T:System.Delegate"/> instances.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.DelegateGenerator.Specification">
            <summary>
            The specification used to verify that request is for the supported delegate type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DelegateGenerator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AutoFixture.Kernel.DelegateGenerator"/> type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DelegateGenerator.#ctor(AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Creates a new instance of the <see cref="T:AutoFixture.Kernel.DelegateGenerator"/> type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DelegateGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
            <returns>
            A new <see cref="T:System.Delegate"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.Delegate"/>; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.DelegateSpecification">
            <summary>
            A specification that evaluates specimen request to see if it's for the delegate type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DelegateSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is of a delegate type, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.DictionaryRelay">
            <summary>
            Relays a request for an <see cref="T:System.Collections.Generic.IDictionary`2" /> to a request for a
            <see cref="T:System.Collections.Generic.Dictionary`2"/> and returns the result.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DictionaryRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A populated <see cref="T:System.Collections.Generic.IDictionary`2"/> of the appropriate item type if
            possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> and <paramref name="context"/> can satisfy a
            request for a populated specimen of that type, this value will be returned. If not, the
            return value is a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.DictionarySpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a dictionary.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DictionarySpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            dictionary.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.Dictionary`2" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.DirectBaseTypeSpecification">
            <summary>
            A specification that determines whether the request is a request
            for a <see cref="T:System.Type"/> that directly inherits from the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DirectBaseTypeSpecification.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.DirectBaseTypeSpecification"/> class.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> from which
            the requested type should directly inherit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:AutoFixture.Kernel.DirectBaseTypeSpecification.TargetType">
            <summary>
            The <see cref="T:System.Type"/> from which
            the requested type should directly inherit.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DirectBaseTypeSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by the Specification;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.DisposableTracker">
            <summary>
            Tracks all disposable specimens created by a decorated <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to
            be able to dispose them when signalled.
            </summary>
            <remarks>
            <para>
            The DisposableTracker examines all specimens created by a decorated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/>. All specimens that implement <see cref="T:System.IDisposable"/> are
            tracked so that they can be deterministically disposed. This happens when
            <see cref="M:AutoFixture.Kernel.DisposableTracker.Dispose"/> is invoked on the instance.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTracker.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.DisposableTracker"/> class.
            </summary>
            <param name="builder">The decorated builder.</param>
            <remarks>
            <para>
            After initialization, <paramref name="builder"/> is available through the
            <see cref="P:AutoFixture.Kernel.DisposableTracker.Builder"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Kernel.DisposableTracker.Builder">
            <summary>
            Gets the decorated builder.
            </summary>
            <remarks>
            <para>
            This property exposes the decorated builder originally supplied to the constructor.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.DisposableTracker.#ctor(AutoFixture.Kernel.ISpecimenBuilder)"/>
        </member>
        <member name="P:AutoFixture.Kernel.DisposableTracker.Disposables">
            <summary>
            Gets the disposable specimens currently tracked by this instance.
            </summary>
            <remarks>
            <para>
            Items are added to this list by the <see cref="M:AutoFixture.Kernel.DisposableTracker.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)"/>
            method.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTracker.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the decorated builder.
            </returns>
            <remarks>
            <para>
            This method delegates creation of specimens to the decorated <see cref="P:AutoFixture.Kernel.DisposableTracker.Builder"/>.
            However, before specimens are returned they are examined and tracked in the
            <see cref="P:AutoFixture.Kernel.DisposableTracker.Disposables"/> list if they implement <see cref="T:System.IDisposable"/>. They can
            subsequently be disposed by invoking the <see cref="M:AutoFixture.Kernel.DisposableTracker.Dispose"/> method on the
            instance.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTracker.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTracker.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTracker.Dispose">
            <summary>
            Disposes all items in the <see cref="P:AutoFixture.Kernel.DisposableTracker.Disposables"/> list and removes them from the
            list.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTracker.Dispose(System.Boolean)">
            <summary>
            Disposes all items in the <see cref="P:AutoFixture.Kernel.DisposableTracker.Disposables"/> list and removes them from the
            list.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:AutoFixture.Kernel.DisposableTrackingBehavior">
            <summary>
            Decorates <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instances with <see cref="T:AutoFixture.Kernel.DisposableTracker"/>
            instances.
            </summary>
            <seealso cref="T:AutoFixture.Kernel.DisposableTracker"/>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTrackingBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.DisposableTrackingBehavior"/> class.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.DisposableTrackingBehavior.Trackers">
            <summary>
            Gets the trackers created by this instance. Each time <see cref="M:AutoFixture.Kernel.DisposableTrackingBehavior.Transform(AutoFixture.Kernel.ISpecimenBuilder)"/> is
            invoked, a new <see cref="T:AutoFixture.Kernel.DisposableTracker"/> instance is created and added to this
            list.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTrackingBehavior.Transform(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied builder with a <see cref="T:AutoFixture.Kernel.DisposableTracker"/>.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.DisposableTracker"/> that decorates <paramref name="builder"/>.
            </returns>
            <remarks>
            <para>
            The returned <see cref="T:AutoFixture.Kernel.DisposableTracker"/> is also added to the
            <see cref="P:AutoFixture.Kernel.DisposableTrackingBehavior.Trackers"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTrackingBehavior.Dispose">
            <summary>
            Disposes all <see cref="P:AutoFixture.Kernel.DisposableTrackingBehavior.Trackers"/> and clears the list.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.DisposableTrackingBehavior.Dispose(System.Boolean)">
            <summary>
            Disposes all <see cref="P:AutoFixture.Kernel.DisposableTrackingBehavior.Trackers"/> and clears the list.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:AutoFixture.Kernel.EnumerableFavoringConstructorQuery">
            <summary>
            Selects public constructors ordered so that any constructor with arguments matching
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> are selected before any other public constructor.
            </summary>
            <remarks>
            The main target of this <see cref="T:AutoFixture.Kernel.IMethodQuery" /> implementation is to pick
            <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" /> before any other constructor. This can be used to
            populate a list instance with a sequence of items.
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.EnumerableFavoringConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, giving priority to any constructor
            with one or more <see cref="T:System.Collections.Generic.IEnumerable`1"/> arguments.
            </returns>
            <remarks>
            <para>
            Given several constructors, this implementation will favor those constructors with
            arguments that matches <see cref="T:System.Collections.Generic.IEnumerable`1"/>, where T is the item type of
            <paramref name="type"/>, if it's generic. Constructors with most matching arguments are
            returned before constructors with less matching arguments.
            </para>
            <para>
            Any other constructors are returned with the most modest constructors first.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.EnumerableFavoringConstructorQuery" />
        </member>
        <member name="T:AutoFixture.Kernel.EnumerableRelay">
            <summary>
            Relays a request for <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a <see cref="T:AutoFixture.Kernel.MultipleRequest"/> and
            converts the result to a sequence of the requested type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.EnumerableRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new sequence of items based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A sequence of the requested type if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for <see cref="T:System.Collections.Generic.IEnumerable`1" /> and
            <paramref name="context"/> can satisfy a <see cref="T:AutoFixture.Kernel.MultipleRequest"/> for the item
            type, the return value is a populated sequence of the requested type. If not, the
            return value is a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.EnumeratorRelay">
            <summary>
            Relays a request for <see cref="T:System.Collections.Generic.IEnumerator`1" /> to
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> and converts the result to an enumerator
            of a sequence of the requested type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.EnumeratorRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new enumerator based on a request.
            </summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            An enumerator of the requested type if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> and <paramref name="context"/> can
            satisfy an <see cref="T:System.Collections.Generic.IEnumerable`1"/> request for the
            element type, the return value is an enumerator of the
            requested type. If not, the return value is a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.EqualRequestSpecification">
            <summary>
            Evaluates whether a request is equal to an expected target.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.EqualRequestSpecification.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.EqualRequestSpecification" /> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.EqualRequestSpecification.#ctor(System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.EqualRequestSpecification" /> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.EqualRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates whether a request for a specimen is equal to the expected target.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.EqualRequestSpecification.Target">
            <summary>
            Gets the expected target.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.EqualRequestSpecification.Comparer">
            <summary>
            Gets the equality comparer used to compare a request to the expected target.
            </summary>
        </member>
        <member name="T:AutoFixture.Kernel.ExactTypeSpecification">
            <summary>
            A specification that evaluates requests for types against a target type.
            Also matches generic type requests agains the specified open generic.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ExactTypeSpecification.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ExactTypeSpecification"/> class.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="P:AutoFixture.Kernel.ExactTypeSpecification.TargetType">
            <summary>
            Gets the type targeted by this <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ExactTypeSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> matches the target type;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.ExpressionReflector.UnwrapIfConversionExpression(System.Linq.Expressions.Expression)">
            <summary>
            If current expression is a conversion expression, unwrap it and return the underlying expression.
            Otherwise, do nothing.
            </summary>
        </member>
        <member name="T:AutoFixture.Kernel.FactoryMethodQuery">
            <summary>
            Selects public factory methods ordered by the modest first.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FactoryMethodQuery.SelectMethods(System.Type)">
            <summary>
            Selects the public factory methods for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public factory methods for <paramref name="type"/>, ordered by the modest first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned methods is based on the number of parameters of the
            method. Methods with fewer parameters are returned before methods with more
            parameters. This means that if a default parameterless factory methods exists, it
            will be the first one returned.
            </para>
            <para>
            In case of two factory methods with an equal number of parameters, the ordering is
            unspecified.
            </para>
            <para>
            Factory methods that contain parameters of the requested <paramref name="type"/>
            are skipped in order to avoid circular references.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.FalseRequestSpecification">
            <summary>
            A <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> that is always <see langword="false"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FalseRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.FieldRequestRelay">
            <summary>
            Relays a request for a field to a <see cref="T:AutoFixture.Kernel.SeededRequest"/> with a seed based
            on the field's name.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FieldRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a requested field.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:AutoFixture.Kernel.SeededRequest"/> encapsulating the field type
            and name of the requested field, if possible; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.FieldSpecification">
            <summary>
            A specification that determines whether the request is a request
            for a <see cref="T:System.Reflection.FieldInfo"/> matching the specified name and <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FieldSpecification.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.FieldSpecification"/> class.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> with which the requested
            <see cref="T:System.Reflection.FieldInfo"/> type should be compatible.
            </param>
            <param name="targetName">
            The name which the requested <see cref="T:System.Reflection.FieldInfo"/> name
            should match exactly.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetType"/> or
            <paramref name="targetName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.FieldSpecification.#ctor(System.IEquatable{System.Reflection.FieldInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.FieldSpecification"/> class.
            </summary>
            <param name="target">
            The criteria used to match the requested
            <see cref="T:System.Reflection.FieldInfo"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:AutoFixture.Kernel.FieldSpecification.TargetType">
            <summary>
            The <see cref="T:System.Type"/> with which the requested
            <see cref="T:System.Reflection.FieldInfo"/> type should be compatible.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.FieldSpecification.TargetName">
            <summary>
            The name which the requested <see cref="T:System.Reflection.FieldInfo"/> name
            should match exactly.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FieldSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by the Specification;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.FieldTypeAndNameCriterion">
            <summary>
            Represents a criterion for comparing a candidate field against a
            desired type and name.
            </summary>
            <remarks>
            <para>
            Sometimes, you may need to evaluate various candidate
            <seealso cref="T:System.Reflection.FieldInfo" /> values, looking for one that has a
            desired field type and name. This class represents such an
            evaluation criterion.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.FieldTypeAndNameCriterion.Equals(System.Reflection.FieldInfo)" />
            <seealso cref="T:AutoFixture.Kernel.Criterion`1" />
            <seealso cref="T:AutoFixture.Kernel.ParameterTypeAndNameCriterion" />
            <seealso cref="T:AutoFixture.Kernel.PropertyTypeAndNameCriterion" />
        </member>
        <member name="M:AutoFixture.Kernel.FieldTypeAndNameCriterion.#ctor(System.IEquatable{System.Type},System.IEquatable{System.String})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.FieldTypeAndNameCriterion" /> class with the desired
            field type and name criteria.
            </summary>
            <param name="typeCriterion">
            The criterion indicating the desired field type.
            </param>
            <param name="nameCriterion">
            The criterion indicating the desired field name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typeCriterion" /> or
            <paramref name="nameCriterion" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.FieldTypeAndNameCriterion.Equals(System.Reflection.FieldInfo)">
            <summary>
            Compares a candidate <see cref="T:System.Reflection.FieldInfo" /> object against this
            <see cref="T:AutoFixture.Kernel.FieldTypeAndNameCriterion" />.
            </summary>
            <param name="other">
            The candidate to compare against this object.
            </param>
            <returns>
            <see langword="true" /> if <paramref name="other" /> is deemed
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            This method compares the candidate <paramref name="other" />
            against <see cref="P:AutoFixture.Kernel.FieldTypeAndNameCriterion.TypeCriterion" /> and
            <see cref="P:AutoFixture.Kernel.FieldTypeAndNameCriterion.NameCriterion" />. If the field's type matches the type
            criterion, and its name matches the name criterion, the return
            value is <see langword="true" />.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Kernel.FieldTypeAndNameCriterion.TypeCriterion">
            <summary>
            The type criterion originally passed in via the class' constructor.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.FieldTypeAndNameCriterion.NameCriterion">
            <summary>
            The name criterion originally passed in via the class' constructor.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FieldTypeAndNameCriterion.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to another object.
            </summary>
            <param name="obj">The object to compare to this object.</param>
            <returns>
            <see langword="true" /> if <paramref name="obj" /> is equal to this
            object; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.FieldTypeAndNameCriterion.GetHashCode">
            <summary>
            Returns the hash code for the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.FilteringSpecimenBuilder">
            <summary>
            Decorates an <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> and filters requests so that only some requests
            are passed through to the decorated builder.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FilteringSpecimenBuilder.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.FilteringSpecimenBuilder"/> class.
            </summary>
            <param name="builder">A specimen builder to decorate.</param>
            <param name="specification">
            A specification that determines whether <paramref name="builder"/> will receive the request.
            </param>
        </member>
        <member name="P:AutoFixture.Kernel.FilteringSpecimenBuilder.Builder">
            <summary>
            Gets the decorated builder.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.FilteringSpecimenBuilder.Specification">
            <summary>
            Gets the specification that determines whether <see cref="P:AutoFixture.Kernel.FilteringSpecimenBuilder.Builder"/> will be invoked or
            not.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FilteringSpecimenBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created by the decorated <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> if the filter allows
            the request through; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.FilteringSpecimenBuilder.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.FilteringSpecimenBuilder.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.FiniteSequenceRelay">
            <summary>
            Unwraps a request for many instances and returns the results as a true dynamic sequence.
            </summary>
            <seealso cref="T:AutoFixture.Kernel.StableFiniteSequenceRelay" />
        </member>
        <member name="M:AutoFixture.Kernel.FiniteSequenceRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates many specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            Many specimens if <paramref name="request"/> is a <see cref="T:AutoFixture.Kernel.FiniteSequenceRequest"/>
            instance; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The sequence returned is a true generator, so successive iterations will yield
            different sets of specimens. If this is not the desired behavior,
            <see cref="T:AutoFixture.Kernel.StableFiniteSequenceRelay" /> provides an alternative.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.FiniteSequenceRequest">
            <summary>
            Signals that many similar instances are requested.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FiniteSequenceRequest.#ctor(System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.FiniteSequenceRequest"/> class.
            </summary>
            <param name="request">The underlying request to multiply.</param>
            <param name="count">The number of instances requested.</param>
        </member>
        <member name="M:AutoFixture.Kernel.FiniteSequenceRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.FiniteSequenceRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.FiniteSequenceRequest.CreateRequests">
            <summary>
            Creates many requests from the underlying requests.
            </summary>
            <returns>A number of similar requests.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.FiniteSequenceRequest.Equals(AutoFixture.Kernel.FiniteSequenceRequest)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> represents the same request with the
            same requested count; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.FixedBuilder">
            <summary>
            A <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> that always returns the same specimen.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.FixedBuilder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.FixedBuilder"/> class.
            </summary>
            <param name="specimen">
            The specimen to return from the <see cref="M:AutoFixture.Kernel.FixedBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)"/> method.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.FixedBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Returns the same specimen every time.
            </summary>
            <param name="request">The request that describes what to create. Ignored.</param>
            <param name="context">
            A context that can be used to create other specimens. Ignored.
            </param>
            <returns>
            The specimen supplied to the instance in the constructor.
            </returns>
            <seealso cref="M:AutoFixture.Kernel.FixedBuilder.#ctor(System.Object)"/>
        </member>
        <member name="T:AutoFixture.Kernel.GenericMethod">
            <summary>
            Encapsulates a generic method, inferring the type parameters bases on invocation arguments.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.GenericMethod.#ctor(System.Reflection.MethodInfo,AutoFixture.Kernel.IMethodFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.GenericMethod"/> class.
            </summary>
            <param name="method">The method info.</param>
            <param name="factory">
            The factory to create an <see cref="T:AutoFixture.Kernel.IMethod" /> from the <see cref="T:System.Reflection.MethodInfo" />
            resolved by <see cref="T:AutoFixture.Kernel.GenericMethod" />.
            </param>
        </member>
        <member name="P:AutoFixture.Kernel.GenericMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.GenericMethod.Method">
            <summary>
            Gets information about the method.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.GenericMethod.Factory">
            <summary>
            Gets information about the factory to create <see cref="T:AutoFixture.Kernel.IMethod" /> from
            <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.GenericMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.GreedyConstructorQuery">
            <summary>
            Selects public constructors ordered by the most greedy constructor first.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.GreedyConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, ordered by the most greedy
            constructor first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned constructors is based on the number of parameters of the
            constructor. Constructors with more parameters are returned before constructors with
            fewer parameters. This means that if a default constructor exists, it will be the last
            one returned.
            </para>
            <para>
            In case of two constructors with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.HashSetSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.HashSetSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.HashSet`1" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.IllegalRequestException">
            <summary>
            Indicates that an illegal request was detected.
            </summary>
            <remarks>
            <para>
            Certain requests are considered illegal (such as <see cref="T:System.IntPtr"/>) because satisfying
            them can crash the process.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.IntPtrGuard"/>
        </member>
        <member name="M:AutoFixture.Kernel.IllegalRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.IllegalRequestException"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.IllegalRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.IllegalRequestException"/> class with an
            error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:AutoFixture.Kernel.IllegalRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.IllegalRequestException"/> class with an
            error message and an inner exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:AutoFixture.Kernel.IMethod">
            <summary>
            Represents some kind of method that can be invoked with a known set of parameters.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.IMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.IMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.IMethodFactory">
            <summary>
            Creates a new Method from a <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.IMethodFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates the method for the supplied methodInfo.
            </summary>
            <param name="methodInfo">The methodInfo.</param>
            <returns>Method for <paramref name="methodInfo"/>.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.IMethodQuery">
            <summary>
            Defines a strategy for selecting methods (such as constructors or factory methods) from a
            type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.IMethodQuery.SelectMethods(System.Type)">
            <summary>
            Selects the methods for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>Methods for <paramref name="type"/>.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.ImplementedInterfaceSpecification">
            <summary>
            A specification that determines whether the request is a request
            for a <see cref="T:System.Type"/> that implements the specified interface <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ImplementedInterfaceSpecification.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ImplementedInterfaceSpecification"/> class.
            </summary>
            <param name="targetType">
            The interface <see cref="T:System.Type"/> which
            the requested type should implement.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:AutoFixture.Kernel.ImplementedInterfaceSpecification.TargetType">
            <summary>
            The interface <see cref="T:System.Type"/> which
            the requested type should implement.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ImplementedInterfaceSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by the Specification;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.InstanceMethod">
            <summary>
            Encapsulates an instance method. This is essentially an Adapter over
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.InstanceMethod.#ctor(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.InstanceMethod"/> class.
            </summary>
            <param name="instanceMethod">The instance method.</param>
            <param name="owner">The owner.</param>
            <remarks>
            <para>
            The owner is expected to expose the method designated by
            <paramref name="instanceMethod" />. If not, the <see cref="M:AutoFixture.Kernel.InstanceMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})" /> method will fail.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.InstanceMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})" />
            <seealso cref="P:AutoFixture.Kernel.InstanceMethod.Method" />
            <seealso cref="P:AutoFixture.Kernel.InstanceMethod.Owner" />
        </member>
        <member name="P:AutoFixture.Kernel.InstanceMethod.Method">
            <summary>
            Gets the method originally supplied through the constructor.
            </summary>
            <seealso cref="M:AutoFixture.Kernel.InstanceMethod.#ctor(System.Reflection.MethodInfo,System.Object)" />
        </member>
        <member name="P:AutoFixture.Kernel.InstanceMethod.Owner">
            <summary>
            Gets the owner originally supplied through the constructor.
            </summary>
            <seealso cref="M:AutoFixture.Kernel.InstanceMethod.#ctor(System.Reflection.MethodInfo,System.Object)" />
        </member>
        <member name="M:AutoFixture.Kernel.InstanceMethod.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this
            instance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.InstanceMethod.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="P:AutoFixture.Kernel.InstanceMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.InstanceMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.InstanceMethod.Equals(AutoFixture.Kernel.InstanceMethod)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.IntPtrGuard">
            <summary>
            Guards against requests for <see cref="T:System.IntPtr"/> by throwing an exception.
            </summary>
            <remarks>
            <para>
            Some types (e.g. <see cref="T:System.Func`1"/>) have constructors that take an <see cref="T:System.IntPtr"/>
            instance that indicate the address of the code block to be executed. IntPtr in itself have
            several constructors, amongst a few that AutoFixture thinks it can resolve; e.g. the
            constructor that takes an <see cref="T:System.Int32"/> as input. This means that AutoFixture, unless
            prevented, will create IntPtr instances with completely invalid addresses such as 1 or 2.
            When code attempts to use these invalid IntPtr instances, the process crashes.
            </para>
            <para>
            To prevent the process from crashing, AutoFixture considers request for IntPtr instances
            illegal. This class implements that rule by throwing an exception if such a request is
            detected.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.IntPtrGuard.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Guards against requests for <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance, unless <paramref name="request"/> is a request for
            <see cref="T:System.IntPtr"/> in which case an exception is thrown.
            </returns>
            <exception cref="T:AutoFixture.Kernel.IllegalRequestException">
            <paramref name="request"/> is the <see cref="T:System.IntPtr"/> <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:AutoFixture.Kernel.InverseRequestSpecification">
            <summary>
            Decorates an <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> and returns the opposite result.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.InverseRequestSpecification.#ctor(AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.InverseRequestSpecification"/> by
            decorating the supplied specification.
            </summary>
            <param name="specification">
            The <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> to decorate.
            </param>
        </member>
        <member name="P:AutoFixture.Kernel.InverseRequestSpecification.Specification">
            <summary>
            Gets the decorated specification.
            </summary>
            <remarks>
            <para>
            This is the <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> that will be inverted.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.InverseRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Returns the opposite result as the decorated <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if the decorated <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> returns
            <see langword="false"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.IRecursionHandler">
            <summary>
            Handles a recursive request.
            </summary>
            <remarks>
            <para>
            When AutoFixture is asked to create instances of complex custom types,
            it uses Reflection to figure out which constructor arguments and
            property values to assign. If the custom types contains circular
            references, this will cause an infinite recursion. To prevent that,
            <see cref="T:AutoFixture.Kernel.RecursionGuard" /> monitors requests in order to detect this
            type of situation. If RecursionGuard detects this situation, it calls
            <see cref="M:AutoFixture.Kernel.IRecursionHandler.HandleRecursiveRequest(System.Object,System.Collections.Generic.IEnumerable{System.Object})" /> on a composed IRecursionHandler.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.IRecursionHandler.HandleRecursiveRequest(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Handles a recursive request.
            </summary>
            <param name="request">The request causing the recursion.</param>
            <param name="recordedRequests">
            Previously recorded, and yet unhandled, requests.
            </param>
            <returns>An object intended to break the recursion.</returns>
            <remarks>
            <para>
            This method is called when AutoFixture detects an infinite
            recursion. The <paramref name="request" /> is the request that
            triggered the recursion detection;
            <paramref name="recordedRequests" /> contains all previous, but
            still unhandled requests: the current call stack, if you will.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.IRequestSpecification">
            <summary>
            A Specification that evaluates requests.
            </summary>
            <remarks>
            <para>
            This is a codification of the Specification patter for requests. This interface can (and
            should) be used in any place where you need to filter requests for specimens.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.IRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by the Specification;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ISpecifiedSpecimenCommand`1">
            <summary>
            A Command that performs an action on a specimen and knows whether that action matches a
            given request.
            </summary>
            <typeparam name="T">The type of specimen on which the command acts.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.ISpecifiedSpecimenCommand`1.Execute(`0,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Executes the command on the supplied specimen.
            </summary>
            <param name="specimen">The specimen on which the command is executed.</param>
            <param name="context">
            An <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> that can be used to resolve other requests.
            </param>
        </member>
        <member name="T:AutoFixture.Kernel.ISpecimenBuilder">
            <summary>
            Builds, or partakes in building, anonymous variables (specimens).
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ISpecimenBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            <para>
            Note to implementers: Implementations are expected to return a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance if they can't satisfy the request.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.ISpecimenBuilderNode">
            <summary>
            A node in a graph of <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> instances.
            </summary>
            <remarks>
            <para>
            AutoFixture's kernel basically works as a 'Graph of Responsibility'.
            Each <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> gets a chance to handle a request,
            and if it can't do that, the next ISpecimenBuilder is asked to handle
            the request. When an ISpecimenBuilder instance returns a useful
            specimen, that instance is returned and the results (if any) from
            lower-priority ISpecimenBuilder instances are ignored.
            </para>
            <para>
            In theory, one could order all ISpecimenBuilder instances in a flat
            Chain of Responsibility, but instead, the ISpecimenBuilderNode
            interface defines the responsibilities of a 'parent' node in a deeper
            graph. Each ISpecimenBuilder node constitute an intermediate node in a
            graph, while itself being a parent to other nodes. In the degenerate
            case when an ISpecimenBuilderNode has no child nodes, it effectively
            becomes a leaf node. Otherwise, leaf nodes are typically
            ISpecimenBuilder instances.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.ISpecimenBuilderNode.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Composes the supplied builders.
            </summary>
            <param name="builders">The builders to compose.</param>
            <returns>A <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance.</returns>
            <remarks>
            <para>
            Note to implementers:
            </para>
            <para>
            The intent of this method is to compose the supplied
            <paramref name="builders" /> into a new instance of the type
            implementing <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" />. Thus, the
            concrete return type is expected to the same type as the type
            implementing the method. However, it is not considered a failure to
            deviate from this idiom - it would just not be a mainstream
            implementation.
            </para>
            <para>
            The returned instance is normally expected to contain the builders
            supplied as an argument, but again this is not strictly required.
            The implementation may decide to filter the sequence or add to it
            during composition.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.ISpecimenBuilderTransformation">
            <summary>
            Transforms <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instance into <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ISpecimenBuilderTransformation.Transform(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Transforms the supplied builder into another.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode"/> created from <paramref name="builder"/>.
            </returns>
            <remarks>
            <para>
            Note to implementers: In most scenarios, the transformation is expected to maintain
            behavior of <paramref name="builder"/>; usually by applying a Decorator.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.ISpecimenCommand">
            <summary>
            Represents a command which can be applied to a specimen.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ISpecimenCommand.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>Applies the command to the supplied specimen.</summary>
            <param name="specimen">
            A specimen upon which the command should be applied.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <remarks>
            <para>
            Implementations of this interface will often somehow mutate
            <paramref name="specimen" />, e.g. by assigning values to
            properties, alternatively pulling those values from
            <paramref name="context" />. Another option is that the the
            implementation changes the state of command itself. No matter the
            details, since this is a Command, it can be expected to mutate
            state somewhere.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.ISpecimenContext">
            <summary>
            A context used to create anonymous variables (specimens).
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ISpecimenContext.Resolve(System.Object)">
            <summary>
            Creates an anonymous variable (specimen) based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <returns>The requested specimen if possible.</returns>
            <remarks>
            <para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.ListFavoringConstructorQuery">
            <summary>
            Selects public constructors ordered so that any constructor with arguments matching
            <see cref="T:System.Collections.Generic.IList`1"/> are selected before any other public constructor.
            </summary>
            <remarks>
            The main target of this <see cref="T:AutoFixture.Kernel.IMethodQuery" /> implementation is to pick
            <see cref="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})" /> before any other
            constructor. This can be used to populate a Collection instance with a list of items.
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.ListFavoringConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, giving priority to any constructor
            with one or more <see cref="T:System.Collections.Generic.IList`1"/> arguments.
            </returns>
            <remarks>
            <para>
            Given several constructors, this implementation will favor those constructors with
            arguments that matches <see cref="T:System.Collections.Generic.IList`1"/>, where T is the item type of
            <paramref name="type"/>, if it's generic. Constructors with most matching arguments are
            returned before constructors with less matching arguments.
            </para>
            <para>
            Any other constructors are returned with the most modest constructors first.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.ListFavoringConstructorQuery" />
        </member>
        <member name="T:AutoFixture.Kernel.ListRelay">
            <summary>
            Relays a request for an <see cref="T:System.Collections.Generic.IList`1" /> to a request for a
            <see cref="T:System.Collections.Generic.List`1"/> and returns the result.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ListRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A populated <see cref="T:System.Collections.Generic.IList`1"/> of the appropriate item type if possible; otherwise
            a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an <see cref="T:System.Collections.Generic.IList`1"/> and
            <paramref name="context"/> can satisfy a request for a populated specimen of that type,
            this value will be returned. If not, the return value is a <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.ListSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ListSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.List`1" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.MemberInfoEqualityComparer">
            <summary>
            Provides custom equality comparison for <see cref="T:System.Reflection.MemberInfo"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MemberInfoEqualityComparer.Equals(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first <see cref="T:System.Reflection.MemberInfo"/> instance to compare.</param>
            <param name="y">The second <see cref="T:System.Reflection.MemberInfo"/> instance to compare.</param>
            <returns>
            <see langword="true"/> if the specified objects are considered equal; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            <paramref name="x"/> and <paramref name="y"/> are considered equal if x is exactly
            equal to y. If not, they are still considered equal if both instances'
            <see cref="P:System.Reflection.MemberInfo.DeclaringType"/> and <see cref="P:System.Reflection.MemberInfo.Name"/> properties are
            equal.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.MemberInfoEqualityComparer.GetHashCode(System.Reflection.MemberInfo)">
            <summary>
            Returns a hash code for a <see cref="T:System.Reflection.MemberInfo"/> instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for the supplied instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is
            null.
            </exception>
        </member>
        <member name="T:AutoFixture.Kernel.MethodInvoker">
            <summary>
            Creates a new instance of the requested type by invoking the first method it can
            satisfy.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MethodInvoker.#ctor(AutoFixture.Kernel.IMethodQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.MethodInvoker"/> class with the supplied
            <see cref="T:AutoFixture.Kernel.IMethodQuery" />.
            </summary>
            <param name="query">
            The <see cref="T:AutoFixture.Kernel.IMethodQuery"/> that defines which methods are attempted.
            </param>
        </member>
        <member name="P:AutoFixture.Kernel.MethodInvoker.Query">
            <summary>
            Gets the <see cref="T:AutoFixture.Kernel.IMethodQuery"/> that defines which constructors will be
            attempted.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MethodInvoker.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen of the requested type by invoking the first constructor or method it
            can satisfy.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen generated from a method of the requested type, if possible;
            otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            This method uses the first constructor or method returned by <see cref="P:AutoFixture.Kernel.MethodInvoker.Query"/> where
            <paramref name="context"/> can create values for all parameters.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.MissingParametersSupplyingMethod">
            <summary>
            Decorates another method invoking it supplying missing parameters.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MissingParametersSupplyingMethod.#ctor(AutoFixture.Kernel.IMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.MissingParametersSupplyingMethod"/> class.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.MissingParametersSupplyingMethod.Method">
            <summary>
            Gets the decorated method.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.MissingParametersSupplyingMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MissingParametersSupplyingMethod.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Kernel.MissingParametersSupplyingMethod.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Kernel.MissingParametersSupplyingMethod.Equals(AutoFixture.Kernel.MissingParametersSupplyingMethod)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Kernel.MissingParametersSupplyingMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.MissingParametersSupplyingMethodFactory">
            <summary>
            Creates a new <see cref="T:AutoFixture.Kernel.MissingParametersSupplyingMethod" /> for an
            instance <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MissingParametersSupplyingMethodFactory.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.MissingParametersSupplyingMethodFactory"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:AutoFixture.Kernel.MissingParametersSupplyingMethodFactory.Owner">
            <summary>
            Gets the owner originally supplied through the constructor.
            </summary>
            <seealso cref="M:AutoFixture.Kernel.MissingParametersSupplyingMethodFactory.#ctor(System.Object)" />
        </member>
        <member name="M:AutoFixture.Kernel.MissingParametersSupplyingMethodFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates a <see cref="T:AutoFixture.Kernel.InstanceMethod" /> decorated with
            <see cref="T:AutoFixture.Kernel.MissingParametersSupplyingMethod" /> for the supplied methodInfo.
            </summary>
            <param name="methodInfo">The methodInfo.</param>
            <returns>Method for <paramref name="methodInfo"/>.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.MissingParametersSupplyingStaticMethodFactory">
            <summary>
            Creates a new <see cref="T:AutoFixture.Kernel.MissingParametersSupplyingMethod" /> for a static
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MissingParametersSupplyingStaticMethodFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates a <see cref="T:AutoFixture.Kernel.StaticMethod" /> decorated with
            <see cref="T:AutoFixture.Kernel.MissingParametersSupplyingMethod" /> for the supplied methodInfo.
            </summary>
            <param name="methodInfo">The methodInfo.</param>
            <returns>Method for <paramref name="methodInfo"/>.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.ModestConstructorQuery">
            <summary>
            Selects public constructors ordered by the most modest constructor first.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ModestConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, ordered by the most modest
            constructor first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned constructors is based on the number of parameters of the
            constructor. Constructors with fewer parameters are returned before constructors with
            more parameters. This means that if a default constructor exists, it will be the first
            one returned.
            </para>
            <para>
            In case of two constructors with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.MultidimensionalArrayRelay">
            <summary>
            Relays a request for a multidimensional array to a jagged array and converts the result
            to the desired multidimensional array type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MultidimensionalArrayRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new multidimensional array based on a request.
            </summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            A multidimensional array of the requested type if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen" /> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.MultipleRelay">
            <summary>
            Relays requests for multiple (an unspecified count) specimens to a request for a specific
            number of specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MultipleRelay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.MultipleRelay"/> class.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.MultipleRelay.Count">
            <summary>
            Gets or sets the count that specifies how many specimens will be requested.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MultipleRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates many new specimens based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimens if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The number of specimens requested is determined by <see cref="P:AutoFixture.Kernel.MultipleRelay.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.MultipleRequest">
            <summary>
            Represents a request for many (an unspecified number) of specimens.
            </summary>
            <remarks>
            <para>
            The difference between <see cref="T:AutoFixture.Kernel.MultipleRequest"/> and
            <see cref="T:AutoFixture.Kernel.FiniteSequenceRequest"/> is that the latter specifies the number of specimens
            requested.
            </para>
            <para>
            <see cref="T:AutoFixture.Kernel.MultipleRelay"/> translates <see cref="T:AutoFixture.Kernel.MultipleRequest"/> instances to
            <see cref="T:AutoFixture.Kernel.FiniteSequenceRequest"/> instances.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.FiniteSequenceRequest"/>
            <seealso cref="T:AutoFixture.Kernel.MultipleRelay"/>
        </member>
        <member name="M:AutoFixture.Kernel.MultipleRequest.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.MultipleRequest"/> class.
            </summary>
            <param name="request">A single request which will be multiplied.</param>
        </member>
        <member name="P:AutoFixture.Kernel.MultipleRequest.Request">
            <summary>
            Gets the request to multiply.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.MultipleRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:AutoFixture.Kernel.MultipleRequest"/>
            instance which is equal to this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.MultipleRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.MultipleRequest.Equals(AutoFixture.Kernel.MultipleRequest)">
            <summary>
            Indicates whether the current <see cref="T:AutoFixture.Kernel.MultipleRequest"/> is equal to another
            MultipleRequest instance.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current <see cref="T:AutoFixture.Kernel.MultipleRequest"/> is equal to the
            <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.MultipleToEnumerableRelay">
            <summary>
            Relays a <see cref="T:AutoFixture.Kernel.MultipleRequest" /> to a request for
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <seealso cref="M:AutoFixture.Kernel.MultipleToEnumerableRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)" />
            <seealso cref="T:AutoFixture.MapCreateManyToEnumerable" />
        </member>
        <member name="M:AutoFixture.Kernel.MultipleToEnumerableRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            The requested specimen if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen" /> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            context is null.
            </exception>
            <remarks>
            <para>
            The <paramref name="request" /> can be any object, but will often
            be a <see cref="T:System.Type" /> or other
            <see cref="T:System.Reflection.MemberInfo" /> instances. This
            particular implementation only handles
            <see cref="T:AutoFixture.Kernel.MultipleRequest" /> instances.
            <see cref="P:AutoFixture.Kernel.MultipleRequest.Request" /> must either be a Type
            instance, or a <see cref="T:AutoFixture.Kernel.SeededRequest" /> with a Type as its
            <see cref="P:AutoFixture.Kernel.SeededRequest.Request" />. If the request doesn't
            satisfy these conditions, a <see cref="T:AutoFixture.Kernel.NoSpecimen" /> instance is
            returned.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.MutableValueTypeWarningThrower">
            <summary>
            Throws an <see cref="T:AutoFixture.ObjectCreationException"/> when one tries to create Structure without explicit parametrized constructor.
            Possibly notifying about bad design (mutable value type).
            </summary>
            <remarks>
            <para>
            This <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> can be used with proper filtering <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> to throw exceptions only on
            structures without constructors. Will throw an exception instead of letting the
            containing builder return a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance when it can't satisfy a
            request or generic exception being thrown.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.MutableValueTypeWarningThrower.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Throws an <see cref="T:AutoFixture.ObjectCreationException"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">
            A context that can be used to create other specimens. Not used.
            </param>
            <returns>
            This method never returns. It always throws an <see cref="T:AutoFixture.ObjectCreationException"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.NoConstructorsSpecification">
            <summary>
            A specification that evaluates whether a request is a request for a type without public constructors.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.NoConstructorsSpecification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.NoConstructorsSpecification"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.NoConstructorsSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Type"/> that represents a type without public constructors;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.NoSpecimen">
            <summary>
            Signifies that it's not a specimen.
            </summary>
            <remarks>
            <para>
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> implementations are expected to return
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instances if they can't handle the request. This ensures that
            <see langword="null"/> can be used as a proper return value.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.NoSpecimen"/> class with a null request.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimen.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.NoSpecimen"/> class with the supplied
            request.
            </summary>
            <param name="request">
            The original request that prompts the creation of this instance.
            </param>
        </member>
        <member name="P:AutoFixture.Kernel.NoSpecimen.Request">
            <summary>
            Gets the original request that prompted the creation of the current instance.
            </summary>
            <remarks>
            <para>
            This property value may be <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimen.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare to the current instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimen.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:AutoFixture.Kernel.NoSpecimen"/> class.
            </summary>
            <returns>A hash code for the current <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimen.Equals(AutoFixture.Kernel.NoSpecimen)">
            <summary>
            Indicates whether the current instance is equal to another <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </summary>
            <param name="other">
            A <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if the current instance is equal to the <paramref name="other"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.NoSpecimenOutputGuard">
            <summary>
            Prevents a decorated <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> from returning a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.NoSpecimenOutputGuard"/> class with an
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.
            </summary>
            <param name="builder">The builder to decorate.</param>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.NoSpecimenOutputGuard"/> class with an
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate and an <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>
            that is used to determine whether an exception should be thrown based on the request.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <param name="specification">The specification.</param>
        </member>
        <member name="P:AutoFixture.Kernel.NoSpecimenOutputGuard.Builder">
            <summary>
            Gets the decorated builder.
            </summary>
            <value>The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> supplied via the constructor.</value>
            <seealso cref="M:AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder)"/>
            <seealso cref="M:AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.IRequestSpecification)"/>
        </member>
        <member name="P:AutoFixture.Kernel.NoSpecimenOutputGuard.Specification">
            <summary>
            Gets the specification that is used to determine whether an exception should be thrown
            for a request that returns a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </summary>
            <value>The <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> supplied via the constructor.</value>
            <seealso cref="M:AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder)"/>
            <seealso cref="M:AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.IRequestSpecification)"/>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimenOutputGuard.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen by delegating to the decorated <see cref="P:AutoFixture.Kernel.NoSpecimenOutputGuard.Builder"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise an exception is thrown or a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance is returned.
            </returns>
            <exception cref="T:AutoFixture.ObjectCreationException">
            The decorated <see cref="P:AutoFixture.Kernel.NoSpecimenOutputGuard.Builder"/> returned a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> result and
            <see cref="P:AutoFixture.Kernel.NoSpecimenOutputGuard.Specification"/> returned <see langword="true"/> for
            <paramref name="request"/>.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimenOutputGuard.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.NoSpecimenOutputGuard.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.NullableEnumRequestSpecification">
            <summary>
            A specification that evaluates whether a request is a request for a nullable enum.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.NullableEnumRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a nullable enum;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.NullRecursionGuard">
            <summary>
            Recursion handler that returns null at recursion points.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.NullRecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.NullRecursionGuard"/> class.
            </summary>
            <param name="builder">The builder to decorate.</param>
        </member>
        <member name="M:AutoFixture.Kernel.NullRecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.NullRecursionGuard"/> class.
            </summary>
            <param name="builder">The intercepting builder to decorate.</param>
            <param name="comparer">An IEqualitycomparer implementation to use when comparing requests to determine recursion.</param>
        </member>
        <member name="M:AutoFixture.Kernel.NullRecursionGuard.HandleRecursiveRequest(System.Object)">
            <summary>
            Handles a request that would cause recursion by returning null.
            </summary>
            <param name="request">The recursion causing request.</param>
            <returns>Always null.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.NullRecursionGuard.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.NullRecursionHandler">
            <summary>
            Breaks a recursion by returning <see langword="null" />.
            </summary>
            <remarks>
            <para>
            Some type designs contain circular references, for example in the form
            of parent/child relationships. Often the circular reference design
            involves a mutable property where a client can assign a parent to a
            child, or vice versa. Such a property may accept
            <see langword="null" /> as input, effectively breaking the circular
            reference. As an example, setting a Parent property to
            <see langword="null" /> may indicate that the instance represents a
            root node.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.NullRecursionHandler.HandleRecursiveRequest(System.Object,System.Collections.Generic.IEnumerable{System.Object})" />
        </member>
        <member name="M:AutoFixture.Kernel.NullRecursionHandler.HandleRecursiveRequest(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Handles a recursive request by returning <see langword="null" />.
            </summary>
            <param name="request">The request causing the recursion.</param>
            <param name="recordedRequests">
            Previously recorded, and yet unhandled, requests.
            </param>
            <returns>
            <see langword="null" />.
            </returns>
            <remarks>
            <para>
            This method is called when AutoFixture detects an infinite
            recursion. The <paramref name="request" /> is the request that
            triggered the recursion detection;
            <paramref name="recordedRequests" /> contains all previous, but
            still unhandled requests: the current call stack, if you will.
            </para>
            <para>
            This implementation breaks the recursion by returning null. This is
            not always the appropriate response, because the property or method
            argument requested may contain a Guard Clause preventing null from
            being accepted. However, if the member in question accepts null as
            valid input, returning null to break the recursion may be an
            appropriate response.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.NullRecursionHandler" />
        </member>
        <member name="T:AutoFixture.Kernel.ObservableCollectionSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ObservableCollectionSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ObsoletedMemberShims">
            <summary>
            A container for the strongly obsoleted member shims.
            </summary>
            <remarks>
            You can use the "hard" obsoleted members from the "soft" obsoleted members.
            Use this trick to allow non-obsoleted the code use the totally obsoleted members for compatibility.
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.OmitArrayParameterRequestRelay">
            <summary>
            Relays requests for array parameters, and returns an empty array if the
            object returned from the context is an <see cref="T:AutoFixture.Kernel.OmitSpecimen" />
            instance.
            </summary>
            <remarks>
            <para>
            The <strong>OmitArrayParameterRequestRelay</strong> class works like
            <see cref="T:AutoFixture.Kernel.ParameterRequestRelay" />, except that it only handles
            <see cref="T:System.Reflection.ParameterInfo" /> instances where
            <see cref="P:System.Reflection.ParameterInfo.ParameterType" /> is and array. If the value
            returned from the context is an <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance,
            it returns an empty array.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.OmitArrayParameterRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)" />
            <seealso cref="T:AutoFixture.Kernel.ParameterRequestRelay" />
            <seealso cref="T:AutoFixture.Kernel.OmitEnumerableParameterRequestRelay" />
            <seealso cref="T:AutoFixture.Kernel.OmitSpecimen" />
        </member>
        <member name="M:AutoFixture.Kernel.OmitArrayParameterRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen based on a requested array parameter.
            </summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            A specimen created from a <see cref="T:AutoFixture.Kernel.SeededRequest"/> encapsulating
            the parameter type and name of the requested parameter, if
            possible; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen" />.
            </returns>
            <remarks>
            <para>
            This method only handles <see cref="T:System.Reflection.ParameterInfo" /> instances
            where <see cref="P:System.Reflection.ParameterInfo.ParameterType" /> is an array.  If
            <paramref name="context" /> returns an <see cref="T:AutoFixture.Kernel.OmitSpecimen" />
            instance, an empty array of the correct type is returned instead.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:AutoFixture.Kernel.OmitEnumerableParameterRequestRelay">
            <summary>
            Relays requests for enumerable parameters, and returns an empty array
            if the object returned from the context is an <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance.
            </summary>
            <remarks>
            <para>
            The <strong>OmitEnumerableParameterRequestRelay</strong> class works
            like <see cref="T:AutoFixture.Kernel.ParameterRequestRelay" />, except that it only handles
            <see cref="T:System.Reflection.ParameterInfo" /> instances where
            <see cref="P:System.Reflection.ParameterInfo.ParameterType" /> is
            <see cref="T:System.Collections.Generic.IEnumerable`1" />. If the value returned from the context
            is an <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance, it returns an empty array.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.OmitEnumerableParameterRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)" />
            <seealso cref="T:AutoFixture.Kernel.ParameterRequestRelay" />
            <seealso cref="T:AutoFixture.Kernel.OmitArrayParameterRequestRelay" />
            <seealso cref="T:AutoFixture.Kernel.OmitSpecimen" />
        </member>
        <member name="M:AutoFixture.Kernel.OmitEnumerableParameterRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen based on a requested enumerable parameter.
            </summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            A specimen created from a <see cref="T:AutoFixture.Kernel.SeededRequest"/> encapsulating
            the parameter type and name of the requested parameter, if
            possible; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen" />.
            </returns>
            <remarks>
            <para>
            This method only handles <see cref="T:System.Reflection.ParameterInfo" /> instances
            where <see cref="P:System.Reflection.ParameterInfo.ParameterType" /> is
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.  If <paramref name="context" />
            returns an <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance, an empty array of
            the correct type is returned instead.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:AutoFixture.Kernel.OmitOnRecursionGuard">
            <summary>
            Recursion handler that returns <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> at recursion
            points.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.OmitOnRecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.OmitOnRecursionGuard" /> class.
            </summary>
            <param name="builder">The builder to decorate.</param>
        </member>
        <member name="M:AutoFixture.Kernel.OmitOnRecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.OmitOnRecursionGuard" /> class.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <param name="comparer">
            An <see cref="T:System.Collections.IEqualityComparer" /> implementation to use when
            comparing requests to determine recursion.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.OmitOnRecursionGuard.HandleRecursiveRequest(System.Object)">
            <summary>
            Handles a request that would cause recursion.
            </summary>
            <param name="request">The recursion-causing request.</param>
            <returns>
            An <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.OmitOnRecursionGuard.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.OmitOnRecursionHandler">
            <summary>
            Breaks a recursion by instructing AutoFixture to ignore the current
            request.
            </summary>
            <seealso cref="M:AutoFixture.Kernel.OmitOnRecursionHandler.HandleRecursiveRequest(System.Object,System.Collections.Generic.IEnumerable{System.Object})" />
        </member>
        <member name="M:AutoFixture.Kernel.OmitOnRecursionHandler.HandleRecursiveRequest(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Handles a recursive request by instructing AutoFixture to ignore
            <paramref name="request" />.
            </summary>
            <param name="request">The request causing the recursion.</param>
            <param name="recordedRequests">
            Previously recorded, and yet unhandled, requests.
            </param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance.
            </returns>
            <remarks>
            <para>
            This method is called when AutoFixture detects an infinite
            recursion. The <paramref name="request" /> is the request that
            triggered the recursion detection;
            <paramref name="recordedRequests" /> contains all previous, but
            still unhandled requests: the current call stack, if you will.
            </para>
            <para>
            This implementation instructs AutoFixture to ignore the request by
            returning an <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.OmitSpecimen">
            <summary>
            A signal type used to indicate to the Auto-Property feature that a given request should be
            ignored, and no further processing performed.
            </summary>
            <remarks>
            <para>
            This signal type is different from <see cref="T:AutoFixture.Kernel.NoSpecimen" /> in that it stops further
            processing. Where NoSpecimen is simply an indication that a particular
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> can't provide a value for a request, an OmitSpecimen
            instance explicitly indicates that no value will be provided for a request - not even
            <see langword="null" />.
            </para>
            <para>
            The OmitSpecimen type is explicitly understood by <see cref="T:AutoFixture.Kernel.AutoPropertiesCommand" />,
            but can be returned by any ISpecimenBuilder.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.OmitSpecimen.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this
            instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object" /> to compare with this instance.
            </param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object" /> is an instance of
            <see cref="T:AutoFixture.Kernel.OmitSpecimen" />; otherwise, <see langword="false"/>.
            </returns>
            <seealso cref="M:AutoFixture.Kernel.OmitSpecimen.Equals(AutoFixture.Kernel.OmitSpecimen)" />
        </member>
        <member name="M:AutoFixture.Kernel.OmitSpecimen.Equals(AutoFixture.Kernel.OmitSpecimen)">
            <summary>
            Determines whether the specified <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance is equal to the
            current instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns>
            <see langword="true" /> if <paramref name="other" /> is not <see langword="null" />;
            otherwise <see langword="false" />.
            </returns>
            <remarks>
            <para>
            It may seem a little strange that any <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance is equal to
            any other instance of that type, but the class is a pure signal type that carries no
            state, so there's no reason to distinguish between instances. In essence, it could just
            as well have been modeled as a Singleton, but wasn't because it seems to bring no
            particular extra benefit.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.OmitSpecimen.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.Omitter">
            <summary>
            Issues <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instances if its encapsulated
            <see cref="T:AutoFixture.Kernel.IRequestSpecification" /> is satisfied.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.Omitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Omitter" /> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.Omitter.#ctor(AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Omitter" /> class with
            the supplied <see cref="T:AutoFixture.Kernel.IRequestSpecification" />.
            </summary>
            <param name="specification">
            A specification used to control whether or not an
            <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance should be issued.
            </param>
            <exception cref="T:System.ArgumentNullException">
            specification.
            </exception>
            <seealso cref="P:AutoFixture.Kernel.Omitter.Specification" />
        </member>
        <member name="M:AutoFixture.Kernel.Omitter.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            An <see cref="T:AutoFixture.Kernel.OmitSpecimen"/> instance if
            <see cref="P:AutoFixture.Kernel.Omitter.Specification" /> allows it; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen" /> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">request.</exception>
            <remarks>
              <para>
            The <paramref name="request" /> can be any object, but will often be a
              <see cref="T:System.Type" /> or other <see cref="T:System.Reflection.MemberInfo" /> instances.
              </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Kernel.Omitter.Specification">
            <summary>
            Gets the specification used to control whether an
            <see cref="T:AutoFixture.Kernel.OmitSpecimen" /> instance should be issued upon request.
            </summary>
            <remarks>
            <para>
            If the constructor overload that takes an
            <see cref="T:AutoFixture.Kernel.IRequestSpecification" /> as input was used, this
            property returns that instance.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.Omitter.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)" />
            <seealso cref="M:AutoFixture.Kernel.Omitter.#ctor(AutoFixture.Kernel.IRequestSpecification)" />
        </member>
        <member name="T:AutoFixture.Kernel.OrRequestSpecification">
            <summary>
            A boolean 'Or' Composite <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.OrRequestSpecification.#ctor(AutoFixture.Kernel.IRequestSpecification[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.OrRequestSpecification"/> class with the
            supplied specifications.
            </summary>
            <param name="specifications">An array of <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.</param>
        </member>
        <member name="M:AutoFixture.Kernel.OrRequestSpecification.#ctor(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.IRequestSpecification})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.OrRequestSpecification"/> class with the
            supplied specifications.
            </summary>
            <param name="specifications">A sequence of <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.</param>
        </member>
        <member name="P:AutoFixture.Kernel.OrRequestSpecification.Specifications">
            <summary>
            Gets the decorated specifications.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.OrRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by any of the
            <see cref="P:AutoFixture.Kernel.OrRequestSpecification.Specifications"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ParameterRequestRelay">
            <summary>
            Relays a request for a parameter to a <see cref="T:AutoFixture.Kernel.SeededRequest"/> with a seed based
            on the parameter's name.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ParameterRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen based on a requested parameter.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:AutoFixture.Kernel.SeededRequest"/> encapsulating the parameter type
            and name of the requested parameter, if possible; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ParameterSpecification">
            <summary>
            A specification that determines whether the request is a request
            for a <see cref="T:System.Reflection.ParameterInfo"/> matching the specified name and <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ParameterSpecification.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ParameterSpecification"/> class.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> with which the requested
            <see cref="T:System.Reflection.ParameterInfo"/> type should be compatible.
            </param>
            <param name="targetName">
            The name which the requested <see cref="T:System.Reflection.ParameterInfo"/> name
            should match exactly.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetType"/> or
            <paramref name="targetName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.ParameterSpecification.#ctor(System.IEquatable{System.Reflection.ParameterInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ParameterSpecification"/> class.
            </summary>
            <param name="target">
            The criteria used to match the requested
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:AutoFixture.Kernel.ParameterSpecification.TargetType">
            <summary>
            The <see cref="T:System.Type"/> with which the requested
            <see cref="T:System.Reflection.ParameterInfo"/> type should be compatible.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.ParameterSpecification.TargetName">
            <summary>
            The name which the requested <see cref="T:System.Reflection.ParameterInfo"/> name
            should match exactly.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ParameterSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by the Specification;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ParameterTypeAndNameCriterion">
            <summary>
            Represents a criterion for comparing a candidate parameter against a
            desired type and name.
            </summary>
            <remarks>
            <para>
            Sometimes, you may need to evaluate various candidate
            <seealso cref="T:System.Reflection.ParameterInfo" /> values, looking for one that has a
            desired parameter type and name. This class represents such an
            evaluation criterion.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.ParameterTypeAndNameCriterion.Equals(System.Reflection.ParameterInfo)" />
            <seealso cref="T:AutoFixture.Kernel.Criterion`1" />
            <seealso cref="T:AutoFixture.Kernel.FieldTypeAndNameCriterion" />
            <seealso cref="T:AutoFixture.Kernel.PropertyTypeAndNameCriterion" />
        </member>
        <member name="M:AutoFixture.Kernel.ParameterTypeAndNameCriterion.#ctor(System.IEquatable{System.Type},System.IEquatable{System.String})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.ParameterTypeAndNameCriterion" /> class with the desired
            field type and name criteria.
            </summary>
            <param name="typeCriterion">
            The criterion indicating the desired field type.
            </param>
            <param name="nameCriterion">
            The criterion indicating the desired field name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typeCriterion" /> or
            <paramref name="nameCriterion" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.ParameterTypeAndNameCriterion.Equals(System.Reflection.ParameterInfo)">
            <summary>
            Compares a candidate <see cref="T:System.Reflection.ParameterInfo" /> object against
            this <see cref="T:AutoFixture.Kernel.ParameterTypeAndNameCriterion" />.
            </summary>
            <param name="other">
            The candidate to compare against this object.
            </param>
            <returns>
            <see langword="true" /> if <paramref name="other" /> is deemed
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            This method compares the candidate <paramref name="other" />
            against <see cref="P:AutoFixture.Kernel.ParameterTypeAndNameCriterion.TypeCriterion" /> and
            <see cref="P:AutoFixture.Kernel.ParameterTypeAndNameCriterion.NameCriterion" />. If the parameter's type matches the
            type criterion, and its name matches the name criterion, the return
            value is <see langword="true" />.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Kernel.ParameterTypeAndNameCriterion.TypeCriterion">
            <summary>
            The type criterion originally passed in via the class' constructor.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.ParameterTypeAndNameCriterion.NameCriterion">
            <summary>
            The name criterion originally passed in via the class' constructor.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ParameterTypeAndNameCriterion.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to another object.
            </summary>
            <param name="obj">The object to compare to this object.</param>
            <returns>
            <see langword="true" /> if <paramref name="obj" /> is equal to this
            object; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.ParameterTypeAndNameCriterion.GetHashCode">
            <summary>
            Returns the hash code for the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.Postprocessor">
            <summary>
            Performs post-processing on a created specimen.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor"/> class with the supplied
            parameters.
            </summary>
            <param name="builder">The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Action{System.Object,AutoFixture.Kernel.ISpecimenContext})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor"/> class with the supplied
            parameters.
            </summary>
            <param name="builder">The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Action{System.Object,AutoFixture.Kernel.ISpecimenContext},AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor"/> class with the supplied
            parameters.
            </summary>
            <param name="builder">The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
            <param name="specification">
            A specification which is used to determine whether postprocessing should be performed
            for a request.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.ISpecimenCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor" />
            class.
            </summary>
            <param name="builder">
            The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.
            </param>
            <param name="command">
            The command to apply to the created specimen.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.ISpecimenCommand,AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor" />
            class.
            </summary>
            <param name="builder">
            The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.
            </param>
            <param name="command">
            The command to apply to the created specimen.
            </param>
            A specification which is used to determine whether postprocessing
            should be performed
            <param name="specification">
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.Postprocessor`1">
            <summary>
            Performs post-processing on a created specimen.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor`1"/> class with the
            supplied parameters.
            </summary>
            <param name="builder">The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Action{`0,AutoFixture.Kernel.ISpecimenContext})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor`1"/> class with the
            supplied parameters.
            </summary>
            <param name="builder">The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.ISpecimenCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor`1" />
            class.
            </summary>
            <param name="builder">
            The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.
            </param>
            <param name="command">
            The command to apply to the created specimen.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Action{`0,AutoFixture.Kernel.ISpecimenContext},AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor`1"/> class with the
            supplied parameters.
            </summary>
            <param name="builder">The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
            <param name="specification">
            A specification which is used to determine whether postprocessing should be performed
            for a request.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor`1.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.ISpecimenCommand,AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.Postprocessor`1" />
            class.
            </summary>
            <param name="builder">
            The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.
            </param>
            <param name="command">
            The command to apply to the created specimen.
            </param>
            <param name="specification">
            A specification which is used to determine whether postprocessing
            should be performed for a request.
            </param>
            <exception cref="T:System.ArgumentNullException">
            builder, command, or specification is null.
            </exception>
        </member>
        <member name="P:AutoFixture.Kernel.Postprocessor`1.Action">
            <summary>
            Gets the action to perform on created specimens.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.Postprocessor`1.Command">
            <summary>
            Gets the command, which is applied during postprocessing.
            </summary>
            <value>The command supplied via one of the constructors.</value>
        </member>
        <member name="P:AutoFixture.Kernel.Postprocessor`1.Builder">
            <summary>
            Gets the decorated builder.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.Postprocessor`1.Specification">
            <summary>
            Gets the filter that determines whether <see cref="P:AutoFixture.Kernel.Postprocessor`1.Command"/> should be executed.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor`1.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request and performs an action on the created
            specimen.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor`1.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.Postprocessor`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.PreserveInRequestPathAttribute">
            <summary>
            A marker to indicate that request of this type should not be skipped in the request path.
            </summary>
        </member>
        <member name="T:AutoFixture.Kernel.PropertyRequestRelay">
            <summary>
            Relays a request for a property to a <see cref="T:AutoFixture.Kernel.SeededRequest"/> with a seed based
            on the property's name.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.PropertyRequestRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen based on a requested property.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:AutoFixture.Kernel.SeededRequest"/> encapsulating the property type
            and name of the requested property, if possible; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.PropertySpecification">
            <summary>
            A specification that determines whether the request is a request
            for a <see cref="T:System.Reflection.PropertyInfo"/> matching a particular property,
            according to the supplied comparison rules.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.PropertySpecification.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.PropertySpecification"/> class.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> with which the requested
            <see cref="T:System.Reflection.PropertyInfo"/> type should be compatible.
            </param>
            <param name="targetName">
            The name which the requested <see cref="T:System.Reflection.PropertyInfo"/> name
            should match exactly.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetType"/> or
            <paramref name="targetName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.PropertySpecification.#ctor(System.IEquatable{System.Reflection.PropertyInfo})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.PropertySpecification"/> class.
            </summary>
            <param name="target">
            The criterion used to match the requested
            <see cref="T:System.Reflection.PropertyInfo"/> with the specified value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:AutoFixture.Kernel.PropertySpecification.TargetType">
            <summary>
            The <see cref="T:System.Type"/> with which the requested
            <see cref="T:System.Reflection.PropertyInfo"/> type should be compatible.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.PropertySpecification.TargetName">
            <summary>
            The name which the requested <see cref="T:System.Reflection.PropertyInfo"/> name
            should match exactly.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.PropertySpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by the Specification;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.PropertyTypeAndNameCriterion">
            <summary>
            Represents a criterion for comparing a candidate property against a
            desired type and name.
            </summary>
            <remarks>
            <para>
            Sometimes, you may need to evaluate various candidate
            <seealso cref="T:System.Reflection.PropertyInfo" /> values, looking for one that has a
            desired property type and name. This class represents such an
            evaluation criterion.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.PropertyTypeAndNameCriterion.Equals(System.Reflection.PropertyInfo)" />
            <seealso cref="T:AutoFixture.Kernel.Criterion`1" />
            <seealso cref="T:AutoFixture.Kernel.ParameterTypeAndNameCriterion" />
            <seealso cref="T:AutoFixture.Kernel.FieldTypeAndNameCriterion" />
        </member>
        <member name="M:AutoFixture.Kernel.PropertyTypeAndNameCriterion.#ctor(System.IEquatable{System.Type},System.IEquatable{System.String})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.PropertyTypeAndNameCriterion" /> class with the desired
            field type and name criteria.
            </summary>
            <param name="typeCriterion">
            The criterion indicating the desired field type.
            </param>
            <param name="nameCriterion">
            The criterion indicating the desired field name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typeCriterion" /> or
            <paramref name="nameCriterion" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:AutoFixture.Kernel.PropertyTypeAndNameCriterion.Equals(System.Reflection.PropertyInfo)">
            <summary>
            Compares a candidate <see cref="T:System.Reflection.PropertyInfo" /> object against
            this <see cref="T:AutoFixture.Kernel.FieldTypeAndNameCriterion" />.
            </summary>
            <param name="other">
            The candidate to compare against this object.
            </param>
            <returns>
            <see langword="true" /> if <paramref name="other" /> is deemed
            equal to this instance; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            This method compares the candidate <paramref name="other" />
            against <see cref="P:AutoFixture.Kernel.PropertyTypeAndNameCriterion.TypeCriterion" /> and
            <see cref="P:AutoFixture.Kernel.PropertyTypeAndNameCriterion.NameCriterion" />. If the property's type matches the
            type criterion, and its name matches the name criterion, the return
            value is <see langword="true" />.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.PropertyTypeAndNameCriterion.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to another object.
            </summary>
            <param name="obj">The object to compare to this object.</param>
            <returns>
            <see langword="true" /> if <paramref name="obj" /> is equal to this
            object; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:AutoFixture.Kernel.PropertyTypeAndNameCriterion.TypeCriterion">
            <summary>
            The type criterion originally passed in via the class' constructor.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.PropertyTypeAndNameCriterion.NameCriterion">
            <summary>
            The name criterion originally passed in via the class' constructor.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.PropertyTypeAndNameCriterion.GetHashCode">
            <summary>
            Returns the hash code for the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.RangedNumberRequest">
            <summary>
            Encapsulates a range for values of a given type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RangedNumberRequest.#ctor(System.Type,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RangedNumberRequest"/> class.
            </summary>
            <param name="operandType">Type of the operand.</param>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="P:AutoFixture.Kernel.RangedNumberRequest.OperandType">
            <summary>
            Gets the type of the operand.
            </summary>
            <value>
            The type of the operand.
            </value>
        </member>
        <member name="P:AutoFixture.Kernel.RangedNumberRequest.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RangedNumberRequest.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RangedNumberRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:AutoFixture.Kernel.RangedNumberRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.RangedNumberRequest.Equals(AutoFixture.Kernel.RangedNumberRequest)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.RangedNumberRequest.ToString">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.Kernel.RangedSequenceRelay">
            <summary>
            Relay the <see cref="T:AutoFixture.Kernel.RangedSequenceRelay"/> to the request for the sequence of the fixed length.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RangedSequenceRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.Kernel.RangedSequenceRequest">
            <summary>
            Request for the sequence of <see cref="P:AutoFixture.Kernel.RangedSequenceRequest.Request"/> values.
            Sequece size is constrained by the <see cref="P:AutoFixture.Kernel.RangedSequenceRequest.MinLength"/> and <see cref="P:AutoFixture.Kernel.RangedSequenceRequest.MaxLength"/> values.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RangedSequenceRequest.Request">
            <summary>
            Gets the request the sequence should contain result of.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RangedSequenceRequest.MinLength">
            <summary>
            Gets the minimum number of items in the sequence.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RangedSequenceRequest.MaxLength">
            <summary>
            Gets the maximum number of items in the sequence.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RangedSequenceRequest.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:AutoFixture.Kernel.RangedSequenceRequest"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RangedSequenceRequest.Equals(AutoFixture.Kernel.RangedSequenceRequest)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Kernel.RangedSequenceRequest.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Kernel.RangedSequenceRequest.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.Kernel.ReadOnlyCollectionRelay">
            <summary>
            Relays a request for an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> to a request for a
            <see cref="T:System.Collections.Generic.List`1"/> and retuns the result.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ReadOnlyCollectionRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A populated <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of the appropriate item type if possible; otherwise
            a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> and
            <paramref name="context"/> can satisfy a request for a populated specimen of that type,
            this value will be returned. If not, the return value is a <see cref="T:AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.RecursionGuard">
            <summary>
            Base class for recursion handling. Tracks requests and reacts when a recursion point in the
            specimen creation process is detected.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RecursionGuard"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.IRecursionHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RecursionGuard" /> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.IRecursionHandler,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RecursionGuard" /> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RecursionGuard"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.IRecursionHandler,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RecursionGuard" /> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,AutoFixture.Kernel.IRecursionHandler,System.Collections.IEqualityComparer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RecursionGuard" />
            class.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RecursionGuard.Builder">
            <summary>
            Gets the decorated builder supplied via the constructor.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RecursionGuard.RecursionHandler">
            <summary>
            Gets the recursion handler originally supplied as a constructor argument.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RecursionGuard.RecursionDepth">
            <summary>
            The recursion depth at which the request will be treated as a recursive request.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RecursionGuard.Comparer">
            <summary> Gets the comparer supplied via the constructor. </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RecursionGuard.RecordedRequests">
            <summary> Gets the recorded requests so far. </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.HandleRecursiveRequest(System.Object)">
            <summary>
            Handles a request that would cause recursion.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AutoFixture.Kernel.RecursionGuard.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.Kernel.RegularExpressionRequest">
            <summary>
            Encapsulates a pattern for a regular expression.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RegularExpressionRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RegularExpressionRequest"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="P:AutoFixture.Kernel.RegularExpressionRequest.Pattern">
            <summary>
            Gets the regular expression pattern.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RegularExpressionRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:AutoFixture.Kernel.RegularExpressionRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.RegularExpressionRequest.Equals(AutoFixture.Kernel.RegularExpressionRequest)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.RequestTraceEventArgs">
            <summary>
            Event args about a request for a specimen.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.RequestTraceEventArgs.#ctor(System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.RequestTraceEventArgs"/> class with the
            supplied values.
            </summary>
            <param name="request">A request for a specimen.</param>
            <param name="depth">
            The recursion depth at which <paramref name="request"/> occurred.
            </param>
        </member>
        <member name="P:AutoFixture.Kernel.RequestTraceEventArgs.Depth">
            <summary>
            Gets the recursion depth at which <see cref="P:AutoFixture.Kernel.RequestTraceEventArgs.Request"/> occurred.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.RequestTraceEventArgs.Request">
            <summary>
            Gets the original request for a specimen.
            </summary>
        </member>
        <member name="T:AutoFixture.Kernel.SeededFactory`1">
            <summary>
            Creates a new specimen from a <see cref="T:AutoFixture.Kernel.SeededRequest"/> using a function.
            </summary>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.SeededFactory`1.#ctor(System.Func{`0,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.SeededFactory`1"/> class.
            </summary>
            <param name="factory">The function that will create the specimen from a seed.</param>
        </member>
        <member name="P:AutoFixture.Kernel.SeededFactory`1.Factory">
            <summary>
            Gets the factory that is used to create specimens from a seed.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SeededFactory`1.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a seeded request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The result of the contained function if <paramref name="request"/> is a
            <see cref="T:AutoFixture.Kernel.SeededRequest"/> for the correct type and containing a seed of the same
            type; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.SeededRequest">
            <summary>
            Encapsulates a seed for a given type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SeededRequest.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="P:AutoFixture.Kernel.SeededRequest.Seed"/> class.
            </summary>
            <param name="request">The request for which the seed applies.</param>
            <param name="seed">The seed.</param>
        </member>
        <member name="P:AutoFixture.Kernel.SeededRequest.Seed">
            <summary>
            Gets the seed value.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.SeededRequest.Request">
            <summary>
            Gets the inner request for which the seed applies.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SeededRequest.Equals(System.Object)">
            <summary>
            Determines whether this instance equals another instance.
            </summary>
            <param name="obj">The other instance.</param>
            <returns>
            <see langword="true"/> if this instance equals <paramref name="obj"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.SeededRequest.GetHashCode">
            <summary>
            Returns the hash code for the instance.
            </summary>
            <returns>The hash code for the instance.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.SeededRequest.Equals(AutoFixture.Kernel.SeededRequest)">
            <summary>
            Determines whether this instance equals another instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns>
            <see langword="true"/> if this instance equals <paramref name="other"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.SeedIgnoringRelay">
            <summary>
            Unwraps a request for a <see cref="T:AutoFixture.Kernel.SeededRequest"/> to a request for its
            <see cref="P:AutoFixture.Kernel.SeededRequest.Request"/> while ignoring the <see cref="P:AutoFixture.Kernel.SeededRequest.Seed"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SeedIgnoringRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous value by unwrapping a seeded request and ignoring the seed.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen based on <paramref name="request"/> if possible; otherwise,
            <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a seeded request, the Create method unwraps the inner
            request and forwards it to <paramref name="context"/>. The seed value is ignored.
            </para>
            <para>
            The purpose of this class is to provide a fallback to handle seeded requests that no
            other <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instances have been able to handle. By ignoring
            the seed value, it handles those scenarios where the seed value and the inner request
            don't match and can't be combined, ensuring that at least some value is returned.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.SeedRequestSpecification">
            <summary>
            A specification that evaluates seeded requests for types against a target type.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SeedRequestSpecification.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.SeedRequestSpecification"/> class.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="P:AutoFixture.Kernel.SeedRequestSpecification.TargetType">
            <summary>
            Gets the type targeted by this <see cref="T:AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SeedRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:AutoFixture.Kernel.SeededRequest"/>
            for a type that matches <see cref="P:AutoFixture.Kernel.SeedRequestSpecification.TargetType"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.SortedDictionarySpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SortedDictionarySpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.SortedDictionary`2" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.SortedListSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.Generic.SortedList`2"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SortedListSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.Generic.SortedList`2"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.SortedList`2" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.SortedSetSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.Generic.SortedSet`1"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SortedSetSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.Generic.SortedSet`1"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.SortedSet`1" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.SpecifiedNullCommand`2">
            <summary>
            A no-op that identifies a certain property or field.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
            <typeparam name="TProperty">The type of property or field.</typeparam>
            <remarks>
            <para>
            This class can be used to reserve an identified property or field without doing anything
            with it.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.SpecifiedNullCommand`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.SpecifiedNullCommand`2"/> class with the supplied
            property picker expression.
            </summary>
            <param name="propertyPicker">An expression that identifies a property or field.</param>
        </member>
        <member name="P:AutoFixture.Kernel.SpecifiedNullCommand`2.Member">
            <summary>
            Gets the member identified by the expression supplied through the constructor.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecifiedNullCommand`2.Execute(`0,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Does nothing.
            </summary>
            <param name="specimen">A specimen.</param>
            <param name="context">An <see cref="T:AutoFixture.Kernel.ISpecimenContext"/>.</param>
        </member>
        <member name="M:AutoFixture.Kernel.SpecifiedNullCommand`2.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates whether a request matches the property or field reserved by this command.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is is a <see cref="T:System.Reflection.PropertyInfo"/>
            or <see cref="T:System.Reflection.FieldInfo"/> that identifies the property or field reserved by this
            <see cref="T:AutoFixture.Kernel.BindingCommand`2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenBuilderNode">
            <summary>
            Contains extension methods for working with
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenBuilderNode.GraphEquals(AutoFixture.Kernel.ISpecimenBuilderNode,AutoFixture.Kernel.ISpecimenBuilderNode)">
            <summary>
            Determines whether two <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instances are define the same graph.
            </summary>
            <remarks>
            <para>
            Two <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instances define the same
            graph if they themselves are equal to each other, and all their
            child nodes recursively are equal to each other.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenBuilderNode.GraphEquals(AutoFixture.Kernel.ISpecimenBuilderNode,AutoFixture.Kernel.ISpecimenBuilderNode,System.Collections.Generic.IEqualityComparer{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Determines whether two <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instances are define the same graph.
            </summary>
            <remarks>
            <para>
            Two <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instances define the same
            graph if they themselves are equal to each other, and all their
            child nodes recursively are equal to each other. Equality is
            defined by <paramref name="comparer" />.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenBuilderNode.FindFirstNodeOrDefault(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})">
            <summary>
            Finds the first node in the passed graph that matches the specified predicate.
            If nothing is found - null is returned.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenBuilderNode.FindFirstNode(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})">
            <summary>
            Returns the first node in the graph that matches the specified predicate.
            If no node is present - fails with exception.
            </summary>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenBuilderNodeFactory">
            <summary>
            Exposes convenience methods for producing well-known object graphs.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenBuilderNodeFactory.CreateComposer``1">
            <summary>
            Creates the appropriate initial graph for a
            <see cref="T:AutoFixture.Dsl.NodeComposer`1" />.
            </summary>
            <typeparam name="T">The type of specimen to compose.</typeparam>
            <returns>
            A new <see cref="T:AutoFixture.Dsl.NodeComposer`1" /> instance with an appropriate
            initial underlying graph.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenBuilderNodeFactory.CreateTypedNode(System.Type,AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>Creates a graph for a typed node.</summary>
            <param name="targetType">
            The type of the target specimen that this node can produce.
            </param>
            <param name="factory">
            The factory which actually produces specimen instances.
            </param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.FilteringSpecimenBuilder" /> instance with an
            appropriate underlying graph.
            </returns>
            <remarks>
            While the caller must still supply the <paramref name="factory" />
            which produces the specimens, this method wraps that factory in
            appropriate filters and relays to ensure that this node handles
            and produces only specimens of <paramref name="targetType" />.
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenContext">
            <summary>
            Default implementation of <see cref="T:AutoFixture.Kernel.ISpecimenContext"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenContext.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of <see cref="T:AutoFixture.Kernel.SpecimenContext"/> with the supplied
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="builder">The builder that will handle requests.</param>
        </member>
        <member name="P:AutoFixture.Kernel.SpecimenContext.Builder">
            <summary>
            Gets the <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> contained by the instance.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenContext.Resolve(System.Object)">
            <summary>
            Creates an anonymous variable (specimen) based on a request by delegating the request
            to its contained <see cref="P:AutoFixture.Kernel.SpecimenContext.Builder"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <returns>The result of a request to the contained <see cref="P:AutoFixture.Kernel.SpecimenContext.Builder"/>.</returns>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenCreatedEventArgs">
            <summary>
            Event arguments about a created specimen.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenCreatedEventArgs.#ctor(System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.SpecimenCreatedEventArgs"/> class with the
            supplied values.
            </summary>
            <param name="request">A request for a specimen.</param>
            <param name="specimen">
            The specimen that was created base on <paramref name="request"/>.
            </param>
            <param name="depth">
            The recursion depth at which <paramref name="request"/> occurred.
            </param>
        </member>
        <member name="P:AutoFixture.Kernel.SpecimenCreatedEventArgs.Specimen">
            <summary>
            Gets the specimen that was created from <see cref="P:AutoFixture.Kernel.RequestTraceEventArgs.Request"/>.
            </summary>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenFactory`1">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.SpecimenFactory`1"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
        </member>
        <member name="P:AutoFixture.Kernel.SpecimenFactory`1.Factory">
            <summary>
            Gets the factory that will create specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`1.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenFactory`2">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`2"/>.
            </summary>
            <typeparam name="TInput">The type of the parameter provided to the Func.</typeparam>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.SpecimenFactory`2"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
            <remarks>
            <para>
            The input parameter to <paramref name="factory"/> will be supplied by the
            <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> passed to the <see cref="M:AutoFixture.Kernel.SpecimenFactory`2.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Kernel.SpecimenFactory`2.Factory">
            <summary>
            Gets the factory that creates specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`2.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen. The parameter for the Func is supplied by
            <paramref name="context"/>.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenFactory`3">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`3"/>.
            </summary>
            <typeparam name="TInput1">The type of the first parameter provided to the Func.</typeparam>
            <typeparam name="TInput2">The type of the second parameter provided to the Func.</typeparam>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`3.#ctor(System.Func{`0,`1,`2})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.SpecimenFactory`3"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
            <remarks>
            <para>
            The input parameters to <paramref name="factory"/> will be supplied by the
            <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> passed to the <see cref="M:AutoFixture.Kernel.SpecimenFactory`3.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Kernel.SpecimenFactory`3.Factory">
            <summary>
            Gets the factory that creates specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`3.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen. The parameters for the Func is supplied by
            <paramref name="context"/>.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenFactory`4">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`4"/>.
            </summary>
            <typeparam name="TInput1">The type of the first parameter provided to the Func.</typeparam>
            <typeparam name="TInput2">The type of the second parameter provided to the Func.</typeparam>
            <typeparam name="TInput3">The type of the third parameter provided to the Func.</typeparam>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`4.#ctor(System.Func{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.SpecimenFactory`4"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
            <remarks>
            <para>
            The input parameters to <paramref name="factory"/> will be supplied by the
            <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> passed to the <see cref="M:AutoFixture.Kernel.SpecimenFactory`4.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Kernel.SpecimenFactory`4.Factory">
            <summary>
            Gets the factory that creates specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`4.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen. The parameters for the Func is supplied by
            <paramref name="context"/>.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.SpecimenFactory`5">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`5"/>.
            </summary>
            <typeparam name="TInput1">The type of the first parameter provided to the Func.</typeparam>
            <typeparam name="TInput2">The type of the second parameter provided to the Func.</typeparam>
            <typeparam name="TInput3">The type of the third parameter provided to the Func.</typeparam>
            <typeparam name="TInput4">The type of the fourth parameter provided to the Func.</typeparam>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`5.#ctor(System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.Kernel.SpecimenFactory`5"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
            <remarks>
            <para>
            The input parameters to <paramref name="factory"/> will be supplied by the
            <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> passed to the <see cref="M:AutoFixture.Kernel.SpecimenFactory`5.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.Kernel.SpecimenFactory`5.Factory">
            <summary>
            Gets the factory that creates specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.SpecimenFactory`5.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen. The parameters for the Func is supplied by
            <paramref name="context"/>.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.StableFiniteSequenceRelay">
            <summary>
            Unwraps a request for many instances and returns the results as a stable list.
            </summary>
            <remarks>
            <para>
            In contrast to <see cref="T:AutoFixture.Kernel.FiniteSequenceRelay" /> this alternative implementation returns
            the sequence wrapped in a <see cref="T:System.Collections.Generic.List`1" />. This means that the iterator will
            yield the same instances across multiple iterations.
            </para>
            <para>
            By default this class is not used by <see cref="T:AutoFixture.Fixture" />, but it can be used to override
            the dynamic enumerable behavior by adding it to <see cref="P:AutoFixture.Fixture.Customizations" />.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.FiniteSequenceRelay" />
        </member>
        <member name="M:AutoFixture.Kernel.StableFiniteSequenceRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            Many specimens if <paramref name="request"/> is a <see cref="T:AutoFixture.Kernel.FiniteSequenceRequest"/>
            instance; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The sequence of specimens returned is stable which means that it can be iterated over
            more than once and be expected to yield the same instances every time.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.StaticMethod">
            <summary>
            Encapsulates a static method.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.StaticMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.StaticMethod"/> class.
            </summary>
            <param name="methodInfo">The methodInfo.</param>
        </member>
        <member name="M:AutoFixture.Kernel.StaticMethod.#ctor(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.StaticMethod"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="methodParameters">The method parameters.</param>
        </member>
        <member name="P:AutoFixture.Kernel.StaticMethod.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.StaticMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.StaticMethod.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:AutoFixture.Kernel.StaticMethod.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.StaticMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.StaticMethod.Equals(AutoFixture.Kernel.StaticMethod)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.TemplateMethodQuery">
            <summary>
            Selects public static methods that has the same parameters of another method,
            ignoring optional parameters and return type.
            </summary>
            <remarks>
            <para>
            The main target of this <see cref="T:AutoFixture.Kernel.IMethodQuery" /> implementation is to be able to
            late bind to a method even if it has optional parameters added to it.
            </para>
            <para>
            The order of the methods are based on the match of parameters types of both methods,
            favoring the method with exactly same parameters to be returned first.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.TemplateMethodQuery.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TemplateMethodQuery"/> class.
            </summary>
            <param name="template">The method info to compare.</param>
        </member>
        <member name="M:AutoFixture.Kernel.TemplateMethodQuery.#ctor(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TemplateMethodQuery"/> class.
            </summary>
            <param name="template">The method info to compare.</param>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:AutoFixture.Kernel.TemplateMethodQuery.Template">
            <summary>
            The template <see cref="T:System.Reflection.MethodInfo" /> to compare.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.TemplateMethodQuery.Owner">
            <summary>
            The owner instance of the <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TemplateMethodQuery.SelectMethods(System.Type)">
            <summary>
            Selects the methods for the supplied type similar to <see cref="P:AutoFixture.Kernel.TemplateMethodQuery.Template" />.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public static methods for <paramref name="type"/>, ordered by the most similar first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned methods is based on a score that matches the parameters types
            of the method with the <see cref="P:AutoFixture.Kernel.TemplateMethodQuery.Template" /> method parameters. Methods with the highest score
            are returned before.
            </para>
            <para>
            The score is calculated with the following rules: The methods earns 100 points for each exact
            match parameter type, it loses 50 points for each hierarchy level down of non-matching parameter
            type and it loses 1 point for each optional parameter. It also sums the score for the generic type
            arguments or element type with a 10% weight and will decrease 50 points for the difference between
            the length of the type arguments array. It also gives 5 points if the type is a class instead of
            an interface.
            </para>
            <para>
            In case of two methods with an equal score, the ordering is unspecified.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.TerminatingSpecimenBuilder">
            <summary>
            Throws an <see cref="T:AutoFixture.ObjectCreationException"/>.
            </summary>
            <remarks>
            <para>
            This <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> can be used as the last item in a
            <see cref="T:AutoFixture.Kernel.CompositeSpecimenBuilder"/> to throw an exception instead of letting the
            containing builder return a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance when it can't satisfy a
            request.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.TerminatingSpecimenBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Throws an <see cref="T:AutoFixture.ObjectCreationException"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">
            A context that can be used to create other specimens. Not used.
            </param>
            <returns>
            This method never returns. It always throws an <see cref="T:AutoFixture.ObjectCreationException"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.TerminatingWithPathSpecimenBuilder">
            <summary>
            Decorates an <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> with a node which tracks specimen requests, and
            when <see cref="T:AutoFixture.Kernel.NoSpecimen"/> is detected or creation fails with exception, throws an
            <see cref="T:AutoFixture.ObjectCreationException"/>, which  includes a description of the request path.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TerminatingWithPathSpecimenBuilder.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Creates a new <see cref="T:AutoFixture.Kernel.TerminatingWithPathSpecimenBuilder"/> instance.
            </summary>
            <param name="builder">The specimen builder which creation requests are redirected to.</param>
        </member>
        <member name="P:AutoFixture.Kernel.TerminatingWithPathSpecimenBuilder.Builder">
            <summary>
            Gets the <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> decorated by this instance.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.TerminatingWithPathSpecimenBuilder.SpecimenRequests">
            <summary>
            Gets the observed specimen requests, in the order they were requested.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TerminatingWithPathSpecimenBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request by delegating to its decorated builder.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a creation exception is thrown.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.TerminatingWithPathSpecimenBuilder.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.TerminatingWithPathSpecimenBuilder.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ThrowingRecursionGuard">
            <summary>
            Handles recursion in the specimen creation process by throwing an exception at recursion point.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ThrowingRecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ThrowingRecursionGuard"/> class.
            </summary>
            <param name="builder">The intercepting builder to decorate.</param>
            <param name="comparer">An IEqualitycomparer implementation to use when comparing requests to determine recursion.</param>
        </member>
        <member name="M:AutoFixture.Kernel.ThrowingRecursionGuard.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.ThrowingRecursionGuard"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:AutoFixture.Kernel.ThrowingRecursionGuard.HandleRecursiveRequest(System.Object)">
            <summary>
            Handles a request that would cause recursion by throwing an exception.
            </summary>
            <param name="request">The recursion causing request.</param>
            <returns>Nothing. Always throws.</returns>
        </member>
        <member name="M:AutoFixture.Kernel.ThrowingRecursionGuard.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ThrowingRecursionHandler">
            <summary>
            Breaks a recursion by throwing a descriptive exception.
            </summary>
            <seealso cref="M:AutoFixture.Kernel.ThrowingRecursionHandler.HandleRecursiveRequest(System.Object,System.Collections.Generic.IEnumerable{System.Object})" />
        </member>
        <member name="M:AutoFixture.Kernel.ThrowingRecursionHandler.HandleRecursiveRequest(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Handles a recursive request.
            </summary>
            <param name="request">The request causing the recursion.</param>
            <param name="recordedRequests">
            Previously recorded, and yet unhandled, requests.
            </param>
            <returns>
            An object intended to break the recursion.
            </returns>
            <exception cref="T:AutoFixture.ObjectCreationException">Always.</exception>
            <remarks>
            <para>
            This method is called when AutoFixture detects an infinite
            recursion. The <paramref name="request" /> is the request that
            triggered the recursion detection;
            <paramref name="recordedRequests" /> contains all previous, but
            still unhandled requests: the current call stack, if you will.
            </para>
            <para>
            This implementation always throws a descriptive exception,
            instructing the user that the requested type contains a circular
            reference, and that this is bad API design. The message also
            contains instructions on how to move on.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.Kernel.TraceWriter">
            <summary>
            Trace writer that will write out a trace of object requests and created objects
            in the <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> pipeline.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TraceWriter.#ctor(System.IO.TextWriter,AutoFixture.Kernel.TracingBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TraceWriter"/> class.
            </summary>
            <param name="writer">The output stream for the trace.</param>
            <param name="tracer">The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
        </member>
        <member name="P:AutoFixture.Kernel.TraceWriter.Tracer">
            <summary>
            Gets the <see cref="T:AutoFixture.Kernel.TracingBuilder"/> decorated by this instance.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.TraceWriter.TraceRequestFormatter">
            <summary>
            Gets or sets the formatter for tracing a request.
            </summary>
            <value>The request trace formatter.</value>
        </member>
        <member name="P:AutoFixture.Kernel.TraceWriter.TraceSpecimenFormatter">
            <summary>
            Gets or sets the formatter for tracing a created specimen.
            </summary>
            <value>The created specimen trace formatter.</value>
        </member>
        <member name="M:AutoFixture.Kernel.TraceWriter.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request by delegating to its decorated builder.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.TraceWriter.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.TraceWriter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.TracingBuilder">
            <summary>
            Tracks any request and passes it on to the container.
            Tracks any returned object from the container and passes it on.
            </summary>
        </member>
        <member name="E:AutoFixture.Kernel.TracingBuilder.SpecimenRequested">
            <summary>
            Raised when a specimen is requested.
            </summary>
        </member>
        <member name="E:AutoFixture.Kernel.TracingBuilder.SpecimenCreated">
            <summary>
            Raised when a specimen was created.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TracingBuilder.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TracingBuilder"/> class with a decorated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
        </member>
        <member name="P:AutoFixture.Kernel.TracingBuilder.Builder">
            <summary>
            Gets the builder decorated by this instance.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.TracingBuilder.Filter">
            <summary>
            Gets or sets a filter for tracking.
            </summary>
            <remarks>
            <para>
            By default, <see cref="P:AutoFixture.Kernel.TracingBuilder.Filter"/> tracks all requests and created Specimens, but you can
            provide a custom filter to only allow certain requests to be traced.
            </para>
            <para>
            As this is a variation of the Specification pattern, the filter must return
            <see langword="true"/> to allow the request to be tracked.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.TracingBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request and raises events tracing the progress.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.Kernel.TracingBuilder.OnSpecimenCreated(AutoFixture.Kernel.SpecimenCreatedEventArgs)">
            <summary>
            Raises the <see cref="E:AutoFixture.Kernel.TracingBuilder.SpecimenCreated"/> event.
            </summary>
            <param name="e">The event arguments for the event.</param>
        </member>
        <member name="M:AutoFixture.Kernel.TracingBuilder.OnSpecimenRequested(AutoFixture.Kernel.RequestTraceEventArgs)">
            <summary>
            Raises the <see cref="E:AutoFixture.Kernel.TracingBuilder.SpecimenRequested"/> event.
            </summary>
            <param name="e">The event arguments for the event.</param>
        </member>
        <member name="T:AutoFixture.Kernel.TrueRequestSpecification">
            <summary>
            A <see cref="T:AutoFixture.Kernel.IRequestSpecification"/> that is always <see langword="true"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TrueRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException">
            <summary>
            The exception that is thrown when AutoFixture is unable to infer the type
            parameters of a generic method from its arguments.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException"/> class
            from a <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">
            The <see cref="T:System.Reflection.MethodInfo"/> that cannot have its type arguments inferred.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException"/> class with a
            custom <see cref="P:System.Exception.Message"/>.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TypeArgumentsCannotBeInferredException"/> class with a
            custom <see cref="P:System.Exception.Message"/> and <see cref="P:System.Exception.InnerException"/>.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="T:AutoFixture.Kernel.TypeRelay">
            <summary>
            Maps a request for one <see cref="T:System.Type" /> to a request for another Type.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.TypeRelay.From">
            <summary>
            Gets the type which is relayed from.
            </summary>
        </member>
        <member name="P:AutoFixture.Kernel.TypeRelay.To">
            <summary>
            Gets the type which is relayed to.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.TypeRelay.#ctor(System.Type,System.Type)">
             <summary>
             Initializes a new instance of the <see cref="T:AutoFixture.Kernel.TypeRelay"/> class.
             </summary>
             <param name="from">
             The <see cref="T:System.Type" /> from which the TypeRelay instance should map.
             </param>
             <param name="to">
             The <see cref="T:System.Type" /> to which the TypeRelay instance should map.
             </param>
             <remarks>
             <para>
             The <paramref name="from" /> and <paramref name="to" /> parameters are used by the
             <see cref="M:AutoFixture.Kernel.TypeRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)" /> method to map a request for the <i>from</i> Type into a request
             for the <i>to</i> Type.
             </para>
             </remarks>
             <example>
             In this example, BaseType is an abstract base class, and
             DerivedType is a concrete class that derives from BaseType. The
             Fixture instance is configured to relay all requests for BasetType
             to requests for DerivedType, so the actual result return from the
             fixture when BasetType is requested is a DerivedType instance.
             <code>
             var fixture = new Fixture();
             fixture.Customizations.Add(
                 new TypeRelay(
                     typeof(BaseType),
                     typeof(DerivedType)));
            
             var actual = fixture.Create&lt;BaseType&gt;();
             </code>
             </example>
        </member>
        <member name="M:AutoFixture.Kernel.TypeRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Relays a request for the <i>from</i> Type into a request for the <i>to</i> Type.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            If <paramref name="request" /> is a request for the <i>from</i> Type, an instance of
            the <i>to</i> Type is returned; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The <i>from</i> and <i>to</i> Types are defined by constructor arguments. An exact
            match is performed when evaluating <paramref name="request" /> against the <i>from</i>
            Type - i.e. derived types are not regarded as matches.
            </para>
            <para>
            If the request matches the <i>from</i> Type, an instance of the <i>to</i> Type is
            requested from the <paramref name="context" />.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.Kernel.TypeRelay.#ctor(System.Type,System.Type)" />
        </member>
        <member name="T:AutoFixture.Kernel.UnspecifiedSpecimenCommand`1">
            <summary>
            Encapsulates an operation without identifying any property or field.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="M:AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.Kernel.UnspecifiedSpecimenCommand`1"/>
            class.
            </summary>
            <param name="action">The action to perform on a specimen.</param>
        </member>
        <member name="P:AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.Action">
            <summary>
            Gets the action that can be performed on a specimen.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.Execute(`0,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Executes <see cref="P:AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.Action"/> on the supplied specimen.
            </summary>
            <param name="specimen">The specimen on which the command is executed.</param>
            <param name="context">
            An <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> that can be used to resolve other requests. Not
            used.
            </param>
        </member>
        <member name="M:AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.Kernel.ValueTypeSpecification">
            <summary>
            A specification that evaluates whether a request is a request for a value type such as a structure.
            </summary>
        </member>
        <member name="M:AutoFixture.Kernel.ValueTypeSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Type"/> that represents a structure;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.Kernel.ValueTypeSpecification.IsValueTypeButNotPrimitiveOrEnum(System.Type)">
            <summary>
            Checks if type is a struct. This will exclude primitive types (int, char etc.) considered as IsPrimitive as
            well as enums but not .NET structs.
            </summary>
        </member>
        <member name="T:AutoFixture.LambdaExpressionGenerator">
            <summary>
            Creates new lambda expressions represented by the <see cref="T:System.Linq.Expressions.Expression`1"/> type.
            </summary>
            <remarks>
            Specimens are typically either of type <see>
                    <cref>Expression{Func{T}}</cref>
                </see>
                or <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </remarks>
        </member>
        <member name="M:AutoFixture.LambdaExpressionGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new lambda expression represented by the <see cref="T:System.Linq.Expressions.Expression`1"/> type.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            A new <see cref="T:System.Linq.Expressions.Expression`1"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.Linq.Expressions.Expression`1"/>; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.LazyRelay">
            <summary>
            Relays a request for an <see cref="T:System.Func`1" /> to a request for a
            <see cref="T:System.Lazy`1"/> and returns the result.
            </summary>
        </member>
        <member name="M:AutoFixture.LazyRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.
            </param>
            <param name="context">A context that can be used to create other
            specimens.</param>
            <returns>
            An instance of a <see cref="T:System.Lazy`1"/> if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for a
            <see cref="T:System.Lazy`1"/> and <paramref name="context"/> can satisfy a
            request for a <see cref="T:System.Func`1" /> specimen,
            the <see cref="T:System.Func`1" />'s value will be used when lazy
            initialization occurs. If not, the return value is a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.MailAddressGenerator">
            <summary>
            Creates new <see cref="T:System.Net.Mail.MailAddress"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.MailAddressGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new MailAddress.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>>
            The generated MailAddress will have one of the reserved domains,
            so as to avoid any possibility of tests bothering real email addresses.
            </remarks>
        </member>
        <member name="T:AutoFixture.MapCreateManyToEnumerable">
            <summary>
            Maps a call to
            <see cref="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Kernel.ISpecimenBuilder)" /> to a
            call for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <remarks>
            <para>
            Normally,
            <see cref="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Kernel.ISpecimenBuilder)" /> returns
            its own implementation of <see cref="T:System.Collections.Generic.IEnumerable`1" />, even if other
            customizations have changed how IEnumerable&lt;T&gt; are handled. This
            ensures that CreateMany&lt;T&gt; still returns many instances, even
            when IEnumerable&lt;T&gt; have been changed to return an empty
            sequence.
            </para>
            <para>
            If you want to change this default behavior, you can use this
            customization.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.MultipleToEnumerableRelay" />
        </member>
        <member name="M:AutoFixture.MapCreateManyToEnumerable.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <exception cref="T:System.ArgumentNullException">
            fixture is null.
            </exception>
            <remarks>
            <para>
            Customizes a <see cref="T:AutoFixture.IFixture" /> so that
            <see cref="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Kernel.ISpecimenBuilder)" />
            exhibits the same behavior as a request to create
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.MapCreateManyToEnumerable" />
        </member>
        <member name="T:AutoFixture.MultipleCustomization">
            <summary>
            A customization that enables conventions for well-known types that represents multiple
            items.
            </summary>
            <remarks>
            <para>
            When this customization is added to an <see cref="T:AutoFixture.IFixture"/> instance, requests for
            common sequence and collection types will be satisfied with instances populated with
            multiple items.
            </para>
            <para>
            Normally, <see cref="T:AutoFixture.Fixture"/> can satisfy requests for <see cref="T:System.Collections.Generic.List`1" /> and similar
            collection types, but the returned instances will be empty. When the
            <see cref="T:AutoFixture.MultipleCustomization" /> is added to an <see cref="T:AutoFixture.IFixture" />, such
            collection specimens will be populated with items.
            </para>
            <para>
            Please note that apart from the concrete types <see cref="T:System.Collections.Generic.List`1"/>,
            <see cref="T:System.Collections.ObjectModel.Collection`1"/> etc. this
            <see cref="T:AutoFixture.ICustomization"/> also resolves requests for the related interfaces
            <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/> etc. This can potentially conflict
            with other customizations, such as the auto-mocking extensions for AutoFixture. In this
            case latest customization to be added to a Fixture wins.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.MultipleCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by adding conventions for populating sequences and
            collections.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <seealso cref="T:AutoFixture.MultipleCustomization" />
        </member>
        <member name="T:AutoFixture.MutableValueTypeGenerator">
            <summary>
            Creates new <see langword="struct"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.MutableValueTypeGenerator.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="M:AutoFixture.MutableValueTypeGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see langword="struct"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens. Not used.</param>
            <returns>
            The requested struct if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.NoAutoPropertiesCustomization">
            <summary>
            A customization that will turn off the auto population of properties on the target type.
            </summary>
        </member>
        <member name="M:AutoFixture.NoAutoPropertiesCustomization.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.NoAutoPropertiesCustomization"/> class.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> to disable auto population of properties.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetType"/> is null.
            </exception>
        </member>
        <member name="M:AutoFixture.NoAutoPropertiesCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the fixture by creating a <see cref="F:AutoFixture.NoAutoPropertiesCustomization.targetType"/> that has no auto populated properties.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fixture"/> is null.
            </exception>
        </member>
        <member name="T:AutoFixture.NullRecursionBehavior">
            <summary>
            Decorates a <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> with a <see cref="T:AutoFixture.Kernel.RecursionGuard"/> with <see cref="T:AutoFixture.Kernel.NullRecursionHandler"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.NullRecursionBehavior.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:AutoFixture.NullRecursionBehavior" /> class with default recursion depth.
            The default recursion depth will cause null assignment on first recursion.
            </summary>
        </member>
        <member name="M:AutoFixture.NullRecursionBehavior.#ctor(System.Int32)">
            <summary>
            Initializes new instance of the <see cref="T:AutoFixture.NullRecursionBehavior" /> class with specific recursion depth.
            </summary>
            <param name="recursionDepth">The recursion depth at which the request will be assigned null.</param>
        </member>
        <member name="M:AutoFixture.NullRecursionBehavior.Transform(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> with a
            <see cref="T:AutoFixture.Kernel.RecursionGuard"/> with <see cref="T:AutoFixture.Kernel.NullRecursionHandler"/>.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <returns>
            <paramref name="builder"/> decorated with a <see cref="T:AutoFixture.Kernel.RecursionGuard"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.NumericSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.NumericSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consecutive sequence, if <paramref name="request"/> is a request
            for a numeric value; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.NumericSequencePerTypeCustomization">
             <summary>
             A customization that enables numeric specimens to be unique within a specific numeric <see cref="T:System.Type"/>.
             </summary>
             <remarks>
             <para>
             When this customization is added to an <see cref="T:AutoFixture.IFixture"/> instance, requests for numeric specimens
             will be satisfied by returning numbers from a <see cref="T:System.Type"/> specific sequence.
             </para>
             <para>
             This customization reproduces the generation strategy for numeric specimens used in AutoFixture up to version 2.1.
             </para>
             <example>
             <code>
             var fixture = new Fixture();
             fixture.Customize(new NumericSequencePerTypeCustomization());
            
             Console.WriteLine("Byte specimen is {0}", fixture.Create&lt;byte&gt;());
             Console.WriteLine("Int32 specimen is {0}", fixture.Create&lt;int&gt;());
             Console.WriteLine("Single specimen is {0}", fixture.Create&lt;float&gt;());
            
             // The output of this program will be:
             // Byte specimen is 1
             // Int32 specimen is 1
             // Single specimen is 1
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:AutoFixture.NumericSequencePerTypeCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by adding the <see cref="T:System.Type"/> specific numeric sequence generators.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.ObjectCreationException">
            <summary>
            The exception that is thrown when AutoFixture is unable to create an object.
            </summary>
        </member>
        <member name="M:AutoFixture.ObjectCreationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.ObjectCreationException"/> class with a
            default <see cref="P:System.Exception.Message"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.ObjectCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.ObjectCreationException"/> class with a
            custom <see cref="P:System.Exception.Message"/>.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:AutoFixture.ObjectCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.ObjectCreationException"/> class with a
            custom <see cref="P:System.Exception.Message"/> and <see cref="P:System.Exception.InnerException"/>.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="T:AutoFixture.ObjectCreationExceptionWithPath">
            <summary>
            The exception that is thrown when AutoFixture is unable to create an object.
            This exception is supposed to contain the full request path.
            </summary>
        </member>
        <member name="T:AutoFixture.OmitOnRecursionBehavior">
            <summary>
            Decorates an <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> with a
            <see cref="T:AutoFixture.Kernel.RecursionGuard" />.
            </summary>
        </member>
        <member name="M:AutoFixture.OmitOnRecursionBehavior.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:AutoFixture.OmitOnRecursionBehavior" /> class with default recursion depth.
            The default recursion depth will omit assignment on first recursion.
            </summary>
        </member>
        <member name="M:AutoFixture.OmitOnRecursionBehavior.#ctor(System.Int32)">
            <summary>
            Initializes new instance of the <see cref="T:AutoFixture.OmitOnRecursionBehavior" /> class with specific recursion depth.
            </summary>
            <param name="recursionDepth">The recursion depth at which the request will be omitted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">recursionDepth is less than one.</exception>
        </member>
        <member name="M:AutoFixture.OmitOnRecursionBehavior.Transform(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> with an
            <see cref="T:AutoFixture.Kernel.RecursionGuard"/>.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <returns>
            <paramref name="builder" /> decorated with an
            <see cref="T:AutoFixture.Kernel.RecursionGuard" />.
            </returns>
        </member>
        <member name="T:AutoFixture.RandomBooleanSequenceCustomization">
            <summary>
            A customization that changes how <see cref="T:System.Boolean"/> are generated. Uses <see cref="T:AutoFixture.RandomBooleanSequenceGenerator"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomBooleanSequenceCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes specified fixture by adding <see cref="T:AutoFixture.RandomBooleanSequenceGenerator"/> as a default strategy for
            creating new <see cref="T:System.Boolean"/>.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.RandomBooleanSequenceGenerator">
            <summary>
            Creates random value <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomBooleanSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.RandomBooleanSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomBooleanSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Returns <see langword="true"/> or <see langword="false"/> randomly.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            <see langword="true"/> or <see langword="false"/> generated randomly using <see cref="T:System.Random"/>,
            if <paramref name="request"/> is a request for a boolean; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.RandomCharSequenceGenerator">
            <summary>
            Creates a sequence of random printable ASCII characters (Dec 33-126).
            </summary>
        </member>
        <member name="M:AutoFixture.RandomCharSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.RandomCharSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomCharSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.
            </param>
            <param name="context">A context that can be used to create other
            specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.RandomDateTimeSequenceGenerator">
            <summary>
            Creates random <see cref="T:System.DateTime"/> specimens.
            </summary>
            <remarks>
            The generated <see cref="T:System.DateTime"/> values will be within
            a range of ± two years from today's date,
            unless a different range has been specified in the constructor.
            </remarks>
        </member>
        <member name="M:AutoFixture.RandomDateTimeSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.RandomDateTimeSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomDateTimeSequenceGenerator.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.RandomDateTimeSequenceGenerator"/> class
            for a specific range of dates.
            </summary>
            <param name="minDate">The lower bound of the date range.</param>
            <param name="maxDate">The upper bound of the date range.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="minDate"/> is greater than <paramref name="maxDate"/>.
            </exception>
        </member>
        <member name="M:AutoFixture.RandomDateTimeSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            A new <see cref="T:System.DateTime"/> specimen, if <paramref name="request"/> is a request for a
            <see cref="T:System.DateTime"/> value; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.RandomNumericSequenceCustomization">
            <summary>
            A customization that enables numeric specimens to be random and unique.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomNumericSequenceCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by adding a
            <see cref="T:AutoFixture.RandomNumericSequenceGenerator" />.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <exception cref="T:System.ArgumentNullException">
            fixture is null.
            </exception>
        </member>
        <member name="T:AutoFixture.RandomNumericSequenceGenerator">
            <summary>
            Creates a sequence of random, unique, numbers starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomNumericSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.RandomNumericSequenceGenerator" /> class
            with the default limits, 255, 32767, and 2147483647.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomNumericSequenceGenerator.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.RandomNumericSequenceGenerator" /> class.
            </summary>
            <param name="limits">A sequence of at least two ascending numbers.</param>
        </member>
        <member name="M:AutoFixture.RandomNumericSequenceGenerator.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.RandomNumericSequenceGenerator" /> class.
            </summary>
            <param name="limits">An array of at least two ascending numbers.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:AutoFixture.RandomNumericSequenceGenerator.Limits">
            <summary>
            Gets the sequence of limits.
            </summary>
            <value>
            The sequence of limits.
            </value>
        </member>
        <member name="M:AutoFixture.RandomNumericSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The next random number in a sequence, if <paramref name="request"/> is a request
            for a numeric value; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="M:AutoFixture.RandomNumericSequenceGenerator.GetUpperRangeFromLimits">
             <summary>
             Returns upper limit + 1 when expecting to use upper as max value in Random.Next(Int32,Int32).
             This ensures that the upper limit is included in the possible values returned by Random.Next(Int32,Int32)
            
             When not expecting to use Random.Next(Int32,Int32).  It returns the original upper limit.
             </summary>
             <returns></returns>
        </member>
        <member name="T:AutoFixture.RandomRangedNumberCustomization">
            <summary>
            A customization that enables numeric specimens to be random and unique per equivalence set of type and range limits.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomRangedNumberCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by adding a
            <see cref="T:AutoFixture.RandomRangedNumberGenerator" />.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <exception cref="T:System.ArgumentNullException">
            fixture is null.
            </exception>
        </member>
        <member name="T:AutoFixture.RandomRangedNumberGenerator">
            <summary>
            Creates a random sequence for a given type within a given range without repeating in the range until
            all values are exhausted. Once exhausted, will automatically reset the set and continue choosing randomly
            within the range.  Multiple requests (whether the same or different object) for the same
            operand type, minimum, and maximum are treated as being drawn from the same set.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomRangedNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.RandomRangedNumberGenerator" /> class.
            </summary>
        </member>
        <member name="M:AutoFixture.RandomRangedNumberGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a random number within the request range.
            </summary>
            <param name="request">The request that describes what to create. Other requests for same type and limits
            denote the same set. </param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The next random number in a range <paramref name="request"/> is a request
            for a numeric value; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="M:AutoFixture.RandomRangedNumberGenerator.SelectGenerator(AutoFixture.Kernel.RangedNumberRequest)">
            <summary>
            Choose the RandomNumericSequenceGenerator to fulfill the request.  Will add the request as a new key
            to generatorMap if the request does not already have a generator for it.  Throws ArgumentException
            if either of the limits in the request are non-numeric.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:AutoFixture.RangedNumberGenerator">
            <summary>
            Creates a strictly increasing sequence of ranged numbers, starting at range minimum.
            Sequence restarts at range minimum when range maximum is exceeded.
            </summary>
        </member>
        <member name="M:AutoFixture.RangedNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.RangedNumberGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.RangedNumberGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new number based on a RangedNumberRequest.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested number if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.RegularExpressionGenerator">
            <summary>
            Creates a string that is guaranteed to match a RegularExpressionRequest.
            </summary>
        </member>
        <member name="M:AutoFixture.RegularExpressionGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a string that is guaranteed to match a RegularExpressionRequest.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.RequestMemberTypeResolver">
            <summary>
            Resolver of the member type for the class member requests (e.g. PropertyInfo, FieldInfo).
            </summary>
        </member>
        <member name="M:AutoFixture.RequestMemberTypeResolver.TryGetMemberType(System.Object,System.Type@)">
            <summary>
            Tries to determine requested member type and returns it.
            </summary>
            <param name="request">Relay request object.</param>
            <param name="memberType">Output variable for resolved request member type.</param>
            <returns></returns>
        </member>
        <member name="T:AutoFixture.ResidueCollectorNode">
            <summary>
            A marker class, used to explicitly identify the <i>residue
            collector</i> role in an <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph.
            </summary>
            <remarks>
            The only purpose of this class is to act as an easily identifiable
            container. This makes it easier to find the collection of <i>residue
            collectors</i> even if it is buried deep in a larger graph.
            </remarks>
        </member>
        <member name="M:AutoFixture.ResidueCollectorNode.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.ResidueCollectorNode" /> class.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <remarks>
            <para>
            After initialization <paramref name="builder" /> is available via
            the <see cref="P:AutoFixture.ResidueCollectorNode.Builder" /> property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder" /> is null.
            </exception>
            <seealso cref="P:AutoFixture.ResidueCollectorNode.Builder" />
        </member>
        <member name="M:AutoFixture.ResidueCollectorNode.Compose(System.Collections.Generic.IEnumerable{AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>Composes the supplied builders.</summary>
            <param name="builders">The builders to compose.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instance containing
            <paramref name="builders" /> as child nodes.
            </returns>
        </member>
        <member name="M:AutoFixture.ResidueCollectorNode.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>Creates a new specimen based on a request.</summary>
            <param name="request">
            The request that describes what to create.
            </param>
            <param name="context">
            A context that can be used to create other specimens.
            </param>
            <returns>
            The requested specimen if possible; otherwise a
            <see cref="T:AutoFixture.Kernel.NoSpecimen" /> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request" /> can be any object, but will often
            be a <see cref="T:System.Type" /> or other
            <see cref="T:System.Reflection.MemberInfo" /> instances.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.ResidueCollectorNode.GetEnumerator">
            <summary>Returns the decorated builder as a sequence.</summary>
            <returns><see cref="P:AutoFixture.ResidueCollectorNode.Builder" /> wrapped in an Iterator.</returns>
            <seealso cref="P:AutoFixture.ResidueCollectorNode.Builder" />
        </member>
        <member name="M:AutoFixture.ResidueCollectorNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can
            be used to iterate through the collection.
            </returns>
            <seealso cref="M:AutoFixture.ResidueCollectorNode.GetEnumerator" />
        </member>
        <member name="P:AutoFixture.ResidueCollectorNode.Builder">
            <summary>Gets the builder decorated by this instance.</summary>
            <value>The builder originally supplied via the constructor.</value>
            <seealso cref="M:AutoFixture.ResidueCollectorNode.#ctor(AutoFixture.Kernel.ISpecimenBuilder)" />
        </member>
        <member name="T:AutoFixture.SByteSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.SByteSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.SByteSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.SByteSequenceGenerator.Create">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.SByteSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
            <remarks>Obsolete: Please move over to using <see cref="M:AutoFixture.SByteSequenceGenerator.Create">Create()</see> as this method will be removed in the next release.</remarks>
        </member>
        <member name="M:AutoFixture.SByteSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous <see cref="T:System.SByte"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next <see cref="T:System.SByte"/> in a consecutive sequence, if <paramref name="request"/>
            is a request for an SByte; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.SingleSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.SingleSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.SingleSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.SingleSequenceGenerator.Create">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.SingleSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
            <remarks>Obsolete: Please move over to using <see cref="M:AutoFixture.SingleSequenceGenerator.Create">Create()</see> as this method will be removed in the next release.</remarks>
        </member>
        <member name="M:AutoFixture.SingleSequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consecutive sequence, if <paramref name="request"/> is a request
            for a <see cref="T:System.Single"/>; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection">
            <summary>
            A collection of <see cref="T:AutoFixture.Kernel.ISpecimenBuilderTransformation" />
            instances, which can be used to produce a stack of singleton
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> instances at the root of any
            ISpecimenBuilderNode graph.
            </summary>
            <remarks>
            <para>
            Apart from containing a collection of
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderTransformation" /> instances, the
            SingletonSpecimenBuilderNodeStackCollectionAdapter also holds a
            reference to a <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph. Every time an
            ISpecimenBuilderTransformation instance is added to the collection, it
            is also applied to the graph by invoking
            <see cref="M:AutoFixture.Kernel.ISpecimenBuilderTransformation.Transform(AutoFixture.Kernel.ISpecimenBuilder)" />
            against the existing graph. This doesn't change the existing graph, but
            produces a new graph, which then replaces the previous graph. The
            current graph is always available via the <see cref="P:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.Graph" />
            property.
            </para>
            <para>
            For all mutating operations on the collection, the
            SingletonSpecimenBuilderNodeStackCollectionAdapter replaces its
            internal graph with a new graph that encapsulates the new state. The
            original graph is not mutated, but when a seemingly mutating method is
            invoked, the <see cref="E:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.GraphChanged" /> event is raised.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean},AutoFixture.Kernel.ISpecimenBuilderTransformation[])">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection" />
            class.
            </summary>
            <param name="graph">
            The base graph upon which the contained
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderTransformation"/> are applied.
            </param>
            <param name="wrappedGraphPredicate">
            A predicate which identifies the wrapped graph.
            </param>
            <param name="transformations">
            The transformations to apply to <paramref name="graph" />.
            </param>
            <remarks>
            <para>
            The <paramref name="transformations" /> and subsequent
            transformations added to the instance are applied to a base graph.
            The base graph is found by looking for a node within the graph
            where <paramref name="wrappedGraphPredicate" /> returns true.
            </para>
            </remarks>
        </member>
        <member name="E:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.GraphChanged">
            <summary>
            Occurs when this instance changes its internal view of the
            encapsulated <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph.
            </summary>
            <remarks>
            <para>
            When this instance performs a mutating action, it replaces its
            previously encapsulated <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph
            with a new graph where the change has been applied. The event
            arguments raised with the event contains a reference to the new
            graph.
            </para>
            </remarks>
        </member>
        <member name="P:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.Graph">
            <summary>Gets the full graph.</summary>
            <value>
            The full graph produced by applying the collection of
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderTransformation" /> instances to the base
            graph.
            </value>
        </member>
        <member name="M:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.ClearItems">
            <summary>Removes all items from the collection.</summary>
            <remarks>
            <para>
            Since this is a potentially mutating operation it may raise the
            <see cref="E:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.InsertItem(System.Int32,AutoFixture.Kernel.ISpecimenBuilderTransformation)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="index" /> should be
            inserted.
            </param>
            <param name="item">The item to insert.</param>
            <remarks>
            <para>
            Since this is a mutating operation it raises the
            <see cref="E:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <remarks>
            <para>
            Since this is a mutating operation it raises the
            <see cref="E:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.SetItem(System.Int32,AutoFixture.Kernel.ISpecimenBuilderTransformation)">
            <summary>Replaces the element at the specified index.</summary>
            <param name="index">
            The zero-based index of the element to replace.
            </param>
            <param name="item">
            The new value for the element at the specified index.
            </param>
            <remarks>
            <para>
            Since this is a mutating operation it raises the
            <see cref="E:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.OnGraphChanged(AutoFixture.SpecimenBuilderNodeEventArgs)">
            <summary>Raises the <see cref="E:AutoFixture.SingletonSpecimenBuilderNodeStackAdapterCollection.GraphChanged" /> event.</summary>
            <param name="e">
            The <see cref="T:AutoFixture.SpecimenBuilderNodeEventArgs" /> instance containing
            the event data.
            </param>
        </member>
        <member name="T:AutoFixture.SpecimenBuilderNodeAdapterCollection">
            <summary>
            Presents a horizontal slice of an <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" />
            graph as if it was a collection.
            </summary>
            <remarks>
            This class encapsulates an <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph
            and presents a horizontal slice of the graph as if it was a collection.
            For all mutating operations on the collection, the
            SpecimenBuilderNodeCollectionAdapter replaces its internal graph with a
            new graph that encapsulates the new state. The original graph is not
            mutated, but when a seemingly mutating method is invoked, the
            <see cref="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged" /> event is raised.
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" /> class.
            </summary>
            <param name="graph">The underlying graph.</param>
            <param name="adaptedBuilderPredicate">
            A predicate which is used to identify a node in
            <paramref name="graph" />.
            </param>
            <remarks>
            <para>
            <paramref name="adaptedBuilderPredicate" /> must identify a single
            node in <paramref name="graph" />. If zero or several nodes are
            identified by this predicate, an exception will be thrown.
            </para>
            <para>
            The node identified by the predicate is used as a source of the
            collection exposed by the SpecimenBuilderNodeCollectionAdapter
            class. When you enumerate all items in the collection, you really
            enumerate the children of the identified node.
            </para>
            </remarks>
        </member>
        <member name="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged">
            <summary>
            Occurs when this instance changes its internal view of the
            encapsulated <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph.
            </summary>
            <remarks>
            <para>
            When this instance performs a mutating action, it replaces its
            previously encapsulated <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph
            with a new graph where the change has been applied. The event
            arguments raised with the event contains a reference to the new
            graph.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.IndexOf(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list;
            otherwise, -1.
            </returns>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.Insert(System.Int32,AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Inserts an item to the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item" /> should be
            inserted.
            </param>
            <param name="item">
            The object to insert into the collection.
            </param>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            <para>
            Since this is a mutating operation it raises the
            <see cref="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            <para>
            Since this is a mutating operation it raises the
            <see cref="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="P:AutoFixture.SpecimenBuilderNodeAdapterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> at the specified
            index.
            </summary>
            <value>
            The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> at the specified index.
            </value>
            <param name="index">
            The zero-based index of the element to get or set.
            </param>
            <para>
            Since setting the value is a mutating operation it raises the
            <see cref="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged" /> event.
            </para>
            <returns>
            The <see cref="T:AutoFixture.Kernel.ISpecimenBuilder" /> at the specified index.
            </returns>
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.Add(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">he object to add to the collection.</param>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            <para>
            Since this is a mutating operation it raises the
            <see cref="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            <para>
            Since this is a mutating operation it raises the
            <see cref="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.Contains(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns>
            <see langword="true" /> if <paramref name="item"/> is found in the
            collection; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.CopyTo(AutoFixture.Kernel.ISpecimenBuilder[],System.Int32)">
            <summary>Copies the elements of the collection to an
            <see cref="T:System.Array" />, starting at a particular Array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of
            the elements copied from the collection. The Array must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="P:AutoFixture.SpecimenBuilderNodeAdapterCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="P:AutoFixture.SpecimenBuilderNodeAdapterCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <see langword="true" /> if this instance is read only; otherwise,
            <see langword="false" />.
            </value>
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.Remove(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Removes the first occurrence of a specific object from the
            collection.
            </summary>
            <param name="item">
            The object to remove from the collection.
            </param>
            <returns>
            <see langword="true" /> if <paramref name="item" /> was
            successfully removed from the collection; otherwise,
            <see langword="false" />. This method also returns
            <see langword="false" /> if the item is not found in the original
            collection.
            </returns>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            <para>
            Since this is a mutating operation it raises the
            <see cref="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged" /> event.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can
            be used to iterate through the collection.
            </returns>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="P:AutoFixture.SpecimenBuilderNodeAdapterCollection.Graph">
            <summary>
            Gets the graph which is the backing store of the collection.
            </summary>
            <value>
            The graph which is the backing store of the collection.
            </value>
            <remarks>
            <para>
            In this context, the term <i>collection</i> refers to the
            horizontal slice through the encapsulated
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" /> graph that this instance
            exposes as a collection.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.SpecimenBuilderNodeAdapterCollection" />
            <seealso cref="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode,System.Func{AutoFixture.Kernel.ISpecimenBuilderNode,System.Boolean})" />
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeAdapterCollection.OnGraphChanged(AutoFixture.SpecimenBuilderNodeEventArgs)">
            <summary>Raises the <see cref="E:AutoFixture.SpecimenBuilderNodeAdapterCollection.GraphChanged" /> event.</summary>
            <param name="e">
            The <see cref="T:AutoFixture.SpecimenBuilderNodeEventArgs" /> instance containing
            the event data.
            </param>
        </member>
        <member name="T:AutoFixture.SpecimenBuilderNodeEventArgs">
            <summary>
            Event arguments concerning an <see cref="T:AutoFixture.Kernel.ISpecimenBuilderNode" />
            instance.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenBuilderNodeEventArgs.#ctor(AutoFixture.Kernel.ISpecimenBuilderNode)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AutoFixture.SpecimenBuilderNodeEventArgs" /> class.
            </summary>
            <param name="graph">The graph associated with an event.</param>
            <exception cref="T:System.ArgumentNullException">graph.</exception>
        </member>
        <member name="P:AutoFixture.SpecimenBuilderNodeEventArgs.Graph">
            <summary>
            Gets the graph associated with an event.
            </summary>
        </member>
        <member name="T:AutoFixture.SpecimenCommand">
            <summary>
            Provides convenience methods to perform (partially) anonymous Commands.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenCommand.Do``1(AutoFixture.Kernel.ISpecimenBuilder,System.Action{``0})">
            <summary>
            Invokes the supplied action with an anonymous parameter value.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenCommand.Do``2(AutoFixture.Kernel.ISpecimenBuilder,System.Action{``0,``1})">
            <summary>
            Invokes the supplied action with anonymous parameter values.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenCommand.Do``3(AutoFixture.Kernel.ISpecimenBuilder,System.Action{``0,``1,``2})">
            <summary>
            Invokes the supplied action with anonymous parameter values.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenCommand.Do``4(AutoFixture.Kernel.ISpecimenBuilder,System.Action{``0,``1,``2,``3})">
            <summary>
            Invokes the supplied action with anonymous parameter values.
            </summary>
        </member>
        <member name="T:AutoFixture.SpecimenFactory">
            <summary>
            Creates anonymous variables from <see cref="T:AutoFixture.Kernel.ISpecimenContext"/> or
            <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.Create``1(AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <returns>An anonymous object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateAnonymous``1(AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <returns>An anonymous object of type <typeparamref name="T"/>.</returns>
            <remarks>Obsolete: Please move over to using <see cref="M:AutoFixture.SpecimenFactory.Create``1(AutoFixture.Kernel.ISpecimenContext)">Create&lt;T&gt;()</see> as this method will be removed in the next release.</remarks>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateAnonymous``1(AutoFixture.IFixture)">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="fixture">
            The fixture used to resolve the type request.
            </param>
            <returns>
            An anonymous object of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.Create``1(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="builder">
            The builder used to resolve the type request.
            </param>
            <returns>
            An anonymous object of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.Create``1(AutoFixture.Dsl.IPostprocessComposer{``0})">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <returns>An anonymous object of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            The only purpose of this explicit overload is to support type inferencing.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateAnonymous``1(AutoFixture.Dsl.IPostprocessComposer{``0})">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <returns>An anonymous object of type <typeparamref name="T"/>.</returns>
            <remarks>Obsolete: "Please move over to using <see cref="M:AutoFixture.SpecimenFactory.Create``1(AutoFixture.Kernel.ISpecimenContext)">Create{T}</see> as this method will be removed in the next release.
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>Creates many anonymous objects.</summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="builder">
            The builder used to resolve the type request.
            </param>
            <returns>
            A sequence of anonymous object of type <typeparamref name="T"/>.
            </returns>
            <remarks>
            <para>
            The CreateMany implementation always returns a new instance of
            <see cref="T:System.Collections.Generic.IEnumerable`1" />. Even if IEnumerable&lt;T&gt; is
            Frozen by the <see cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)" /> method
            or explicitly assigned with the
            <see cref="M:AutoFixture.FixtureRegistrar.Inject``1(AutoFixture.IFixture,``0)" /> method, the
            CreateMany method returns a new, independent instance of
            IEnumerable&lt;T&gt;.
            </para>
            <para>
            However, you can change this behavior, for example by applying the
            <see cref="T:AutoFixture.MapCreateManyToEnumerable" /> customization.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <returns>A sequence of anonymous object of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            The CreateMany implementation always returns a new instance of
            <see cref="T:System.Collections.Generic.IEnumerable`1" />. Even if IEnumerable&lt;T&gt; is
            Frozen by the <see cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)" /> method
            or explicitly assigned with the
            <see cref="M:AutoFixture.FixtureRegistrar.Inject``1(AutoFixture.IFixture,``0)" /> method, the
            CreateMany method returns a new, independent instance of
            IEnumerable&lt;T&gt;.
            </para>
            <para>
            However, you can change this behavior, for example by applying the
            <see cref="T:AutoFixture.MapCreateManyToEnumerable" /> customization.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Dsl.IPostprocessComposer{``0})">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <returns>A sequence of anonymous object of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            The CreateMany implementation always returns a new instance of
            <see cref="T:System.Collections.Generic.IEnumerable`1" />. Even if IEnumerable&lt;T&gt; is
            Frozen by the <see cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)" /> method
            or explicitly assigned with the
            <see cref="M:AutoFixture.FixtureRegistrar.Inject``1(AutoFixture.IFixture,``0)" /> method, the
            CreateMany method returns a new, independent instance of
            IEnumerable&lt;T&gt;.
            </para>
            <para>
            However, you can change this behavior, for example by applying the
            <see cref="T:AutoFixture.MapCreateManyToEnumerable" /> customization.
            </para>
            <para>
            The only purpose of this explicit overload is to support type inferencing.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Kernel.ISpecimenBuilder,System.Int32)">
            <summary>Creates many anonymous objects.</summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="builder">
            The builder used to resolve the type request.
            </param>
            <param name="count">The number of objects to create.</param>
            <returns>
            A sequence of anonymous objects of type <typeparamref name="T"/>.
            </returns>
            <remarks>
            <para>
            The CreateMany implementation always returns a new instance of
            <see cref="T:System.Collections.Generic.IEnumerable`1" />. Even if IEnumerable&lt;T&gt; is
            Frozen by the <see cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)" /> method
            or explicitly assigned with the
            <see cref="M:AutoFixture.FixtureRegistrar.Inject``1(AutoFixture.IFixture,``0)" /> method, the
            CreateMany method returns a new, independent instance of
            IEnumerable&lt;T&gt;.
            </para>
            <para>
            However, you can change this behavior, for example by applying the
            <see cref="T:AutoFixture.MapCreateManyToEnumerable" /> customization.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Kernel.ISpecimenContext,System.Int32)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <param name="count">The number of objects to create.</param>
            <returns>A sequence of anonymous objects of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            The CreateMany implementation always returns a new instance of
            <see cref="T:System.Collections.Generic.IEnumerable`1" />. Even if IEnumerable&lt;T&gt; is
            Frozen by the <see cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)" /> method
            or explicitly assigned with the
            <see cref="M:AutoFixture.FixtureRegistrar.Inject``1(AutoFixture.IFixture,``0)" /> method, the
            CreateMany method returns a new, independent instance of
            IEnumerable&lt;T&gt;.
            </para>
            <para>
            However, you can change this behavior, for example by applying the
            <see cref="T:AutoFixture.MapCreateManyToEnumerable" /> customization.
            </para>
            </remarks>
        </member>
        <member name="M:AutoFixture.SpecimenFactory.CreateMany``1(AutoFixture.Dsl.IPostprocessComposer{``0},System.Int32)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <param name="count">The number of objects to create.</param>
            <returns>A sequence of anonymous objects of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            The CreateMany implementation always returns a new instance of
            <see cref="T:System.Collections.Generic.IEnumerable`1" />. Even if IEnumerable&lt;T&gt; is
            Frozen by the <see cref="M:AutoFixture.FixtureFreezer.Freeze``1(AutoFixture.IFixture)" /> method
            or explicitly assigned with the
            <see cref="M:AutoFixture.FixtureRegistrar.Inject``1(AutoFixture.IFixture,``0)" /> method, the
            CreateMany method returns a new, independent instance of
            IEnumerable&lt;T&gt;.
            </para>
            <para>
            However, you can change this behavior, for example by applying the
            <see cref="T:AutoFixture.MapCreateManyToEnumerable" /> customization.
            </para>
            <para>
            The only purpose of this explicit overload is to support type inferencing.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.SpecimenQuery">
            <summary>
            Provides convenience methods to perform (partially) anonymous Queries.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenQuery.Get``2(AutoFixture.Kernel.ISpecimenBuilder,System.Func{``0,``1})">
            <summary>
            Invokes the supplied function with an anonymous parameter value and returns the result.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenQuery.Get``3(AutoFixture.Kernel.ISpecimenBuilder,System.Func{``0,``1,``2})">
            <summary>
            Invokes the supplied function with anonymous parameter values and returns the result.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenQuery.Get``4(AutoFixture.Kernel.ISpecimenBuilder,System.Func{``0,``1,``2,``3})">
            <summary>
            Invokes the supplied function with anonymous parameter values and returns the result.
            </summary>
        </member>
        <member name="M:AutoFixture.SpecimenQuery.Get``5(AutoFixture.Kernel.ISpecimenBuilder,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Invokes the supplied function with anonymous parameter values and returns the result.
            </summary>
        </member>
        <member name="T:AutoFixture.StableFiniteSequenceCustomization">
            <summary>
            A customization that makes sequences (i.e. <see cref="T:System.Collections.Generic.IEnumerable`1" /> stable instead of
            dynamic.
            </summary>
            <remarks>
            <para>
            A sequence (i.e. an instance of <see cref="T:System.Collections.Generic.IEnumerable`1" /> is not guaranteed to be
            stable or finite; it might, in fact, represent a Generator that creates an Iterator that
            can go on for ever. Even if the sequence is finite, it may not be stable because it may
            yield new items every time it's iterated.
            </para>
            <para>
            The StableFiniteSequenceCustomization class encapsulates a change in behavior that
            guarantees that an <see cref="T:AutoFixture.IFixture" /> instance will resolve a request for a sequence
            into a stable sequence.
            </para>
            </remarks>
            <seealso cref="T:AutoFixture.Kernel.StableFiniteSequenceRelay" />
        </member>
        <member name="M:AutoFixture.StableFiniteSequenceCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Adds a <see cref="T:AutoFixture.Kernel.StableFiniteSequenceRelay" /> to an <see cref="T:AutoFixture.IFixture" />.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <seealso cref="T:AutoFixture.StableFiniteSequenceCustomization" />
        </member>
        <member name="T:AutoFixture.StrictlyMonotonicallyIncreasingDateTimeGenerator">
            <summary>
            Creates new <see cref="T:System.DateTime"/> specimens based on a incremental sequence of days.
            </summary>
        </member>
        <member name="M:AutoFixture.StrictlyMonotonicallyIncreasingDateTimeGenerator.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.StrictlyMonotonicallyIncreasingDateTimeGenerator"/> class.
            </summary>
            <param name="seed">The base <see cref="T:System.DateTime"/> value used to generate <see cref="T:System.DateTime"/> specimens.</param>
        </member>
        <member name="M:AutoFixture.StrictlyMonotonicallyIncreasingDateTimeGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            A new <see cref="T:System.DateTime"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.DateTime"/>; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.StringGenerator">
            <summary>
            Creates string values based on a supplied factory.
            </summary>
        </member>
        <member name="M:AutoFixture.StringGenerator.#ctor(System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.StringGenerator"/> class with the supplied
            specimen factory.
            </summary>
            <param name="specimenFactory">
            A factory that creates a anonymous variables (specimens). The
            <see cref="T:AutoFixture.StringGenerator"/> instance will call <see cref="M:System.Object.ToString"/> on the
            created specimen.
            </param>
        </member>
        <member name="P:AutoFixture.StringGenerator.Factory">
            <summary>
            Gets the factory used to specimens.
            </summary>
            <seealso cref="M:AutoFixture.StringGenerator.#ctor(System.Func{System.Object})"/>
        </member>
        <member name="M:AutoFixture.StringGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates string specimens by invoking the supplied specimen factory and calling
            <see cref="M:System.Object.ToString"/> on the result.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The string representation of a specimen created by the contained specimen factory.
            </returns>
        </member>
        <member name="T:AutoFixture.StringSeedRelay">
            <summary>
            Unwraps a request for a string <see cref="T:AutoFixture.Kernel.SeededRequest"/> to a request for a string and
            prefixes the seed to the result.
            </summary>
        </member>
        <member name="M:AutoFixture.StringSeedRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous string based on a seed.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A string with the seed prefixed to a string created by <paramref name="context"/> if
            possible; otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            This method only returns an instance if a number of conditions are satisfied.
            <paramref name="request"/> must represent a request for a seed string, and
            <paramref name="context"/> must be able to create a string.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.SupportMutableValueTypesCustomization">
            <summary>
            A customization that changes how custom <see langword="struct"/> are generated. Uses <see cref="T:AutoFixture.MutableValueTypeGenerator"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.SupportMutableValueTypesCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes specified fixture by adding <see cref="T:AutoFixture.MutableValueTypeGenerator"/> as a default strategy for
            creating new custom <see langword="struct"/> that has only default constructor.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:AutoFixture.TaskGenerator">
            <summary>
            Creates instances of <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>.
            The status will be set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> and <see cref="P:System.Threading.Tasks.Task`1.Result"/> will be resolved by a given <see cref="T:AutoFixture.Kernel.ISpecimenContext"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.TaskGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates instances of <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>.
            The status will be set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> and <see cref="P:System.Threading.Tasks.Task`1.Result"/> will be resolved by the <paramref name="context"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">The context that will be used to resolve the result value for generic tasks.</param>
            <returns>
            A task whose status is set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            If a generic task was requested, its result was resolved from the <paramref name="context"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.ThrowingRecursionBehavior">
            <summary>
            Decorates a <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> with a <see cref="T:AutoFixture.Kernel.RecursionGuard"/> with <see cref="T:AutoFixture.Kernel.ThrowingRecursionHandler"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.ThrowingRecursionBehavior.Transform(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> with a
            <see cref="T:AutoFixture.Kernel.RecursionGuard"/> with <see cref="T:AutoFixture.Kernel.ThrowingRecursionHandler"/>.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <returns>
            <paramref name="builder"/> decorated with a <see cref="T:AutoFixture.Kernel.RecursionGuard" />.
            </returns>
        </member>
        <member name="T:AutoFixture.TracingBehavior">
            <summary>
            Decorates an <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/> with a <see cref="T:AutoFixture.Kernel.TraceWriter"/> to enable
            tracing for diagnosing how the decorated builder builds up specimens.
            </summary>
        </member>
        <member name="M:AutoFixture.TracingBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.TracingBehavior"/> class with the default
            <see cref="P:AutoFixture.TracingBehavior.Writer"/>, which is <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.TracingBehavior.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.TracingBehavior"/> class with the supplied
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer to which diagnostics is written.</param>
        </member>
        <member name="P:AutoFixture.TracingBehavior.Writer">
            <summary>
            Gets the writer to which diagnostics information is written.
            </summary>
        </member>
        <member name="M:AutoFixture.TracingBehavior.Transform(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied builder with a <see cref="T:AutoFixture.Kernel.TraceWriter"/>.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:AutoFixture.Kernel.TraceWriter"/> that decorates <paramref name="builder"/> using
            <see cref="P:AutoFixture.TracingBehavior.Writer"/>.
            </returns>
        </member>
        <member name="T:AutoFixture.TypeGenerator">
            <summary>
            Generates Type instances.
            </summary>
        </member>
        <member name="M:AutoFixture.TypeGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The <see cref="T:System.Object"/> <see cref="T:System.Type"/> if <paramref name="request"/> is a Type
            Type; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.UInt16SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.UInt16SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.UInt16SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.UInt16SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.UInt16SequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consecutive sequence, if <paramref name="request"/> is a request
            for an unsigned 16-bit integer; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.UInt32SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.UInt32SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.UInt32SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.UInt32SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.UInt32SequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consecutive sequence, if <paramref name="request"/> is a request
            for an unsigned integer; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.UInt64SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:AutoFixture.UInt64SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.UInt64SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.UInt64SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consecutive sequence.</returns>
        </member>
        <member name="M:AutoFixture.UInt64SequenceGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consecutive sequence, if <paramref name="request"/> is a request
            for an unsigned 64-bit integer; otherwise, a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.UnwrapMemberRequest">
            <summary>
            If member request (e.g. PropertyInfo, FieldInfo, ParameterInfo) is passed, extracts the member type
            and uses the inner <see cref="P:AutoFixture.UnwrapMemberRequest.Builder"/> to resolve request value.
            </summary>
        </member>
        <member name="P:AutoFixture.UnwrapMemberRequest.MemberTypeResolver">
            <summary>
            Gets or sets resolver used to extract member type.
            </summary>
        </member>
        <member name="P:AutoFixture.UnwrapMemberRequest.Builder">
            <summary>
            Builder used to resolve the unwrapped member request.
            </summary>
        </member>
        <member name="M:AutoFixture.UnwrapMemberRequest.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Creates a new instance of <see cref="T:AutoFixture.UnwrapMemberRequest"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.UnwrapMemberRequest.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <inheritdoc />
        </member>
        <member name="T:AutoFixture.UriGenerator">
            <summary>
            Creates new <see cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.UriGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.UriScheme">
            <summary>
            Represents a URI scheme name. Scheme names consist of a sequence of characters beginning
            with a letter and followed by any combination of letters, digits, plus ('+'), period ('.'),
            or hyphen ('-').
            </summary>
        </member>
        <member name="M:AutoFixture.UriScheme.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.UriScheme"/> class using "scheme" as the
            default URI scheme name.
            </summary>
        </member>
        <member name="M:AutoFixture.UriScheme.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.UriScheme"/> class.
            </summary>
            <param name="scheme">The scheme name.</param>
        </member>
        <member name="M:AutoFixture.UriScheme.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the URI scheme name for this
            instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the URI scheme name for this instance.
            </returns>
        </member>
        <member name="M:AutoFixture.UriScheme.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:AutoFixture.UriScheme.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="P:AutoFixture.UriScheme.Scheme">
            <summary>
            Gets the scheme name.
            </summary>
        </member>
        <member name="M:AutoFixture.UriScheme.Equals(AutoFixture.UriScheme)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:AutoFixture.UriSchemeGenerator">
            <summary>
            Creates new <see cref="T:AutoFixture.UriScheme"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.UriSchemeGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.Utf8EncodingGenerator">
            <summary>
            Handles creation requests for <see cref="T:System.Text.Encoding"/> instances,
            returning always the same <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.Utf8EncodingGenerator.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Generates a Encoding specimen based on a <see cref="T:System.Text.Encoding"/> type request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            The generated Encoding will always be the same as <see cref="P:System.Text.Encoding.UTF8"/>.
            </remarks>
        </member>
    </members>
</doc>
