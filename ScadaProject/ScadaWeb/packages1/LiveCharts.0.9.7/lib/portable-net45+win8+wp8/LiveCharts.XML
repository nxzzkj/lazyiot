<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiveCharts</name>
    </assembly>
    <members>
        <member name="T:LiveCharts.AxisCore">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.AxisCore.#ctor(LiveCharts.Definitions.Charts.IAxisView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.AxisCore"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.AxisCore.GetFormatter">
            <summary>
            Gets the formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.AxisCore.ClearSeparators">
            <summary>
            Clears the separators.
            </summary>
        </member>
        <member name="M:LiveCharts.AxisCore.InitializeGarbageCollector">
            <summary>
            Initializes the garbage collector.
            </summary>
        </member>
        <member name="P:LiveCharts.AxisCore.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
            <value>
            The chart.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.Labels">
            <summary>
            Gets or sets the labels.
            </summary>
            <value>
            The labels.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.Sections">
            <summary>
            Gets or sets the sections.
            </summary>
            <value>
            The sections.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.LabelFormatter">
            <summary>
            Gets or sets the label formatter.
            </summary>
            <value>
            The label formatter.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>
            The stroke thickness.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.ShowLabels">
            <summary>
            Gets or sets a value indicating whether [show labels].
            </summary>
            <value>
              <c>true</c> if [show labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.DisableAnimations">
            <summary>
            Gets or sets a value indicating whether [disable animations].
            </summary>
            <value>
              <c>true</c> if [disable animations]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.IsMerged">
            <summary>
            Gets or sets a value indicating whether this instance is merged.
            </summary>
            <value>
              <c>true</c> if this instance is merged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.EvaluatesUnitWidth">
            <summary>
            Gets a value indicating whether [evaluates unit width].
            </summary>
            <value>
              <c>true</c> if [evaluates unit width]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.CurrentSeparators">
            <summary>
            Gets the current separators.
            </summary>
            <value>
            The current separators.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.Separator">
            <summary>
            Gets or sets the separator.
            </summary>
            <value>
            The separator.
            </value>
        </member>
        <member name="P:LiveCharts.AxisCore.S">
            <summary>
            Gets the s.
            </summary>
            <value>
            The s.
            </value>
        </member>
        <member name="T:LiveCharts.AxisOrientation">
            <summary>
            Cartesian Axis orientation
            </summary>
        </member>
        <member name="F:LiveCharts.AxisOrientation.None">
            <summary>
            Unknown orientation
            </summary>
        </member>
        <member name="F:LiveCharts.AxisOrientation.X">
            <summary>
            Horizontal (X)
            </summary>
        </member>
        <member name="F:LiveCharts.AxisOrientation.Y">
            <summary>
            Vertical (Y)
            </summary>
        </member>
        <member name="T:LiveCharts.AxisPosition">
            <summary>
            Axis position
            </summary>
        </member>
        <member name="F:LiveCharts.AxisPosition.LeftBottom">
            <summary>
            Left for Y axis, Bottom for X axis
            </summary>
        </member>
        <member name="F:LiveCharts.AxisPosition.RightTop">
            <summary>
            Right for Y axis, Top for X axis
            </summary>
        </member>
        <member name="T:LiveCharts.AxisSectionCore">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.AxisSectionCore.#ctor(LiveCharts.Definitions.Charts.IAxisSectionView,LiveCharts.Charts.ChartCore)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.AxisSectionCore"/> class.
            </summary>
            <param name="view">The view.</param>
            <param name="chart">The chart.</param>
        </member>
        <member name="P:LiveCharts.AxisSectionCore.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:LiveCharts.AxisSectionCore.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:LiveCharts.AxisSectionCore.AxisIndex">
            <summary>
            Gets or sets the index of the axis.
            </summary>
            <value>
            The index of the axis.
            </value>
        </member>
        <member name="P:LiveCharts.AxisSectionCore.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
            <value>
            The chart.
            </value>
        </member>
        <member name="T:LiveCharts.AxisWindow">
            <summary>
            
            </summary>
        </member>
        <member name="T:LiveCharts.IAxisWindow">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.IAxisWindow.IsHeader(System.Double)">
            <summary>
            Determines whether a dateTime is a header
            </summary>
        </member>
        <member name="M:LiveCharts.IAxisWindow.IsSeparator(System.Double)">
            <summary>
            Gets or sets a function to determine whether a dateTime is a separator
            </summary>
        </member>
        <member name="M:LiveCharts.IAxisWindow.FormatAxisLabel(System.Double)">
            <summary>
            Gets or sets a function to format the label for the axis
            </summary>
        </member>
        <member name="P:LiveCharts.IAxisWindow.MinimumSeparatorWidth">
            <summary>
            Gets the minimum reserved space for separators
            </summary>
        </member>
        <member name="T:LiveCharts.AxisWindows">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.AxisWindows.EmptyWindow">
            <summary>
            
            </summary>
        </member>
        <member name="T:LiveCharts.AxisWindows.EmptyAxisWindow">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.AxisWindows.EmptyAxisWindow.IsHeader(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.AxisWindows.EmptyAxisWindow.IsSeparator(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.AxisWindows.EmptyAxisWindow.FormatAxisLabel(System.Double)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.AxisWindows.EmptyAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.BarLabelPosition">
            <summary>
            Describes where a label should be placed
            </summary>
        </member>
        <member name="F:LiveCharts.BarLabelPosition.Top">
            <summary>
            Places a label at the top of a bar
            </summary>
        </member>
        <member name="F:LiveCharts.BarLabelPosition.Merged">
            <summary>
            Places a labels inside the bar
            </summary>
        </member>
        <member name="F:LiveCharts.BarLabelPosition.Parallel">
            <summary>
            Places a labels in a parallel orientation to the bar height.
            </summary>
        </member>
        <member name="F:LiveCharts.BarLabelPosition.Perpendicular">
            <summary>
            Places a labels in a perpendicular orientation to the bar height.
            </summary>
        </member>
        <member name="T:LiveCharts.ChartFunctions">
            <summary>
            Contains useful methods to apply to a chart
            </summary>
        </member>
        <member name="M:LiveCharts.ChartFunctions.ToPlotArea(System.Double,LiveCharts.AxisOrientation,LiveCharts.Charts.ChartCore,System.Int32)">
            <summary>
            Converts from chart values to chart control size.
            </summary>
            <param name="value">value to scale</param>
            <param name="source">axis orientation to scale value at</param>
            <param name="chart">chart model to scale value at</param>
            <param name="axis">axis index in collection of chart.axis</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartFunctions.ToPlotArea(System.Double,LiveCharts.AxisOrientation,LiveCharts.Charts.ChartCore,LiveCharts.AxisCore)">
            <summary>
            Converts from chart values to chart control size.
            </summary>
            <param name="value">value to scale</param>
            <param name="source">axis orientation to scale value at</param>
            <param name="chart">chart model to scale value at</param>
            <param name="axis">axis model instance</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartFunctions.FromPlotArea(System.Double,LiveCharts.AxisOrientation,LiveCharts.Charts.ChartCore,System.Int32)">
            <summary>
            Converts from chart control size to chart values.
            </summary>
            <param name="value">value to scale</param>
            <param name="source">axis orientation to scale value at</param>
            <param name="chart">chart model to scale value at</param>
            <param name="axis">axis index in collection of chart.axis</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartFunctions.ToDrawMargin(System.Double,LiveCharts.AxisOrientation,LiveCharts.Charts.ChartCore,System.Int32)">
            <summary>
            Converts from chart values to chart draw margin size.
            </summary>
            <param name="value">value to scale</param>
            <param name="source">axis orientation</param>
            <param name="chart">chart model to scale the value at</param>
            <param name="axis">axis instance to scale the value at</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartFunctions.ToDrawMargin(System.Double,LiveCharts.AxisOrientation,LiveCharts.Charts.ChartCore,LiveCharts.AxisCore)">
            <summary>
            Converts from chart values to chart draw margin size.
            </summary>
            <param name="value">value to scale</param>
            <param name="source">axis orientation</param>
            <param name="chart">chart model to scale the value at</param>
            <param name="axis">axis instance to scale the value at</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartFunctions.ToDrawMargin(LiveCharts.ChartPoint,System.Int32,System.Int32,LiveCharts.Charts.ChartCore)">
            <summary>
            Converts from chart values to chart draw margin size.
            </summary>
            <param name="point">point to scale</param>
            <param name="axisXIndex">axis orientation</param>
            <param name="axisYIndex">axis instance to scale the value at</param>
            <param name="chart">chart model to scale the value at</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartFunctions.GetUnitWidth(LiveCharts.AxisOrientation,LiveCharts.Charts.ChartCore,System.Int32)">
            <summary>
            Gets the width of a unit in the chart
            </summary>
            <param name="source">axis orientation</param>
            <param name="chart">chart model to get the scale at</param>
            <param name="axis">axis index in the axes collection</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartFunctions.GetUnitWidth(LiveCharts.AxisOrientation,LiveCharts.Charts.ChartCore,LiveCharts.AxisCore)">
            <summary>
            Gets the width of a unit in the chart
            </summary>
            <param name="source">axis orientation</param>
            <param name="chart">chart model to get the scale at</param>
            <param name="axis">axis instance</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartFunctions.GetTooltipData(LiveCharts.ChartPoint,LiveCharts.Charts.ChartCore,LiveCharts.TooltipSelectionMode)">
            <summary>
            Returns data in the chart according to:
            </summary>
            <param name="senderPoint">point that was hovered</param>
            <param name="chart">chart model to get the data from</param>
            <param name="selectionMode">selection mode</param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Charting">
            <summary>
            Global LiveCharts configuration
            </summary>
        </member>
        <member name="M:LiveCharts.Charting.For``1(System.Object,LiveCharts.SeriesOrientation)">
            <summary>
            Saves a type mapper globally.
            </summary>
            <typeparam name="T">Type to configure</typeparam>
            <param name="config">mapper</param>
            <param name="orientation">mapper orientation</param>
        </member>
        <member name="M:LiveCharts.Charting.GetConfig``1(LiveCharts.SeriesOrientation)">
            <summary>
            Gets the configuration of a given type and orientation
            </summary>
            <typeparam name="T">type to look for</typeparam>
            <param name="orientation">orientation to look for</param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.ChartPoint">
            <summary>
            Defines a point in the chart
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.X">
            <summary>
            Gets the X point value
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Y">
            <summary>
            Gets the Y point value
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.XStart">
            <summary>
            Gets the Gantt x start value
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.YStart">
            <summary>
            Gets the Gantt y start value
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Weight">
            <summary>
            Gets the Weight of the point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.From">
            <summary>
            Gets where the stacked value started from
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.To">
            <summary>
            Gets where the stacked value finishes
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Sum">
            <summary>
            Get the total sum of the stacked elements
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Participation">
            <summary>
            Get the participation of the point in the stacked elements
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.StackedParticipation">
            <summary>
            gets the stacked participation of a point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Open">
            <summary>
            Gets the Open value of the point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.High">
            <summary>
            Gets the High value of the point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Low">
            <summary>
            Gets the Low value of the point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Close">
            <summary>
            Gets the Close value of the point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Radius">
            <summary>
            Gets the Radius of a point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Angle">
            <summary>
            Gets the angle of a point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Fill">
            <summary>
            Gets the Fill brush of this point, this property overrides series Fill property 
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Stroke">
            <summary>
            Gets the Stroke brush of this point, this property overrides series Stroke property
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.ChartLocation">
            <summary>
            Gets the coordinate where the value is placed at chart
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Key">
            <summary>
            Gets the index of this point in the chart
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.Instance">
            <summary>
            Gets the object where the chart pulled the point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.View">
            <summary >
            Gets or sets the view of this chart point
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.SeriesView">
            <summary>
            Gets the series where the point belongs to
            </summary>
        </member>
        <member name="P:LiveCharts.ChartPoint.ChartView">
            <summary>
            Gets the chart view.
            </summary>
            <value>
            The chart view.
            </value>
        </member>
        <member name="T:LiveCharts.Charts.CartesianChartCore">
            <summary>
            Chart Model
            </summary>
        </member>
        <member name="T:LiveCharts.Charts.ChartCore">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.#ctor(LiveCharts.Definitions.Charts.IChartView,LiveCharts.ChartUpdater)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Charts.ChartCore"/> class.
            </summary>
            <param name="view">The view.</param>
            <param name="updater">The updater.</param>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.#cctor">
            <summary>
            Initializes the <see cref="T:LiveCharts.Charts.ChartCore"/> class.
            </summary>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.PrepareAxes">
            <summary>
            Prepares the axes.
            </summary>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.RunSpecializedChartComponents">
            <summary>
            Runs the specialized chart components.
            </summary>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.CalculateComponentsAndMargin">
            <summary>
            Calculates the components and margin.
            </summary>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.PlaceLegend(LiveCharts.Dtos.CoreRectangle)">
            <summary>
            Places the legend.
            </summary>
            <param name="drawMargin">The draw margin.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.ZoomIn(LiveCharts.Dtos.CorePoint)">
            <summary>
            Zooms the in.
            </summary>
            <param name="pivot">The pivot.</param>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.ZoomOut(LiveCharts.Dtos.CorePoint)">
            <summary>
            Zooms the out.
            </summary>
            <param name="pivot">The pivot.</param>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.ClearZoom">
            <summary>
            Clears the zoom.
            </summary>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.Drag(LiveCharts.Dtos.CorePoint)">
            <summary>
            Drags the specified delta.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:LiveCharts.Charts.ChartCore.StackPoints(System.Collections.Generic.IEnumerable{LiveCharts.Definitions.Series.ISeriesView},LiveCharts.AxisOrientation,System.Int32,LiveCharts.StackMode)">
            <summary>
            Stacks the points.
            </summary>
            <param name="stackables">The stackables.</param>
            <param name="stackAt">The stack at.</param>
            <param name="stackIndex">Index of the stack.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.Configurations">
            <summary>
            Gets or sets the configurations.
            </summary>
            <value>
            The configurations.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.SeriesInitialized">
            <summary>
            Gets or sets a value indicating whether [series initialized].
            </summary>
            <value>
              <c>true</c> if [series initialized]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.AreComponentsLoaded">
            <summary>
            Gets or sets a value indicating whether [are components loaded].
            </summary>
            <value>
              <c>true</c> if [are components loaded]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.Updater">
            <summary>
            Gets or sets the updater.
            </summary>
            <value>
            The updater.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.ControlSize">
            <summary>
            Gets or sets the size of the control.
            </summary>
            <value>
            The size of the control.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.DrawMargin">
            <summary>
            Gets or sets the draw margin.
            </summary>
            <value>
            The draw margin.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.HasUnitaryPoints">
            <summary>
            Gets or sets a value indicating whether this instance has unitary points.
            </summary>
            <value>
            <c>true</c> if this instance has unitary points; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.RequiresHoverShape">
            <summary>
            Gets a value indicating whether [requires hover shape].
            </summary>
            <value>
              <c>true</c> if [requires hover shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.AxisX">
            <summary>
            Gets or sets the axis x.
            </summary>
            <value>
            The axis x.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.AxisY">
            <summary>
            Gets or sets the axis y.
            </summary>
            <value>
            The axis y.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.XLimit">
            <summary>
            Gets or sets the x limit.
            </summary>
            <value>
            The x limit.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.YLimit">
            <summary>
            Gets or sets the y limit.
            </summary>
            <value>
            The y limit.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.WLimit">
            <summary>
            Gets or sets the w limit.
            </summary>
            <value>
            The w limit.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.CurrentColorIndex">
            <summary>
            Gets or sets the index of the current color.
            </summary>
            <value>
            The index of the current color.
            </value>
        </member>
        <member name="P:LiveCharts.Charts.ChartCore.PanOrigin">
            <summary>
            Gets or sets the pan origin.
            </summary>
            <value>
            The pan origin.
            </value>
        </member>
        <member name="M:LiveCharts.Charts.CartesianChartCore.#ctor(LiveCharts.Definitions.Charts.IChartView,LiveCharts.ChartUpdater)">
            <summary>
            Initializes Chart model
            </summary>
            <param name="view">The view.</param>
            <param name="updater">The updater.</param>
        </member>
        <member name="M:LiveCharts.Charts.CartesianChartCore.PrepareAxes">
            <summary>
            Prepares Chart Axes
            </summary>
        </member>
        <member name="M:LiveCharts.Charts.CartesianChartCore.RunSpecializedChartComponents">
            <summary>
            Runs the specialized chart components.
            </summary>
        </member>
        <member name="M:LiveCharts.Charts.CartesianChartCore.DrawOrUpdateSections">
            <summary>
            Draws the or update sections.
            </summary>
        </member>
        <member name="T:LiveCharts.Charts.PieChartCore">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Charts.ChartCore"/>
        </member>
        <member name="M:LiveCharts.Charts.PieChartCore.#ctor(LiveCharts.Definitions.Charts.IChartView,LiveCharts.ChartUpdater)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Charts.PieChartCore"/> class.
            </summary>
            <param name="view">The view.</param>
            <param name="updater">The updater.</param>
        </member>
        <member name="M:LiveCharts.Charts.PieChartCore.PrepareAxes">
            <summary>
            Prepares the axes.
            </summary>
            <exception cref="T:LiveCharts.Helpers.LiveChartsException">There is a invalid series in the series collection, " +
                                "verify that all the series implement IPieSeries.</exception>
        </member>
        <member name="T:LiveCharts.ChartUpdater">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.ChartUpdater.Run(System.Boolean,System.Boolean)">
            <summary>
            Runs the specified restart view.
            </summary>
            <param name="restartView">if set to <c>true</c> [restart view].</param>
            <param name="updateNow">if set to <c>true</c> [update now].</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LiveCharts.ChartUpdater.UpdateFrequency(System.TimeSpan)">
            <summary>
            Updates the frequency.
            </summary>
            <param name="freq">The freq.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LiveCharts.ChartUpdater.Update(System.Boolean,System.Boolean)">
            <summary>
            Updates the specified restarts animations.
            </summary>
            <param name="restartsAnimations">if set to <c>true</c> [restarts animations].</param>
            <param name="force"></param>
        </member>
        <member name="P:LiveCharts.ChartUpdater.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
            <value>
            The chart.
            </value>
        </member>
        <member name="P:LiveCharts.ChartUpdater.IsUpdating">
            <summary>
            Gets or sets a value indicating whether this instance is updating.
            </summary>
            <value>
            <c>true</c> if this instance is updating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.ChartUpdater.RestartViewRequested">
            <summary>
            Gets or sets a value indicating whether [restart view requested].
            </summary>
            <value>
            <c>true</c> if [restart view requested]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:LiveCharts.ChartValues`1">
            <summary>
            Creates a collection of chart values
            </summary>
            <typeparam name="T">Type to plot, notice you could need to configure the type.</typeparam>
        </member>
        <member name="T:LiveCharts.Helpers.NoisyCollection`1">
            <summary>
            A collection that notifies every time a value is added or removed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LiveCharts.Helpers.INoisyCollection">
            <summary>
            
            </summary>
            <seealso cref="T:System.Collections.IList"/>
        </member>
        <member name="M:LiveCharts.Helpers.INoisyCollection.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds the range.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:LiveCharts.Helpers.INoisyCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">The index.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="E:LiveCharts.Helpers.INoisyCollection.NoisyCollectionChanged">
            <summary>
            Occurs when [noisy collection changed].
            </summary>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.#ctor">
            <summary>
            Initializes a new instance of NoisyCollection class
            </summary>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of NoisyCollection class with a given collection
            </summary>
            <param name="collection">given collection</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of NoisiCollection class with a given capacity
            </summary>
            <param name="capacity">given capacity</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.GetEnumerator">
            <summary>
            Enumerates the collection
            </summary>
            <returns>collection enumeration</returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the collection
            </summary>
            <returns>collection enumeration</returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an object to the collection, and notifies the change
            </summary>
            <param name="value">item to add</param>
            <returns>number of items in the collection</returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.Add(`0)">
            <summary>
            Add an item to the collection, and notifies the change
            </summary>
            <returns>number of items in the collection</returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds many items to the collection, and notifies the change
            </summary>
            <param name="items">collection to add</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds many items to the collection, and notifies the change
            </summary>
            <param name="items">collection to add</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item in a specific index, then notifies the change
            </summary>
            <param name="index">index to insert at</param>
            <param name="item">item to insert</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.Insert(System.Int32,System.Object)">
            <summary>
            Insert an item in a specific index, then notifies the change
            </summary>
            <param name="index">index to insert at</param>
            <param name="value">item to insert</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Insert a range of values, starting in a specific index, then notifies the change
            </summary>
            <param name="index">index to start at</param>
            <param name="collection">collection to insert</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert a range of values, starting in a specific index, then notifies the change
            </summary>
            <param name="index">index to start at</param>
            <param name="collection">collection to insert</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.Remove(System.Object)">
            <summary>
            Removes an item from a collection, then notifies the change
            </summary>
            <param name="value">item to remove</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.Remove(`0)">
            <summary>
            Remove an item from a collection, then notifies the change
            </summary>
            <param name="item">item to remove</param>
            <returns>number of items in the collection</returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specific index, then notifies the change
            </summary>
            <param name="index">index to remove at</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specific index, then notifies the change
            </summary>
            <param name="index">index to remove at</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specific index, then notifies the change
            </summary>
            <param name="index">index to remove at</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.System#Collections#IList#Clear">
            <summary>
            Removes all the items from the collection, then notifies the change
            </summary>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Removes all the items from the collection, then notifies the change
            </summary>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.Clear">
            <summary>
            Removes all the items from the collection, then notifies the change
            </summary>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.Contains(System.Object)">
            <summary>
            Evaluates whether an item is in this collection
            </summary>
            <param name="value">object to look for</param>
            <returns>evaluation</returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.Contains(`0)">
            <summary>
            Evaluates whether an item is in this collection
            </summary>
            <param name="item">item to look for</param>
            <returns>evaluation</returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to another array
            </summary>
            <param name="array">backup array</param>
            <param name="index">array index</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to another array
            </summary>
            <param name="array">backup array</param>
            <param name="index">array index</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.IndexOf(System.Object)">
            <summary>
            Returns the index of an item in the collection
            </summary>
            <param name="value">item to look for</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of an item in the collection
            </summary>
            <param name="item">item to look for</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:LiveCharts.Helpers.NoisyCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:LiveCharts.Helpers.NoisyCollection`1.CollectionReset">
            <summary>
            Occurs when [collection reset].
            </summary>
        </member>
        <member name="E:LiveCharts.Helpers.NoisyCollection`1.LiveCharts#Helpers#INoisyCollection#NoisyCollectionChanged">
            <summary>
            Occurs when [noisy collection changed].
            </summary>
        </member>
        <member name="E:LiveCharts.Helpers.NoisyCollection`1.NoisyCollectionChanged">
            <summary>
            Occurs when [noisy collection changed].
            </summary>
        </member>
        <member name="E:LiveCharts.Helpers.NoisyCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:LiveCharts.Helpers.NoisyCollection`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:LiveCharts.Helpers.NoisyCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:LiveCharts.Helpers.NoisyCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets an item from/in a specific index
            </summary>
            <param name="index">index to get/set</param>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Helpers.NoisyCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets an item from/in a specific index
            </summary>
            <param name="index">index to get/set</param>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Helpers.NoisyCollection`1.Count">
            <summary>
            Gets the number of items in the array
            </summary>
            <returns>items count</returns>
        </member>
        <member name="P:LiveCharts.Helpers.NoisyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets whether the collection is read only
            </summary>
            <returns>result</returns>
        </member>
        <member name="P:LiveCharts.Helpers.NoisyCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets the number of items in the array
            </summary>
            <returns>result</returns>
        </member>
        <member name="P:LiveCharts.Helpers.NoisyCollection`1.IsSynchronized">
            <summary>
            Gets whether the collection is synchronized
            </summary>
            <returns>result</returns>
        </member>
        <member name="P:LiveCharts.Helpers.NoisyCollection`1.SyncRoot">
            <summary>
            Gets the collections's sync root
            </summary>
        </member>
        <member name="P:LiveCharts.Helpers.NoisyCollection`1.IsFixedSize">
            <summary>
            Gets whether the collection is fixed
            </summary>
        </member>
        <member name="T:LiveCharts.IChartValues">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Helpers.INoisyCollection"/>
        </member>
        <member name="M:LiveCharts.IChartValues.Initialize(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Forces values to calculate max, min and index data.
            </summary>
        </member>
        <member name="M:LiveCharts.IChartValues.GetPoints(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Gets the current chart points in the view, the view is required as an argument, because an instance of IChartValues could hold many ISeriesView instances.
            </summary>
            <param name="seriesView">The series view</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.IChartValues.InitializeStep(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes the garbage collector
            </summary>
        </member>
        <member name="M:LiveCharts.IChartValues.CollectGarbage(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Removes all unnecessary points from the view
            </summary>
        </member>
        <member name="M:LiveCharts.IChartValues.GetTracker(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Gets series that owns the values
            </summary>
        </member>
        <member name="M:LiveCharts.ChartValues`1.#ctor">
            <summary>
            Initializes a new instance of chart values
            </summary>
        </member>
        <member name="M:LiveCharts.ChartValues`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of chart values, with a given collection
            </summary>
        </member>
        <member name="M:LiveCharts.ChartValues`1.Initialize(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Evaluates the limits in the chart values
            </summary>
        </member>
        <member name="M:LiveCharts.ChartValues`1.GetPoints(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Gets the current chart points in the view, the view is required as an argument, because an instance of IChartValues could hold many ISeriesView instances.
            </summary>
            <param name="seriesView">The series view</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.ChartValues`1.InitializeStep(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes the garbage collector
            </summary>
        </member>
        <member name="M:LiveCharts.ChartValues`1.CollectGarbage(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Collects the unnecessary values 
            </summary>
        </member>
        <member name="M:LiveCharts.ChartValues`1.GetTracker(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Gets series that owns the values
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Configurations.CartesianMapper`1">
            <summary>
            Mapper to configure X and Y points
            </summary>
            <typeparam name="T">Type to configure</typeparam>
        </member>
        <member name="T:LiveCharts.Configurations.IPointEvaluator`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LiveCharts.Configurations.IPointEvaluator`1.Evaluate(System.Int32,`0,LiveCharts.ChartPoint)">
            <summary>
            Evaluates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.Evaluate(System.Int32,`0,LiveCharts.ChartPoint)">
            <summary>
            Sets values for a specific point
            </summary>
            <param name="point">Point to set</param>
            <param name="value"></param>
            <param name="key"></param>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.X(System.Func{`0,System.Double})">
            <summary>
            Sets the X mapper
            </summary>
            <param name="predicate">function that pulls X coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.X(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the X mapper
            </summary>
            <param name="predicate">function that pulls X coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.Y(System.Func{`0,System.Double})">
            <summary>
            Sets the Y mapper
            </summary>
            <param name="predicate">function that pulls Y coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.Y(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the Y mapper
            </summary>
            <param name="predicate">function that pulls Y coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.Stroke(System.Func{`0,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.Stroke(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.Fill(System.Func{`0,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.CartesianMapper`1.Fill(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Configurations.FinancialMapper`1">
            <summary>
            Mapper to configure financial points
            </summary>
            <typeparam name="T">type to configure</typeparam>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Evaluate(System.Int32,`0,LiveCharts.ChartPoint)">
            <summary>
            Sets values for a specific point
            </summary>
            <param name="point">Point to set</param>
            <param name="value"></param>
            <param name="key"></param>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.X(System.Func{`0,System.Double})">
            <summary>
            Maps X value
            </summary>
            <param name="predicate">function that pulls X coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.X(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Maps X value
            </summary>
            <param name="predicate">function that pulls X coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Y(System.Func{`0,System.Double})">
            <summary>
            Maps Y value
            </summary>
            <param name="predicate">function that pulls Y coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Y(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Maps Y value
            </summary>
            <param name="predicate">function that pulls Y coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Open(System.Func{`0,System.Double})">
            <summary>
            Maps Open value
            </summary>
            <param name="predicate">function that pulls open value</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Open(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Maps Open value
            </summary>
            <param name="predicate">function that pulls open value, value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.High(System.Func{`0,System.Double})">
            <summary>
            Maps High value
            </summary>
            <param name="predicate">function that pulls High value</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.High(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Maps High value
            </summary>
            <param name="predicate">function that pulls High value</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Close(System.Func{`0,System.Double})">
            <summary>
            Maps Close value
            </summary>
            <param name="predicate">function that pulls close value</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Close(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Maps Close value
            </summary>
            <param name="predicate">function that pulls close value, value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Low(System.Func{`0,System.Double})">
            <summary>
            Maps Low value
            </summary>
            <param name="predicate">function that pulls low value</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.FinancialMapper`1.Low(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Maps Low value
            </summary>
            <param name="predicate">function that pulls low value, index and value as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="T:LiveCharts.Configurations.GanttMapper`1">
            <summary>
            Mapper to configure X and Y points
            </summary>
            <typeparam name="T">Type to configure</typeparam>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.Evaluate(System.Int32,`0,LiveCharts.ChartPoint)">
            <summary>
            Sets values for a specific point
            </summary>
            <param name="point">Point to set</param>
            <param name="value"></param>
            <param name="key"></param>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.X(System.Func{`0,System.Double})">
            <summary>
            Sets the X mapper
            </summary>
            <param name="predicate">function that pulls X coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.X(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the X mapper
            </summary>
            <param name="predicate">function that pulls X coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.XStart(System.Func{`0,System.Double})">
            <summary>
            Sets the XStart mapper
            </summary>
            <param name="predicate">function that pulls X coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.XStart(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the XStart mapper
            </summary>
            <param name="predicate">function that pulls X coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.Y(System.Func{`0,System.Double})">
            <summary>
            Sets the Y mapper
            </summary>
            <param name="predicate">function that pulls Y coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.Y(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the Y mapper
            </summary>
            <param name="predicate">function that pulls Y coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.YStart(System.Func{`0,System.Double})">
            <summary>
            Sets the YStart mapper
            </summary>
            <param name="predicate">function that pulls Y coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.YStart(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the YStart mapper
            </summary>
            <param name="predicate">function that pulls Y coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.Stroke(System.Func{`0,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.Stroke(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.Fill(System.Func{`0,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.GanttMapper`1.Fill(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Configurations.Mappers">
            <summary>
            Gets the already built point mappers
            </summary>
        </member>
        <member name="M:LiveCharts.Configurations.Mappers.Xy``1">
            <summary>
            Gets a mapper to configure X, Y points
            </summary>
            <typeparam name="T">Type to map</typeparam>
            <returns>A new cartesian mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.Mappers.Financial``1">
            <summary>
            Gets a mapper to configure financial points
            </summary>
            <typeparam name="T">type to map</typeparam>
            <returns>a new financial mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.Mappers.Weighted``1">
            <summary>
            Gets a mapper to configure X, Y and Weight points
            </summary>
            <typeparam name="T">type to map</typeparam>
            <returns>a new weighted mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.Mappers.Gantt``1">
            <summary>
            Gets a Gantt Mapper
            </summary>
            <typeparam name="T">type to amp</typeparam>
            <returns>a new polar mapper insance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.Mappers.Polar``1">
            <summary>
            Gets a mapper to configure Radius and Angle
            </summary>
            <typeparam name="T">type to amp</typeparam>
            <returns>a new polar mapper insance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.Mappers.Pie``1">
            <summary>
            PGets a mapper to configure a pie chart
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Configurations.PieMapper`1">
            <summary>
            Mapper to configure X and Y points
            </summary>
            <typeparam name="T">Type to configure</typeparam>
        </member>
        <member name="M:LiveCharts.Configurations.PieMapper`1.Evaluate(System.Int32,`0,LiveCharts.ChartPoint)">
            <summary>
            Sets values for a specific point
            </summary>
            <param name="point">Point to set</param>
            <param name="value"></param>
            <param name="key"></param>
        </member>
        <member name="M:LiveCharts.Configurations.PieMapper`1.Value(System.Func{`0,System.Double})">
            <summary>
            Sets the Y mapper
            </summary>
            <param name="predicate">function that pulls Y coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.PieMapper`1.Value(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the Y mapper
            </summary>
            <param name="predicate">function that pulls Y coordinate, with value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.PieMapper`1.Stroke(System.Func{`0,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.PieMapper`1.Stroke(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.PieMapper`1.Fill(System.Func{`0,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.PieMapper`1.Fill(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Configurations.PolarMapper`1">
            <summary>
            Mapper to configure polar series
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Evaluate(System.Int32,`0,LiveCharts.ChartPoint)">
            <summary>
            Sets values for a specific point
            </summary>
            <param name="point">Point to set</param>
            <param name="value"></param>
            <param name="key"></param>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Radius(System.Func{`0,System.Double})">
            <summary>
            Maps X value
            </summary>
            <param name="predicate">function that pulls the radius value</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Radius(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Maps X value
            </summary>
            <param name="predicate">function that pulls the radius value, value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Angle(System.Func{`0,System.Double})">
            <summary>
            Maps Y value
            </summary>
            <param name="predicate">function that pulls the angle value</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Angle(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Maps Y value
            </summary>
            <param name="predicate">function that pulls the angle value, value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Stroke(System.Func{`0,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Stroke(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Fill(System.Func{`0,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.PolarMapper`1.Fill(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Configurations.WeightedMapper`1">
            <summary>
            Mapper to configure Bubble points
            </summary>
            <typeparam name="T">type to configure</typeparam>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Evaluate(System.Int32,`0,LiveCharts.ChartPoint)">
            <summary>
            Sets values for a specific point
            </summary>
            <param name="point">Point to set</param>
            <param name="value"></param>
            <param name="key"></param>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.X(System.Func{`0,System.Double})">
            <summary>
            Sets the X mapper
            </summary>
            <param name="predicate">function that pulls the X coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.X(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the X mapper
            </summary>
            <param name="predicate">function that pulls the X coordinate, value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Y(System.Func{`0,System.Double})">
            <summary>
            Sets the Y mapper
            </summary>
            <param name="predicate">function that pulls the Y coordinate</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Y(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets the Y mapper
            </summary>
            <param name="predicate">function that pulls the Y coordinate, value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Weight(System.Func{`0,System.Double})">
            <summary>
            Sets Weight mapper
            </summary>
            <param name="predicate">function that pulls the point's weight</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Weight(System.Func{`0,System.Int32,System.Double})">
            <summary>
            Sets Weight mapper
            </summary>
            <param name="predicate">function that pulls the point's weight, value and index as parameters</param>
            <returns>current mapper instance</returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Stroke(System.Func{`0,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Stroke(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Stroke of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Fill(System.Func{`0,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Configurations.WeightedMapper`1.Fill(System.Func{`0,System.Int32,System.Object})">
            <summary>
            Sets the Fill of the point
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.DataLabelViewModel">
            <summary>
            Describes a data label view model
            </summary>
        </member>
        <member name="P:LiveCharts.DataLabelViewModel.FormattedText">
            <summary>
            Gets or sets the formatted text of the current point
            </summary>
            <value>
            The formatted text.
            </value>
        </member>
        <member name="P:LiveCharts.DataLabelViewModel.Point">
            <summary>
            Gets the instance of the current point.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:LiveCharts.DateAxisCore">
            <summary>
            
            </summary>
        </member>
        <member name="T:LiveCharts.WindowAxisCore">
            <summary>
            Provides an axis that displays separators based upon configured windows
            </summary>
        </member>
        <member name="M:LiveCharts.WindowAxisCore.#ctor(LiveCharts.Definitions.Charts.IAxisView)">
            <summary>
            
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:LiveCharts.WindowAxisCore.PrepareChart(LiveCharts.AxisOrientation,LiveCharts.Charts.ChartCore)">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.WindowAxisCore.Windows">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.DateAxisCore.#ctor(LiveCharts.Definitions.Charts.IWindowAxisView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.DateAxisCore"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.DateAxisCore.GetFormatter">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindow.TryGetSeparatorIndices(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Collections.Generic.IEnumerable{System.Double}@)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.DateAxisWindow.Validate(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="seperatorDistance"></param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.DateAxisWindow.IsHeader(System.DateTime)">
            <summary>
            Determines whether a dateTime is a header
            </summary>
        </member>
        <member name="M:LiveCharts.DateAxisWindow.IsSeparator(System.DateTime)">
            <summary>
            Gets or sets a function to determine whether a dateTime is a separator
            </summary>
        </member>
        <member name="M:LiveCharts.DateAxisWindow.FormatAxisLabel(System.DateTime)">
            <summary>
            Gets or sets a function to format the label for the axis
            </summary>
        </member>
        <member name="T:LiveCharts.DateAxisWindows">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.DateAxisWindows.GetDateAxisWindows">
            <summary>
            Gets preconfigured windows that can be used to build a datetime window axis
            </summary>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.DateAxisWindows.MilliSecondAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MilliSecondAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MilliSecondAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MilliSecondAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MilliSecondAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.MilliSecondAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.TenMilliSecondAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.TenMilliSecondAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.TenMilliSecondAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.TenMilliSecondAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.TenMilliSecondAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.TenMilliSecondAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.HundredMilliSecondAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HundredMilliSecondAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HundredMilliSecondAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HundredMilliSecondAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HundredMilliSecondAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.HundredMilliSecondAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.SecondAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.SecondAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.SecondAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.SecondAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.SecondAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.SecondAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.FifteenSecondsAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.FifteenSecondsAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.FifteenSecondsAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.FifteenSecondsAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.FifteenSecondsAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.FifteenSecondsAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.ThirtySecondsAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.ThirtySecondsAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.ThirtySecondsAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.ThirtySecondsAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.ThirtySecondsAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.ThirtySecondsAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.MinuteAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MinuteAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MinuteAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MinuteAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MinuteAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.MinuteAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.QuarterAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.QuarterAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.QuarterAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.QuarterAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.QuarterAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.QuarterAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.HalfHourAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HalfHourAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HalfHourAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HalfHourAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HalfHourAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.HalfHourAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.HourAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HourAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HourAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HourAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.HourAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.HourAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.DayAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.DayAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.DayAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.DayAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.DayAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.DayAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.WeekAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.WeekAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.WeekAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.WeekAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.WeekAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.MonthAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MonthAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MonthAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MonthAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MonthAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.MonthAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.YearAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.YearAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.YearAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.YearAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.YearAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.YearAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.DecadeAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.DecadeAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.DecadeAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.DecadeAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.DecadeAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.DecadeAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.CenturyAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.CenturyAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.CenturyAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.CenturyAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.CenturyAxisWindow.Validate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.CenturyAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateAxisWindows.MillenniumAxisWindow">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MillenniumAxisWindow.IsHeader(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MillenniumAxisWindow.IsSeparator(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:LiveCharts.DateAxisWindows.MillenniumAxisWindow.FormatAxisLabel(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="P:LiveCharts.DateAxisWindows.MillenniumAxisWindow.MinimumSeparatorWidth">
            <inheritdoc />
        </member>
        <member name="T:LiveCharts.DateSeparatorElementCore">
            <summary>
            
            </summary>
        </member>
        <member name="T:LiveCharts.SeparatorElementCore">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.SeparatorElementCore.IsNew">
            <summary>
            Gets or sets a value indicating whether this instance is new.
            </summary>
            <value>
              <c>true</c> if this instance is new; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.SeparatorElementCore.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:LiveCharts.SeparatorElementCore.GarbageCollectorIndex">
            <summary>
            Gets or sets the index of the garbage collector.
            </summary>
            <value>
            The index of the garbage collector.
            </value>
        </member>
        <member name="P:LiveCharts.SeparatorElementCore.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:LiveCharts.SeparatorElementCore.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:LiveCharts.SeparatorElementCore.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:LiveCharts.DateSeparatorElementCore.IsHeader">
            <summary>
            Gets or sets a value indicating whether this separator is a header separator
            </summary>
        </member>
        <member name="T:LiveCharts.Defaults.DateTimePoint">
            <summary>
            An already configured chart point with a date time and a double properties, this class notifies the chart to update every time a property changes
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.DateTimePoint.#ctor">
            <summary>
            Initializes a new instance of DateTimePoint class
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.DateTimePoint.#ctor(System.DateTime,System.Double)">
            <summary>
            Initializes a new instance of DateTimePoint class, giving date time and value
            </summary>
            <param name="dateTime"></param>
            <param name="value"></param>
        </member>
        <member name="M:LiveCharts.Defaults.DateTimePoint.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:LiveCharts.Defaults.DateTimePoint.DateTime">
            <summary>
            DateTime Property
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.DateTimePoint.Value">
            <summary>
            The Value property
            </summary>
        </member>
        <member name="E:LiveCharts.Defaults.DateTimePoint.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:LiveCharts.Defaults.GanttPoint">
            <summary>
            Defines a Gantt point in a cartesian chart
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.GanttPoint.#ctor">
            <summary>
            Initializes a new instance of GanttPoint class.
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.GanttPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of GanttPoint class with given start and end points.
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.GanttPoint.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:LiveCharts.Defaults.GanttPoint.StartPoint">
            <summary>
            Gets or sets point start
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.GanttPoint.EndPoint">
            <summary>
            Gets or sets point end
            </summary>
        </member>
        <member name="E:LiveCharts.Defaults.GanttPoint.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:LiveCharts.Defaults.HeatPoint">
            <summary>
            An already configured weighted chart point, this class notifies the chart to update every time a property changes
            </summary>
        </member>
        <member name="T:LiveCharts.Defaults.ScatterPoint">
            <summary>
            An already configured weighted chart point, this class notifies the chart to update every time a property changes
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.ScatterPoint.#ctor">
            <summary>
            Creates a new instance of BubblePoint class
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.ScatterPoint.#ctor(System.Double,System.Double)">
            <summary>
            Create a new instance of BubblePoint class, giving x and y coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:LiveCharts.Defaults.ScatterPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of BubblePoint class, giving x, y and weight
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="weight"></param>
        </member>
        <member name="M:LiveCharts.Defaults.ScatterPoint.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:LiveCharts.Defaults.ScatterPoint.X">
            <summary>
            X coordinate in the chart
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.ScatterPoint.Y">
            <summary>
            Y coordinate in the chart
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.ScatterPoint.Weight">
            <summary>
            Point's weight
            </summary>
        </member>
        <member name="E:LiveCharts.Defaults.ScatterPoint.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.HeatPoint.#ctor">
            <summary>
            Initializes a new instance of HeatPoint class
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.HeatPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            _initializes a new instance of HeatPoint class, giving x, y and weight
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="weight"></param>
        </member>
        <member name="T:LiveCharts.Defaults.ObservablePoint">
            <summary>
            An already configured chart point, this class notifies a chart to update every time a property changes
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.ObservablePoint.#ctor">
            <summary>
            Initializes a new instance of ObservablePoint class
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.ObservablePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of ObservablePoint class giving the x and y coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:LiveCharts.Defaults.ObservablePoint.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:LiveCharts.Defaults.ObservablePoint.X">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.ObservablePoint.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="E:LiveCharts.Defaults.ObservablePoint.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:LiveCharts.Defaults.ObservableValue">
            <summary>
            An already configured chart point, this class notifies the chart to update every time the value property changes
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.ObservableValue.#ctor">
            <summary>
            Initializes a new instance of ObservableValue class
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.ObservableValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of ObservableValue class with a given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LiveCharts.Defaults.ObservableValue.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:LiveCharts.Defaults.ObservableValue.Value">
            <summary>
            Value in he chart
            </summary>
        </member>
        <member name="E:LiveCharts.Defaults.ObservableValue.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:LiveCharts.Defaults.OhlcPoint">
            <summary>
            An already configured chart point, this class notifies the chart to update every time a property changes
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.OhlcPoint.#ctor">
            <summary>
            Initializes a new instance of OhclPoint class
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.OhlcPoint.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance o OhclPointc class, giving open, high, low and close values
            </summary>
            <param name="open"></param>
            <param name="high"></param>
            <param name="low"></param>
            <param name="close"></param>
        </member>
        <member name="M:LiveCharts.Defaults.OhlcPoint.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:LiveCharts.Defaults.OhlcPoint.Open">
            <summary>
            The open value i the chart
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.OhlcPoint.High">
            <summary>
            The high value in the chart
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.OhlcPoint.Low">
            <summary>
            The low value in the chart
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.OhlcPoint.Close">
            <summary>
            The close value in the chart
            </summary>
        </member>
        <member name="E:LiveCharts.Defaults.OhlcPoint.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:LiveCharts.Defaults.PolarPoint">
            <summary>
            An already configured chart point, this class notifies the chart to update every time a property changes
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.PolarPoint.#ctor">
            <summary>
            Initializes a new instance of PolarPoint class
            </summary>
        </member>
        <member name="M:LiveCharts.Defaults.PolarPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of PolarPoint class, giving angle and radius
            </summary>
            <param name="radius"></param>
            <param name="angle"></param>
        </member>
        <member name="M:LiveCharts.Defaults.PolarPoint.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:LiveCharts.Defaults.PolarPoint.Radius">
            <summary>
            The radius of the point
            </summary>
        </member>
        <member name="P:LiveCharts.Defaults.PolarPoint.Angle">
            <summary>
            The angle of the point
            </summary>
        </member>
        <member name="E:LiveCharts.Defaults.PolarPoint.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.IAxisSectionView">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisSectionView.DrawOrMove(LiveCharts.AxisOrientation,System.Int32)">
            <summary>
            Draws the or move.
            </summary>
            <param name="source">The source.</param>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisSectionView.Remove">
            <summary>
            Removes this instance.
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisSectionView.AsCoreElement(LiveCharts.AxisCore,LiveCharts.AxisOrientation)">
            <summary>
            Ases the core element.
            </summary>
            <param name="axis">The axis.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisSectionView.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisSectionView.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisSectionView.SectionWidth">
            <summary>
            Gets or sets the width of the section.
            </summary>
            <value>
            The width of the section.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisSectionView.SectionOffset">
            <summary>
            Gets or sets the section offset.
            </summary>
            <value>
            The section offset.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisSectionView.Draggable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:LiveCharts.Definitions.Charts.IAxisSectionView"/> is draggable.
            </summary>
            <value>
              <c>true</c> if draggable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisSectionView.DisableAnimations">
            <summary>
            Gets or sets a value indicating whether the section is animated
            </summary>
            <value>
              <c>true</c> if [disable animations]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisSectionView.DataLabel">
            <summary>
            Gets or sets a value indicating whether the section should display a label that displays its current value.
            </summary>
            <value>
              <c>true</c> if [data label]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.IAxisView">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.UpdateTitle(LiveCharts.Charts.ChartCore,System.Double)">
            <summary>
            Updates the title.
            </summary>
            <param name="chart">The chart.</param>
            <param name="rotationAngle">The rotation angle.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.SetTitleTop(System.Double)">
            <summary>
            Sets the title top.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.SetTitleLeft(System.Double)">
            <summary>
            Sets the title left.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.GetTitleLeft">
            <summary>
            Gets the title left.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.GetTileTop">
            <summary>
            Gets the tile top.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.GetLabelSize">
            <summary>
            Gets the size of the label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.AsCoreElement(LiveCharts.Charts.ChartCore,LiveCharts.AxisOrientation)">
            <summary>
            Ases the core element.
            </summary>
            <param name="chart">The chart.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.RenderSeparator(LiveCharts.SeparatorElementCore,LiveCharts.Charts.ChartCore)">
            <summary>
            Renders the separator.
            </summary>
            <param name="model">The model.</param>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.Clean">
            <summary>
            Cleans this instance.
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IAxisView.SetRange(System.Double,System.Double)">
            <summary>
            Sets the range.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.DisableAnimations">
            <summary>
            Gets or sets a value indicating whether [disable animations].
            </summary>
            <value>
              <c>true</c> if [disable animations]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.ShowLabels">
            <summary>
            Gets or sets a value indicating whether [show labels].
            </summary>
            <value>
              <c>true</c> if [show labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.MinRange">
            <summary>
            Gets or sets the minimum range.
            </summary>
            <value>
            The minimum range.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.MaxRange">
            <summary>
            Gets or sets the maximum range.
            </summary>
            <value>
            The maximum range.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.LabelsRotation">
            <summary>
            Gets or sets the labels rotation.
            </summary>
            <value>
            The labels rotation.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.IsMerged">
            <summary>
            Gets or sets a value indicating whether this instance is merged.
            </summary>
            <value>
              <c>true</c> if this instance is merged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.Unit">
            <summary>
            Gets or sets the bar unit.
            </summary>
            <value>
            The bar unit.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.BarUnit">
            <summary>
            Gets or sets the bar unit.
            </summary>
            <value>
            The bar unit.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.PreviousMaxValue">
            <summary>
            Gets the previous maximum value.
            </summary>
            <value>
            The previous maximum value.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.PreviousMinValue">
            <summary>
            Gets the previous minimum value.
            </summary>
            <value>
            The previous minimum value.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IAxisView.AxisOrientation">
            <summary>
            Gets the axis orientation.
            </summary>
            <value>
            The axis orientation.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.ICartesianChart">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Charts.IChartView"/>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.IChartView">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.SetDrawMarginTop(System.Double)">
            <summary>
            Sets the draw margin top.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.SetDrawMarginLeft(System.Double)">
            <summary>
            Sets the draw margin left.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.SetDrawMarginHeight(System.Double)">
            <summary>
            Sets the height of the draw margin.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.SetDrawMarginWidth(System.Double)">
            <summary>
            Sets the width of the draw margin.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.AddToView(System.Object)">
            <summary>
            Adds to view.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.AddToDrawMargin(System.Object)">
            <summary>
            Adds to draw margin.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.RemoveFromView(System.Object)">
            <summary>
            Removes from view.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.RemoveFromDrawMargin(System.Object)">
            <summary>
            Removes from draw margin.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.EnsureElementBelongsToCurrentView(System.Object)">
            <summary>
            Ensures the element belongs to current view.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.EnsureElementBelongsToCurrentDrawMargin(System.Object)">
            <summary>
            Ensures the element belongs to current draw margin.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.HideTooltip">
            <summary>
            Hides the tooltip.
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.ShowLegend(LiveCharts.Dtos.CorePoint)">
            <summary>
            Shows the legend.
            </summary>
            <param name="at">At.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.HideLegend">
            <summary>
            Hides the legend.
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.LoadLegend">
            <summary>
            Loads the legend.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.MapXAxes(LiveCharts.Charts.ChartCore)">
            <summary>
            Maps the x axes.
            </summary>
            <param name="chart">The chart.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.IChartView.MapYAxes(LiveCharts.Charts.ChartCore)">
            <summary>
            Maps the y axes.
            </summary>
            <param name="chart">The chart.</param>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="E:LiveCharts.Definitions.Charts.IChartView.DataClick">
            <summary>
            Occurs when [data click].
            </summary>
        </member>
        <member name="E:LiveCharts.Definitions.Charts.IChartView.DataHover">
            <summary>
            Occurs when [data hover]
            </summary>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.Series">
            <summary>
            Gets or sets the series.
            </summary>
            <value>
            The series.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.ActualSeries">
            <summary>
            Gets the actual series.
            </summary>
            <value>
            The actual series.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.TooltipTimeout">
            <summary>
            Gets or sets the tooltip timeout.
            </summary>
            <value>
            The tooltip timeout.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.Zoom">
            <summary>
            Gets or sets the zoom.
            </summary>
            <value>
            The zoom.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.Pan">
            <summary>
            Gets or sets the zoom.
            </summary>
            <value>
            The zoom.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.ZoomingSpeed">
            <summary>
            Gets or sets the zooming speed.
            </summary>
            <value>
            The zooming speed.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.LegendLocation">
            <summary>
            Gets or sets the legend location.
            </summary>
            <value>
            The legend location.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.DisableAnimations">
            <summary>
            Gets or sets a value indicating whether [disable animations].
            </summary>
            <value>
              <c>true</c> if [disable animations]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.AnimationsSpeed">
            <summary>
            Gets or sets the animations speed.
            </summary>
            <value>
            The animations speed.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.UpdaterState">
            <summary>
            Gets or sets the state of the updater.
            </summary>
            <value>
            The state of the updater.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.HasTooltip">
            <summary>
            Gets a value indicating whether this instance has tooltip.
            </summary>
            <value>
            <c>true</c> if this instance has tooltip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.HasDataClickEventAttached">
            <summary>
            Gets a value indicating whether this instance has data click event attached.
            </summary>
            <value>
            <c>true</c> if this instance has data click event attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.HasDataHoverEventAttached">
            <summary>
            Gets a value indicating whether this instance has data hover event attached.
            </summary>
            <value>
            <c>true</c> if this instance has data hover event attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.Hoverable">
            <summary>
            Gets a value indicating whether this <see cref="T:LiveCharts.Definitions.Charts.IChartView"/> is hoverable.
            </summary>
            <value>
              <c>true</c> if hoverable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.IsControlLoaded">
            <summary>
            Gets a value indicating whether this instance is control loaded.
            </summary>
            <value>
            <c>true</c> if this instance is control loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IChartView.IsInDesignMode">
            <summary>
            Gets a value indicating whether this instance is in design mode.
            </summary>
            <value>
            <c>true</c> if this instance is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ICartesianChart.VisualElements">
            <summary>
            Gets or sets the visual elements.
            </summary>
            <value>
            The visual elements.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.ICartesianVisualElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ICartesianVisualElement.AddOrMove(LiveCharts.Charts.ChartCore)">
            <summary>
            Adds the or move.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ICartesianVisualElement.Remove(LiveCharts.Charts.ChartCore)">
            <summary>
            Removes the specified chart.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ICartesianVisualElement.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>
            The x.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ICartesianVisualElement.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>
            The y.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ICartesianVisualElement.AxisX">
            <summary>
            Gets or sets the axis x.
            </summary>
            <value>
            The axis x.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ICartesianVisualElement.AxisY">
            <summary>
            Gets or sets the axis y.
            </summary>
            <value>
            The axis y.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.IDateAxisView">
            <summary>
            
            </summary>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.IWindowAxisView">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IDateAxisView.InitialDateTime">
            <summary>
            The datetime used for the first point to calculate relative date values
            </summary>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IDateAxisView.Period">
            <summary>
            Gets or sets the period used by the series in this axis
            </summary>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.ILogarithmicAxisView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Charts.IAxisView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ILogarithmicAxisView.Base">
            <summary>
            Gets or sets the base.
            </summary>
            <value>
            The base.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.IPieChart">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Charts.IChartView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IPieChart.InnerRadius">
            <summary>
            Gets or sets the inner radius.
            </summary>
            <value>
            The inner radius.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IPieChart.StartingRotationAngle">
            <summary>
            Gets or sets the starting rotation angle.
            </summary>
            <value>
            The starting rotation angle.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.IPieChart.HoverPushOut">
            <summary>
            Gets or sets the hover push out.
            </summary>
            <value>
            The hover push out.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.ISeparatorElementView">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ISeparatorElementView.UpdateLabel(System.String,LiveCharts.AxisCore,LiveCharts.AxisOrientation)">
            <summary>
            Updates the label.
            </summary>
            <param name="text">The text.</param>
            <param name="axis">The axis.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ISeparatorElementView.Clear(LiveCharts.Definitions.Charts.IChartView)">
            <summary>
            Clears the specified chart.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ISeparatorElementView.Place(LiveCharts.Charts.ChartCore,LiveCharts.AxisCore,LiveCharts.AxisOrientation,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Places the specified chart.
            </summary>
            <param name="chart">The chart.</param>
            <param name="axis">The axis.</param>
            <param name="direction">The direction.</param>
            <param name="axisIndex">Index of the axis.</param>
            <param name="toLabel">To label.</param>
            <param name="toLine">To line.</param>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ISeparatorElementView.Remove(LiveCharts.Charts.ChartCore)">
            <summary>
            Removes the specified chart.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ISeparatorElementView.Move(LiveCharts.Charts.ChartCore,LiveCharts.AxisCore,LiveCharts.AxisOrientation,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Moves the specified chart.
            </summary>
            <param name="chart">The chart.</param>
            <param name="axis">The axis.</param>
            <param name="direction">The direction.</param>
            <param name="axisIndex">Index of the axis.</param>
            <param name="toLabel">To label.</param>
            <param name="toLine">To line.</param>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ISeparatorElementView.FadeIn(LiveCharts.AxisCore,LiveCharts.Charts.ChartCore)">
            <summary>
            Fades the in.
            </summary>
            <param name="axis">The axis.</param>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ISeparatorElementView.FadeOutAndRemove(LiveCharts.Charts.ChartCore)">
            <summary>
            Fades the out and remove.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ISeparatorElementView.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ISeparatorElementView.LabelModel">
            <summary>
            Gets the label model.
            </summary>
            <value>
            The label model.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Charts.ISeparatorView">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Charts.ISeparatorView.AsCoreElement(LiveCharts.AxisCore,LiveCharts.AxisOrientation)">
            <summary>
            Ases the core element.
            </summary>
            <param name="axis">The axis.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ISeparatorView.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            <c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ISeparatorView.Step">
            <summary>
            Gets or sets separator step, this means the value between each line, use double.NaN for auto.
            </summary>
        </member>
        <member name="P:LiveCharts.Definitions.Charts.ISeparatorView.AxisOrientation">
            <summary>
            Gets the axis orientation.
            </summary>
            <value>
            The axis orientation.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Points.IBezierPointView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Points.IChartPointView"/>
        </member>
        <member name="T:LiveCharts.Definitions.Points.IChartPointView">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Points.IChartPointView.DrawOrMove(LiveCharts.ChartPoint,LiveCharts.ChartPoint,System.Int32,LiveCharts.Charts.ChartCore)">
            <summary>
            Draws the or move.
            </summary>
            <param name="previousDrawn">The previous drawn.</param>
            <param name="current">The current.</param>
            <param name="index">The index.</param>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Points.IChartPointView.RemoveFromView(LiveCharts.Charts.ChartCore)">
            <summary>
            Removes from view.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Points.IChartPointView.OnHover(LiveCharts.ChartPoint)">
            <summary>
            Called when [hover].
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Points.IChartPointView.OnHoverLeave(LiveCharts.ChartPoint)">
            <summary>
            Called when [hover leave].
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IChartPointView.IsNew">
            <summary>
            Gets a value indicating whether this instance is new.
            </summary>
            <value>
              <c>true</c> if this instance is new; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IChartPointView.ValidArea">
            <summary>
            Gets the valid area.
            </summary>
            <value>
            The valid area.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IBezierPointView.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Points.IHeatPointView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Points.IChartPointView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IHeatPointView.ColorComponents">
            <summary>
            Gets or sets the color components.
            </summary>
            <value>
            The color components.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IHeatPointView.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IHeatPointView.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Points.IOhlcPointView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Points.IChartPointView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IOhlcPointView.Open">
            <summary>
            Gets or sets the open.
            </summary>
            <value>
            The open.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IOhlcPointView.High">
            <summary>
            Gets or sets the high.
            </summary>
            <value>
            The high.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IOhlcPointView.Close">
            <summary>
            Gets or sets the close.
            </summary>
            <value>
            The close.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IOhlcPointView.Low">
            <summary>
            Gets or sets the low.
            </summary>
            <value>
            The low.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IOhlcPointView.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IOhlcPointView.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IOhlcPointView.StartReference">
            <summary>
            Gets or sets the start reference.
            </summary>
            <value>
            The start reference.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Points.IPieSlicePointView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Points.IChartPointView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IPieSlicePointView.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IPieSlicePointView.Wedge">
            <summary>
            Gets or sets the wedge.
            </summary>
            <value>
            The wedge.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IPieSlicePointView.InnerRadius">
            <summary>
            Gets or sets the inner radius.
            </summary>
            <value>
            The inner radius.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IPieSlicePointView.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Points.IRectanglePointView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Points.IChartPointView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IRectanglePointView.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IRectanglePointView.ZeroReference">
            <summary>
            Gets or sets the zero reference.
            </summary>
            <value>
            The zero reference.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Points.IScatterPointView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Points.IChartPointView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IScatterPointView.Diameter">
            <summary>
            Gets or sets the diameter.
            </summary>
            <value>
            The diameter.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Points.IStepPointView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Points.IChartPointView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IStepPointView.DeltaX">
            <summary>
            Gets or sets the delta x.
            </summary>
            <value>
            The delta x.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Points.IStepPointView.DeltaY">
            <summary>
            Gets or sets the delta y.
            </summary>
            <value>
            The delta y.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IAreaPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Series.IAreaPoint.GetPointDiameter">
            <summary>
            Gets the point diameter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Definitions.Series.ICartesianSeries">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ICartesianSeries.GetMinX(LiveCharts.AxisCore)">
            <summary>
            Gets the minimum x.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ICartesianSeries.GetMaxX(LiveCharts.AxisCore)">
            <summary>
            Gets the maximum x.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ICartesianSeries.GetMinY(LiveCharts.AxisCore)">
            <summary>
            Gets the minimum y.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ICartesianSeries.GetMaxY(LiveCharts.AxisCore)">
            <summary>
            Gets the maximum y.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ICartesianSeries.View">
            <summary>
            Gets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IColumnSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
        </member>
        <member name="T:LiveCharts.Definitions.Series.ISeriesView">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ISeriesView.GetPointView(LiveCharts.ChartPoint,System.String)">
            <summary>
            Gets the point view.
            </summary>
            <param name="point">The point.</param>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ISeriesView.OnSeriesUpdateStart">
            <summary>
            Called when [series update start].
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ISeriesView.Erase(System.Boolean)">
            <summary>
            Erases the specified remove from view.
            </summary>
            <param name="removeFromView">if set to <c>true</c> [remove from view].</param>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ISeriesView.OnSeriesUpdatedFinish">
            <summary>
            Called when [series updated finish].
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ISeriesView.InitializeColors">
            <summary>
            Initializes the colors.
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ISeriesView.DrawSpecializedElements">
            <summary>
            Draws the specialized elements.
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ISeriesView.PlaceSpecializedElements">
            <summary>
            Places the specialized elements.
            </summary>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ISeriesView.GetLabelPointFormatter">
            <summary>
            Gets the label point formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.DataLabels">
            <summary>
            Gets a value indicating whether [data labels].
            </summary>
            <value>
              <c>true</c> if [data labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.ScalesXAt">
            <summary>
            Gets or sets the scales x at.
            </summary>
            <value>
            The scales x at.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.ScalesYAt">
            <summary>
            Gets or sets the scales y at.
            </summary>
            <value>
            The scales y at.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.IsSeriesVisible">
            <summary>
            Gets a value indicating whether this instance is series visible.
            </summary>
            <value>
            <c>true</c> if this instance is series visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.LabelPoint">
            <summary>
            Gets or sets the label point.
            </summary>
            <value>
            The label point.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.ActualValues">
            <summary>
            Gets the actual values.
            </summary>
            <value>
            The actual values.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.Title">
            <summary>
            Gets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ISeriesView.IsFirstDraw">
            <summary>
            Gets a value indicating whether this instance is first draw.
            </summary>
            <value>
            <c>true</c> if this instance is first draw; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IColumnSeriesView.MaxColumnWidth">
            <summary>
            Gets or sets the maximum width of the column.
            </summary>
            <value>
            The maximum width of the column.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IColumnSeriesView.ColumnPadding">
            <summary>
            Gets or sets the column padding.
            </summary>
            <value>
            The column padding.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IColumnSeriesView.SharesPosition">
            <summary>
            Gets or sets a value indicating whether [shares position].
            </summary>
            <value>
              <c>true</c> if [shares position]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IFinancialSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IFinancialSeriesView.MaxColumnWidth">
            <summary>
            Gets or sets the maximum width of the column.
            </summary>
            <value>
            The maximum width of the column.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IHeatSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IHeatSeriesView.Stops">
            <summary>
            Gets the stops.
            </summary>
            <value>
            The stops.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IHeatSeriesView.DrawsHeatRange">
            <summary>
            Gets a value indicating whether [draws heat range].
            </summary>
            <value>
              <c>true</c> if [draws heat range]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.ILineSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ILineSeriesView.StartSegment(System.Int32,LiveCharts.Dtos.CorePoint)">
            <summary>
            Starts the segment.
            </summary>
            <param name="atIndex">At index.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:LiveCharts.Definitions.Series.ILineSeriesView.EndSegment(System.Int32,LiveCharts.Dtos.CorePoint)">
            <summary>
            Ends the segment.
            </summary>
            <param name="atIndex">At index.</param>
            <param name="location">The location.</param>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ILineSeriesView.LineSmoothness">
            <summary>
            Gets or sets the line smoothness.
            </summary>
            <value>
            The line smoothness.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.ILineSeriesView.AreaLimit">
            <summary>
            Gets or sets the area limit.
            </summary>
            <value>
            The area limit.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IPieSeries">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IPieSeries.View">
            <summary>
            Gets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IPieSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IPieSeriesView.PushOut">
            <summary>
            Gets or sets the push out.
            </summary>
            <value>
            The push out.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IRowSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IRowSeriesView.MaxRowHeigth">
            <summary>
            Gets or sets the maximum row heigth.
            </summary>
            <value>
            The maximum row heigth.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IRowSeriesView.RowPadding">
            <summary>
            Gets or sets the row padding.
            </summary>
            <value>
            The row padding.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IRowSeriesView.SharesPosition">
            <summary>
            Gets or sets a value indicating whether [shares position].
            </summary>
            <value>
              <c>true</c> if [shares position]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IScatterSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IScatterSeriesView.MaxPointShapeDiameter">
            <summary>
            Gets or sets the maximum point shape diameter.
            </summary>
            <value>
            The maximum point shape diameter.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IScatterSeriesView.MinPointShapeDiameter">
            <summary>
            Gets or sets the minimum point shape diameter.
            </summary>
            <value>
            The minimum point shape diameter.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IStackedAreaSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ILineSeriesView"/>
            <seealso cref="T:LiveCharts.Definitions.Series.IStackModelableSeriesView"/>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IStackModelableSeriesView">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IStackModelableSeriesView.StackMode">
            <summary>
            Gets or sets the stack mode.
            </summary>
            <value>
            The stack mode.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IStackedColumnSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
            <seealso cref="T:LiveCharts.Definitions.Series.IStackModelableSeriesView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IStackedColumnSeriesView.MaxColumnWidth">
            <summary>
            Gets or sets the maximum width of the column.
            </summary>
            <value>
            The maximum width of the column.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IStackedColumnSeriesView.ColumnPadding">
            <summary>
            Gets or sets the column padding.
            </summary>
            <value>
            The column padding.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IStackedRowSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ISeriesView"/>
            <seealso cref="T:LiveCharts.Definitions.Series.IStackModelableSeriesView"/>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IStackedRowSeriesView.MaxRowHeight">
            <summary>
            Gets or sets the maximum height of the row.
            </summary>
            <value>
            The maximum height of the row.
            </value>
        </member>
        <member name="P:LiveCharts.Definitions.Series.IStackedRowSeriesView.RowPadding">
            <summary>
            Gets or sets the row padding.
            </summary>
            <value>
            The row padding.
            </value>
        </member>
        <member name="T:LiveCharts.Definitions.Series.IVerticalStackedAreaSeriesView">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Definitions.Series.ILineSeriesView"/>
            <seealso cref="T:LiveCharts.Definitions.Series.IStackModelableSeriesView"/>
        </member>
        <member name="T:LiveCharts.FinancialDelegate">
            <summary>
            Defines a financial coloring rule delegate
            </summary>
            <param name="current">The current point</param>
            <param name="prior">The previous point</param>
        </member>
        <member name="T:LiveCharts.Dtos.BezierData">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.BezierData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Dtos.BezierData"/> class.
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.BezierData.#ctor(LiveCharts.Dtos.CorePoint)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Dtos.BezierData"/> class.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="P:LiveCharts.Dtos.BezierData.Point1">
            <summary>
            Gets or sets the point1.
            </summary>
            <value>
            The point1.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.BezierData.Point2">
            <summary>
            Gets or sets the point2.
            </summary>
            <value>
            The point2.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.BezierData.Point3">
            <summary>
            Gets or sets the point3.
            </summary>
            <value>
            The point3.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.BezierData.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
            <value>
            The start point.
            </value>
        </member>
        <member name="T:LiveCharts.Dtos.CoreColor">
            <summary>
            Defines a portable color
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.CoreColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of CoreColor
            </summary>
            <param name="a">alpha component</param>
            <param name="r">red component</param>
            <param name="g">green component</param>
            <param name="b">blue component</param>
        </member>
        <member name="P:LiveCharts.Dtos.CoreColor.A">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreColor.R">
            <summary>
            Red component
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreColor.G">
            <summary>
            Green component
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreColor.B">
            <summary>
            Red component
            </summary>
        </member>
        <member name="T:LiveCharts.Dtos.CoreGradientStop">
            <summary>
            Portable color gradient stop
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreGradientStop.Offset">
            <summary>
            Offset, goes from 0 to 1
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreGradientStop.Color">
            <summary>
            Color at Offset
            </summary>
        </member>
        <member name="T:LiveCharts.Dtos.CoreLimit">
            <summary>
            Defines a portable limit
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.CoreLimit.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of CoreLimit
            </summary>
            <param name="min">minimum value</param>
            <param name="max">maximum value</param>
        </member>
        <member name="P:LiveCharts.Dtos.CoreLimit.Max">
            <summary>
            Gets or sets the maximum value
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreLimit.Min">
            <summary>
            Gets or sets the minimum value
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreLimit.Range">
            <summary>
            Gets the range between max and min values
            </summary>
        </member>
        <member name="T:LiveCharts.Dtos.CoreMargin">
            <summary>
            Defines a portable margin
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreMargin.Top">
            <summary>
            Distance to top
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreMargin.Bottom">
            <summary>
            Distance to bottom
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreMargin.Left">
            <summary>
            Distance to left
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreMargin.Right">
            <summary>
            Distance to right
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreMargin.Width">
            <summary>
            Size width
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreMargin.Height">
            <summary>
            Size height
            </summary>
        </member>
        <member name="T:LiveCharts.Dtos.CorePoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.CorePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of CorePoint
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
        </member>
        <member name="M:LiveCharts.Dtos.CorePoint.#ctor(LiveCharts.Dtos.CorePoint)">
            <summary>
            Initializes a new instance of CorePoint
            </summary>
            <param name="point">source pont</param>
        </member>
        <member name="M:LiveCharts.Dtos.CorePoint.op_Addition(LiveCharts.Dtos.CorePoint,LiveCharts.Dtos.CorePoint)">
            <summary>
            Sums every property between 2 given points
            </summary>
            <param name="p1">point 1</param>
            <param name="p2">point 2</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Dtos.CorePoint.op_Subtraction(LiveCharts.Dtos.CorePoint,LiveCharts.Dtos.CorePoint)">
            <summary>
            Subtracts every property between 2 given points
            </summary>
            <param name="p1">point 1</param>
            <param name="p2">point 2</param>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Dtos.CorePoint.X">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CorePoint.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="T:LiveCharts.Dtos.CoreRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.CoreRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Dtos.CoreRectangle"/> class.
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.CoreRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Dtos.CoreRectangle"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="E:LiveCharts.Dtos.CoreRectangle.SetTop">
            <summary>
            Occurs when [set top].
            </summary>
        </member>
        <member name="E:LiveCharts.Dtos.CoreRectangle.SetLeft">
            <summary>
            Occurs when [set left].
            </summary>
        </member>
        <member name="E:LiveCharts.Dtos.CoreRectangle.SetWidth">
            <summary>
            Occurs when [set width].
            </summary>
        </member>
        <member name="E:LiveCharts.Dtos.CoreRectangle.SetHeight">
            <summary>
            Occurs when [set height].
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.CoreRectangle.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.CoreRectangle.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>
            The top.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.CoreRectangle.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.CoreRectangle.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:LiveCharts.Dtos.CoreSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.CoreSize.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Dtos.CoreSize"/> struct.
            </summary>
            <param name="width">The width.</param>
            <param name="heigth">The heigth.</param>
        </member>
        <member name="P:LiveCharts.Dtos.CoreSize.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.CoreSize.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:LiveCharts.Dtos.LabelEvaluation">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.Dtos.LabelEvaluation.#ctor(System.Double,System.Double,System.Double,LiveCharts.AxisCore,LiveCharts.AxisOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Dtos.LabelEvaluation"/> struct.
            </summary>
            <param name="angle">The angle.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <param name="axis">The axis.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:LiveCharts.Dtos.LabelEvaluation.GetOffsetBySource(LiveCharts.AxisOrientation)">
            <summary>
            Gets the offset by source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.LabelAngle">
            <summary>
            Gets or sets the label angle.
            </summary>
            <value>
            The label angle.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.WFromW">
            <summary>
            Gets or sets the w from w.
            </summary>
            <value>
            The w from w.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.WFromH">
            <summary>
            Gets or sets the w from h.
            </summary>
            <value>
            The w from h.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.HFromW">
            <summary>
            Gets or sets the h from w.
            </summary>
            <value>
            The h from w.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.HFromH">
            <summary>
            Gets or sets the h from h.
            </summary>
            <value>
            The h from h.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>
            The top.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>
            The bottom.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.XOffset">
            <summary>
            Gets or sets the x offset.
            </summary>
            <value>
            The x offset.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.YOffset">
            <summary>
            Gets or sets the y offset.
            </summary>
            <value>
            The y offset.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.TakenWidth">
            <summary>
            Gets the width of the taken.
            </summary>
            <value>
            The width of the taken.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.TakenHeight">
            <summary>
            Gets the height of the taken.
            </summary>
            <value>
            The height of the taken.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.ActualWidth">
            <summary>
            Gets the actual width.
            </summary>
            <value>
            The actual width.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.LabelEvaluation.ActualHeight">
            <summary>
            Gets the actual height.
            </summary>
            <value>
            The actual height.
            </value>
        </member>
        <member name="T:LiveCharts.Dtos.TooltipDataViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.Dtos.TooltipDataViewModel.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>
            The points.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.TooltipDataViewModel.Shares">
            <summary>
            Gets or sets the shares.
            </summary>
            <value>
            The shares.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.TooltipDataViewModel.XFormatter">
            <summary>
            Gets or sets the x formatter.
            </summary>
            <value>
            The x formatter.
            </value>
        </member>
        <member name="P:LiveCharts.Dtos.TooltipDataViewModel.YFormatter">
            <summary>
            Gets or sets the y formatter.
            </summary>
            <value>
            The y formatter.
            </value>
        </member>
        <member name="T:LiveCharts.Events.DataClickHandler">
            <summary>
            
            </summary>
            <param name="sender">The sender.</param>
            <param name="chartPoint">The chart point.</param>
        </member>
        <member name="T:LiveCharts.Events.DataHoverHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="chartPoint"></param>
        </member>
        <member name="T:LiveCharts.Events.UpdaterTickHandler">
            <summary>
            
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="T:LiveCharts.Events.RangeChangedHandler">
            <summary>
            
            </summary>
            <param name="eventArgs">The <see cref="T:LiveCharts.Events.RangeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:LiveCharts.Events.PreviewRangeChangedHandler">
            <summary>
            
            </summary>
            <param name="eventArgs">The <see cref="T:LiveCharts.Events.PreviewRangeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:LiveCharts.Events.PreviewRangeChangedEventArgs">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.Events.RangeChangedEventArgs"/>
        </member>
        <member name="T:LiveCharts.Events.RangeChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.Events.RangeChangedEventArgs.LeftLimitChange">
            <summary>
            Gets the min limit difference compared with previous state
            </summary>
        </member>
        <member name="P:LiveCharts.Events.RangeChangedEventArgs.RightLimitChange">
            <summary>
            Gets the max limit difference compared with previous state
            </summary>
        </member>
        <member name="P:LiveCharts.Events.RangeChangedEventArgs.Range">
            <summary>
            Gets the current axis range
            </summary>
        </member>
        <member name="P:LiveCharts.Events.RangeChangedEventArgs.Axis">
            <summary>
            Gets the axis that fired the change
            </summary>
        </member>
        <member name="M:LiveCharts.Events.PreviewRangeChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Events.PreviewRangeChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:LiveCharts.Events.PreviewRangeChangedEventArgs.#ctor(LiveCharts.Events.RangeChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Events.PreviewRangeChangedEventArgs"/> class.
            </summary>
            <param name="args">The <see cref="T:LiveCharts.Events.RangeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:LiveCharts.Events.PreviewRangeChangedEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the axis change was canceled by the user.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LiveCharts.Events.PreviewRangeChangedEventArgs.PreviewMinValue">
            <summary>
            Gets the preview minimum value.
            </summary>
            <value>
            The preview minimum value.
            </value>
        </member>
        <member name="P:LiveCharts.Events.PreviewRangeChangedEventArgs.PreviewMaxValue">
            <summary>
            Gets the preview maximum value.
            </summary>
            <value>
            The preview maximum value.
            </value>
        </member>
        <member name="T:LiveCharts.Helpers.Extentions">
            <summary>
            LiveCharts extensions methods
            </summary>
        </member>
        <member name="M:LiveCharts.Helpers.Extentions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an Action in every item of a collection
            </summary>
            <typeparam name="T">type to iterate with</typeparam>
            <param name="source">collection to iterate</param>
            <param name="predicate">action to execute</param>
        </member>
        <member name="M:LiveCharts.Helpers.Extentions.SplitEachNaN(System.Collections.Generic.IList{LiveCharts.ChartPoint})">
            <summary>
            Splits a collection of points every double.Nan
            </summary>
            <param name="toSplit">collection to split</param>
            <returns>collection of collections</returns>
        </member>
        <member name="M:LiveCharts.Helpers.Extentions.Invert(LiveCharts.AxisOrientation)">
            <summary>
            Return the inverse axis orientation
            </summary>
            <param name="axis">current orientation</param>
            <returns>inverted axis orientation</returns>
        </member>
        <member name="M:LiveCharts.Helpers.Extentions.AsChartValues``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts any collection to chart values
            </summary>
            <typeparam name="T">type to convert</typeparam>
            <param name="values">values to convert</param>
            <returns>a new ChartValues instance containing the passed collection</returns>
        </member>
        <member name="M:LiveCharts.Helpers.Extentions.AsSeriesCollection(System.Collections.Generic.IEnumerable{LiveCharts.Definitions.Series.ISeriesView})">
            <summary>
            Converts an enumeration of series to a SeriesCollection instance.
            </summary>
            <param name="series">The series.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.Helpers.Extentions.ClosestPointTo(LiveCharts.Definitions.Series.ISeriesView,System.Double,LiveCharts.AxisOrientation)">
            <summary>
            Gets the closest chart point with a given value.
            </summary>
            <param name="series">The target series.</param>
            <param name="value">The value.</param>
            <param name="orientation">the axis orientation</param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.Helpers.LiveChartsException">
            <summary>
            
            </summary>
            <seealso cref="T:System.Exception"/>
        </member>
        <member name="M:LiveCharts.Helpers.LiveChartsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Helpers.LiveChartsException"/> class.
            </summary>
        </member>
        <member name="M:LiveCharts.Helpers.LiveChartsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Helpers.LiveChartsException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:LiveCharts.Helpers.LiveChartsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Helpers.LiveChartsException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:LiveCharts.Helpers.LiveChartsException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.Helpers.LiveChartsException"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="innerException">The inner exception.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:LiveCharts.Helpers.NoisyCollectionCollectionChanged`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oldItems">The old items.</param>
            <param name="newItems">The new items.</param>
        </member>
        <member name="T:LiveCharts.IObservableChartPoint">
            <summary>
            
            </summary>
        </member>
        <member name="E:LiveCharts.IObservableChartPoint.PointChanged">
            <summary>
            Occurs when [point changed].
            </summary>
        </member>
        <member name="T:LiveCharts.LegendLocation">
            <summary>
            Charts legend locations
            </summary>
        </member>
        <member name="F:LiveCharts.LegendLocation.None">
            <summary>
            Disables legend
            </summary>
        </member>
        <member name="F:LiveCharts.LegendLocation.Top">
            <summary>
            PLaces legend at top
            </summary>
        </member>
        <member name="F:LiveCharts.LegendLocation.Bottom">
            <summary>
            Places legend at bottom
            </summary>
        </member>
        <member name="F:LiveCharts.LegendLocation.Left">
            <summary>
            Places legend at left
            </summary>
        </member>
        <member name="F:LiveCharts.LegendLocation.Right">
            <summary>
            Places legend at right
            </summary>
        </member>
        <member name="T:LiveCharts.LogarithmicAxisCore">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.AxisCore"/>
        </member>
        <member name="M:LiveCharts.LogarithmicAxisCore.#ctor(LiveCharts.Definitions.Charts.IAxisView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.LogarithmicAxisCore"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="T:LiveCharts.Maps.LvcMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.Maps.LvcMap.DesiredWidth">
            <summary>
            Gets or sets the width of the desired.
            </summary>
            <value>
            The width of the desired.
            </value>
        </member>
        <member name="P:LiveCharts.Maps.LvcMap.DesiredHeight">
            <summary>
            Gets or sets the height of the desired.
            </summary>
            <value>
            The height of the desired.
            </value>
        </member>
        <member name="P:LiveCharts.Maps.LvcMap.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:LiveCharts.Maps.MapData">
            <summary>
            
            </summary>
        </member>
        <member name="P:LiveCharts.Maps.MapData.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:LiveCharts.Maps.MapData.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:LiveCharts.Maps.MapData.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:LiveCharts.Maps.MapData.Shape">
            <summary>
            Gets or sets the shape.
            </summary>
            <value>
            The shape.
            </value>
        </member>
        <member name="P:LiveCharts.Maps.MapData.LvcMap">
            <summary>
            Gets or sets the LVC map.
            </summary>
            <value>
            The LVC map.
            </value>
        </member>
        <member name="T:LiveCharts.PanningOptions">
            <summary>
            Chart Panning Options
            </summary>
        </member>
        <member name="F:LiveCharts.PanningOptions.Unset">
            <summary>
            By default chart Panning is Unset, this means it will be based the Chart Zooming selection
            </summary>
        </member>
        <member name="F:LiveCharts.PanningOptions.None">
            <summary>
            Not panning allowed
            </summary>
        </member>
        <member name="F:LiveCharts.PanningOptions.X">
            <summary>
            Panning only in the X axis
            </summary>
        </member>
        <member name="F:LiveCharts.PanningOptions.Y">
            <summary>
            Panning only in the Y axis
            </summary>
        </member>
        <member name="F:LiveCharts.PanningOptions.Xy">
            <summary>
            Panning in both X and Y axes
            </summary>
        </member>
        <member name="T:LiveCharts.Helpers.PeriodUnits">
            <summary>
            Defines the interval on which earch of the charts bars is based
            </summary>
        </member>
        <member name="T:LiveCharts.PieLabelPosition">
            <summary>
            Describes where a label should be placed
            </summary>
        </member>
        <member name="F:LiveCharts.PieLabelPosition.InsideSlice">
            <summary>
            Places the label inside the pie slice
            </summary>
        </member>
        <member name="F:LiveCharts.PieLabelPosition.OutsideSlice">
            <summary>
            Places the label outside the pie slice
            </summary>
        </member>
        <member name="T:LiveCharts.PointTracker">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.PointTracker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.PointTracker"/> class.
            </summary>
        </member>
        <member name="P:LiveCharts.PointTracker.XLimit">
            <summary>
            Gets the x limit.
            </summary>
            <value>
            The x limit.
            </value>
        </member>
        <member name="P:LiveCharts.PointTracker.YLimit">
            <summary>
            Gets the y limit.
            </summary>
            <value>
            The y limit.
            </value>
        </member>
        <member name="P:LiveCharts.PointTracker.WLimit">
            <summary>
            Gets the w limit.
            </summary>
            <value>
            The w limit.
            </value>
        </member>
        <member name="P:LiveCharts.PointTracker.Gci">
            <summary>
            Gets the gci.
            </summary>
            <value>
            The gci.
            </value>
        </member>
        <member name="P:LiveCharts.PointTracker.Indexed">
            <summary>
            Gets or sets the indexed.
            </summary>
            <value>
            The indexed.
            </value>
        </member>
        <member name="P:LiveCharts.PointTracker.Referenced">
            <summary>
            Gets or sets the referenced.
            </summary>
            <value>
            The referenced.
            </value>
        </member>
        <member name="T:LiveCharts.ScrollMode">
            <summary>
            Gets or sets a chart scroll mode
            </summary>
        </member>
        <member name="F:LiveCharts.ScrollMode.None">
            <summary>
            Disables Chart Scroll bars
            </summary>
        </member>
        <member name="F:LiveCharts.ScrollMode.X">
            <summary>
            Enables scroll mode at the X axis
            </summary>
        </member>
        <member name="F:LiveCharts.ScrollMode.Y">
            <summary>
            Enables scroll mode at the Y axis
            </summary>
        </member>
        <member name="F:LiveCharts.ScrollMode.XY">
            <summary>
            Enables scroll mode in both, X and Y axis
            </summary>
        </member>
        <member name="T:LiveCharts.SeparationState">
            <summary>
            Separator current state
            </summary>
        </member>
        <member name="F:LiveCharts.SeparationState.Remove">
            <summary>
            Remove the separator from the chart
            </summary>
        </member>
        <member name="F:LiveCharts.SeparationState.Keep">
            <summary>
            Kepp the separator in the chart
            </summary>
        </member>
        <member name="F:LiveCharts.SeparationState.InitialAdd">
            <summary>
            no animated add
            </summary>
        </member>
        <member name="T:LiveCharts.SeparatorConfigurationCore">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.SeparatorConfigurationCore.#ctor(LiveCharts.AxisCore)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeparatorConfigurationCore"/> class.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="P:LiveCharts.SeparatorConfigurationCore.Axis">
            <summary>
            Gets or sets the axis.
            </summary>
            <value>
            The axis.
            </value>
        </member>
        <member name="P:LiveCharts.SeparatorConfigurationCore.IsEnabled">
            <summary>
            Gets or sets if separators are enabled (will be drawn)
            </summary>
        </member>
        <member name="P:LiveCharts.SeparatorConfigurationCore.Step">
            <summary>
            Gets or sets sepator step, this means the value between each line, use null for auto.
            </summary>
        </member>
        <member name="P:LiveCharts.SeparatorConfigurationCore.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithm">
            <summary>
            
            </summary>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="P:LiveCharts.SeriesAlgorithm.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:LiveCharts.SeriesAlgorithm.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
            <value>
            The chart.
            </value>
        </member>
        <member name="P:LiveCharts.SeriesAlgorithm.SeriesCollection">
            <summary>
            Gets or sets the series collection.
            </summary>
            <value>
            The series collection.
            </value>
        </member>
        <member name="P:LiveCharts.SeriesAlgorithm.SeriesOrientation">
            <summary>
            Gets or sets the series orientation.
            </summary>
            <value>
            The series orientation.
            </value>
        </member>
        <member name="P:LiveCharts.SeriesAlgorithm.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:LiveCharts.SeriesAlgorithm.PreferredSelectionMode">
            <summary>
            Gets the preferred selection mode.
            </summary>
            <value>
            The preferred selection mode.
            </value>
        </member>
        <member name="P:LiveCharts.SeriesAlgorithm.CurrentXAxis">
            <summary>
            Gets the current x axis.
            </summary>
            <value>
            The current x axis.
            </value>
        </member>
        <member name="P:LiveCharts.SeriesAlgorithm.CurrentYAxis">
            <summary>
            Gets the current y axis.
            </summary>
            <value>
            The current y axis.
            </value>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.CandleAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.CandleAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.CandleAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.CandleAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.ColumnAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.ColumnAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.ColumnAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.ColumnAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.HeatAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.HeatAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.HeatAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.HeatAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
            <exception cref="T:LiveCharts.Helpers.LiveChartsException">There is no a valid gradient to create a heat series.</exception>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.HeatAlgorithm.GetMinX(LiveCharts.AxisCore)">
            <summary>
            Gets the minimum x.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.HeatAlgorithm.GetMaxX(LiveCharts.AxisCore)">
            <summary>
            Gets the maximum x.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.HeatAlgorithm.GetMinY(LiveCharts.AxisCore)">
            <summary>
            Gets the minimum y.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.HeatAlgorithm.GetMaxY(LiveCharts.AxisCore)">
            <summary>
            Gets the maximum y.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.LineAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.LineAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.LineAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.LineAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.OhlcAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.OhlcAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.OhlcAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.OhlcAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.PieAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.IPieSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.PieAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.PieAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.PieAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.RowAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.RowAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.RowAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.RowAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.ScatterAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.ScatterAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.ScatterAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.ScatterAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.StackedAreaAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StackedAreaAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.StackedAreaAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StackedAreaAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StackedAreaAlgorithm.GetStackedPoint(LiveCharts.ChartPoint)">
            <summary>
            Gets the stacked point.
            </summary>
            <param name="chartPoint">The chart point.</param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.StackedColumnAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StackedColumnAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.StackedColumnAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StackedColumnAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.StackedRowAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StackedRowAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.StackedRowAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StackedRowAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.StepLineAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StepLineAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.StepLineAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.StepLineAlgorithm.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.VerticalLineAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithms.LineAlgorithm"/>
            <seealso cref="T:LiveCharts.Definitions.Series.ICartesianSeries"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.VerticalLineAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.VerticalLineAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="T:LiveCharts.SeriesAlgorithms.VerticalStackedAreaAlgorithm">
            <summary>
            
            </summary>
            <seealso cref="T:LiveCharts.SeriesAlgorithms.StackedAreaAlgorithm"/>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.VerticalStackedAreaAlgorithm.#ctor(LiveCharts.Definitions.Series.ISeriesView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveCharts.SeriesAlgorithms.VerticalStackedAreaAlgorithm"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:LiveCharts.SeriesAlgorithms.VerticalStackedAreaAlgorithm.GetStackedPoint(LiveCharts.ChartPoint)">
            <summary>
            Gets the stacked point.
            </summary>
            <param name="chartPoint">The chart point.</param>
            <returns></returns>
        </member>
        <member name="T:LiveCharts.SeriesCollection">
            <summary>
            Stores a collection of series to plot, this collection notifies the changes every time you add/remove any series.
            </summary>
        </member>
        <member name="M:LiveCharts.SeriesCollection.#ctor">
            <summary>
            Initializes a new instance of the SeriesCollection class
            </summary>
        </member>
        <member name="M:LiveCharts.SeriesCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the SeriesCollection class, with a given mapper
            </summary>
        </member>
        <member name="P:LiveCharts.SeriesCollection.CurrentSeriesIndex">
            <summary>
            Gets or sets the current series index, this index is used to pull out the automatic color of any series
             </summary>
        </member>
        <member name="P:LiveCharts.SeriesCollection.Chart">
            <summary>
            Gets the chart that owns the collection
            </summary>
        </member>
        <member name="P:LiveCharts.SeriesCollection.Configuration">
            <summary>
            Gets or sets then mapper in the collection, this mapper will be used in any series inside the collection, if null then LiveCharts will try to get the value from the global configuration.
            </summary>
        </member>
        <member name="T:LiveCharts.SeriesOrientation">
            <summary>
            The series orientation
            </summary>
        </member>
        <member name="F:LiveCharts.SeriesOrientation.All">
            <summary>
            Both, horizontal and vertical orientation
            </summary>
        </member>
        <member name="F:LiveCharts.SeriesOrientation.Horizontal">
            <summary>
            Horizontal orientation
            </summary>
        </member>
        <member name="F:LiveCharts.SeriesOrientation.Vertical">
            <summary>
            Vertical orientation
            </summary>
        </member>
        <member name="T:LiveCharts.StackMode">
            <summary>
            Stacked mode, for stacked series
            </summary>
        </member>
        <member name="F:LiveCharts.StackMode.Values">
            <summary>
            Stacks the values, eg: if values are 1,2,3 the stacked total is 6
            </summary>
        </member>
        <member name="F:LiveCharts.StackMode.Percentage">
            <summary>
            Stacks percentage, eg: if values are 1,2,3, they are actually being stacked as (1/6), (2/6), (3/6) [value/totalSum]
            </summary>
        </member>
        <member name="T:LiveCharts.TooltipSelectionMode">
            <summary>
            Tooltip selection modes
            </summary>
        </member>
        <member name="F:LiveCharts.TooltipSelectionMode.Auto">
            <summary>
            LiveCharts will decide the selection mode based on the series (that fired the tooltip) preferred section mode
            </summary>
        </member>
        <member name="F:LiveCharts.TooltipSelectionMode.OnlySender">
            <summary>
            Gets only the hovered point 
            </summary>
        </member>
        <member name="F:LiveCharts.TooltipSelectionMode.SharedXValues">
            <summary>
            Gets all the points that shares the value X in the chart
            </summary>
        </member>
        <member name="F:LiveCharts.TooltipSelectionMode.SharedYValues">
            <summary>
            Gets all the points that shares the value Y in the chart
            </summary>
        </member>
        <member name="F:LiveCharts.TooltipSelectionMode.SharedXInSeries">
            <summary>
            Gets all the points that shares the value X in the hovered series
            </summary>
        </member>
        <member name="F:LiveCharts.TooltipSelectionMode.SharedYInSeries">
            <summary>
            Gets all the points that shares the value Y in the hovered series
            </summary>
        </member>
        <member name="T:LiveCharts.UpdaterState">
            <summary>
            Defines chart updater state
            </summary>
        </member>
        <member name="F:LiveCharts.UpdaterState.Running">
            <summary>
            Indicates that the updater is running and listening for changes.
            </summary>
        </member>
        <member name="F:LiveCharts.UpdaterState.Paused">
            <summary>
            Indicated that the updater is paused, it won't update.
            </summary>
        </member>
        <member name="T:LiveCharts.VisualElementsCollection">
            <summary>
            Defines a collection of items to be added in a cartesian chart
            </summary>
        </member>
        <member name="M:LiveCharts.VisualElementsCollection.#ctor">
            <summary>
            Initializes a new instance of VisualElementsCollection
            </summary>
        </member>
        <member name="P:LiveCharts.VisualElementsCollection.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
            <value>
            The chart.
            </value>
        </member>
        <member name="T:LiveCharts.ZoomingOptions">
            <summary>
            Chart zooming options
            </summary>
        </member>
        <member name="F:LiveCharts.ZoomingOptions.None">
            <summary>
            Disables zooming
            </summary>
        </member>
        <member name="F:LiveCharts.ZoomingOptions.X">
            <summary>
            Zoom only at X axis
            </summary>
        </member>
        <member name="F:LiveCharts.ZoomingOptions.Y">
            <summary>
            Zoom only at Y axis
            </summary>
        </member>
        <member name="F:LiveCharts.ZoomingOptions.Xy">
            <summary>
            Zooms in both, X and Y axes
            </summary>
        </member>
    </members>
</doc>
