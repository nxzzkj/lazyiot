<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Jering.Javascript.NodeJS</name>
    </assembly>
    <members>
        <member name="T:Jering.Javascript.NodeJS.INodeJSService">
            <summary>
            An abstraction for invoking code in NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromFileAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module on disk.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
                <para>NodeJS caches the module using the module's path as cache identifier. This means subsequent invocations won't reread and recompile the module.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromFileAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module on disk.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
                <para>NodeJS caches the module using the module's path as cache identifier. This means subsequent invocations won't re-read and re-compile the module.</para>
            </summary>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStringAsync``1(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module string is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module string and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module string is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module string.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleString">The module in string form. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStringAsync(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module string is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module string and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module string is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module string.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleString">The module in string form. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStringAsync``1(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module string using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module string. This value mustn't be <c>null</c> and it mustn't return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStringAsync(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module string using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleFactory">The factory that creates the module string. This value mustn't be <c>null</c> and it mustn't return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStreamAsync``1(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module stream is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module stream and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module stream is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream to NodeJS.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleStream">The module in stream form. This value mustn't be <c>null</c>.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStreamAsync(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module stream is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module stream and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module stream is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream to NodeJS.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleStream">The module in stream form. This value mustn't be <c>null</c>.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStreamAsync``1(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module stream using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module stream. This value mustn't be <c>null</c> and it mustn't return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStreamAsync(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module stream using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleFactory">The factory that creates the module stream. This value mustn't be <c>null</c> and it mustn't return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Attempts to invoke a function from a module in NodeJS's cache.
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleCacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns a (bool, T) with the bool set to true on 
            success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleCacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Attempts to invoke a function from a module in NodeJS's cache.
            </summary>
            <param name="moduleCacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns true on success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleCacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="T:Jering.Javascript.NodeJS.NodeJSServiceCollectionExtensions">
            <summary>
            Extension methods for setting up NodeJS in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSServiceCollectionExtensions.AddNodeJS(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds NodeJS services to the an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The target <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationError">
            <summary>
            Represents an error caught in NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationError.#ctor(System.String,System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationError" />.
            </summary>
            <param name="errorMessage">The error's description.</param>
            <param name="errorStack">The error's NodeJS stack trace.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationError.#ctor">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationError" />.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationError.ErrorMessage">
            <summary>
            The error's description.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationError.ErrorStack">
            <summary>
            The error's NodeJS stack trace.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationException">
            <summary>
            Represents an unrecoverable issue encountered when trying to invoke javascript in NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationException.#ctor">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationException" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationException.#ctor(System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationException" />.
            </summary>
            <param name="message">The NodeJS error's description.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationException.#ctor(System.String,System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationException" />.
            </summary>
            <param name="message">The NodeJS error's description.</param>
            <param name="stack">The NodeJS error's stack trace.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.InvocationException" />.
            </summary>
            <param name="info">The data store for serialization/deserialization.</param>
            <param name="context">The struct representing the source and destination of a serialized stream.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationRequest">
            <summary>
            Represents an invocation request for NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationRequest.#ctor(Jering.Javascript.NodeJS.ModuleSourceType,System.String,System.String,System.String,System.Object[],System.IO.Stream)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationRequest" />.
            </summary>
            <param name="moduleSourceType">The source type of the module.</param>
            <param name="moduleSource">
                <para>The module's source.</para>
                <para>This value may be the path of the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />, the module as a string, or the module's cache identifier.</para>
                <para>If <paramref name="moduleSourceType" /> is not <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.Stream" />, this value must not be <c>null</c>. Additionally, if <paramref name="moduleSourceType" /> 
            is <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.File" /> or <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.String" />, this value must not be an empty string or whitespace.</para>
            </param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module's exports.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="moduleStreamSource">The module as a <see cref="T:System.IO.Stream" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleSourceType" /> is <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.Stream" /> but <paramref name="moduleStreamSource" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleSourceType" /> is <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.Cache" /> but <paramref name="moduleSource" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleSourceType" /> is <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.File" /> or <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.String" /> but <paramref name="moduleSource" /> 
            is <c>null</c>, whitespace or an empty string.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationRequest.ResetStreamPosition">
            <summary>
            Resets <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> to its initial position.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is an unseekable <see cref="T:System.IO.Stream" />.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationRequest.CheckStreamAtInitialPosition">
            <summary>
            Returns a boolean value indicating whether or not <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is at its initial position.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is an unseekable <see cref="T:System.IO.Stream" />.</exception>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleSourceType">
            <summary>
            Gets the source type of the module.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleSource">
            <summary>
            Gets the module's source
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.NewCacheIdentifier">
            <summary>
            Gets the module's cache identifier.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.ExportName">
            <summary>
            Gets the name of the function in the module's exports to invoke.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.Args">
            <summary>
            Gets the sequence of JSON-serializable arguments to pass to the function to invoke.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource">
            <summary>
            Gets the module as a <see cref="T:System.IO.Stream" />.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.ModuleSourceType">
            <summary>
            Source type of the module to be invoked in NodeJS.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.ModuleSourceType.Cache">
            <summary>
            A module cached in NodeJS.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.ModuleSourceType.File">
            <summary>
            A file.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.ModuleSourceType.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.ModuleSourceType.Stream">
            <summary>
            A Stream.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.Concurrency">
            <summary>
            Concurrency modes for invocations.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.Concurrency.None">
            <summary>
            Single threaded.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.Concurrency.MultiProcess">
            <summary>
            Multi-process.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions">
            <summary>
            An <see cref="T:Microsoft.Extensions.Options.IConfigureOptions`1" /> implementation for configuring <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessOptions" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions" />.
            </summary>
            <param name="serviceScopeFactory">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions.Configure(Jering.Javascript.NodeJS.NodeJSProcessOptions)">
            <summary>
            Configures a <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessOptions" /> using data from the application's <see cref="T:System.IServiceProvider" />.
            </summary>
            <param name="options">The target <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessOptions" /> to configure.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.ConnectionException">
            <summary>
            Represents an unrecoverable issue encountered when connecting to NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConnectionException.#ctor">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConnectionException" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConnectionException.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConnectionException" />.
            </summary>
            <param name="message">The connection issue's description.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConnectionException" />.
            </summary>
            <param name="info">The data store for serialization/deserialization.</param>
            <param name="context">The struct representing the source and destination of a serialized stream.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConnectionException" />.
            </summary>
            <param name="message">The connection issue's description.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.HttpNodeJSPoolService">
            <summary>
            An implementation of <see cref="T:Jering.Javascript.NodeJS.INodeJSService" /> that uses Http for inter-process communication with a pool of NodeJS processes.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.HttpNodeJSPoolService.Size">
            <summary>
            Gets the size of the <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSPoolService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Jering.Javascript.NodeJS.HttpNodeJSService})">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSPoolService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromFileAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module on disk.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
                <para>NodeJS caches the module using the module's path as cache identifier. This means subsequent invocations won't reread and recompile the module.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromFileAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module on disk.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
                <para>NodeJS caches the module using the module's path as cache identifier. This means subsequent invocations won't re-read and re-compile the module.</para>
            </summary>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStringAsync``1(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module string is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module string and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module string is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module string.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleString">The module in string form. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStringAsync(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module string is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module string and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module string is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module string.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleString">The module in string form. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStringAsync``1(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module string using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module string. This value mustn't be <c>null</c> and it mustn't return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStringAsync(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module string using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleFactory">The factory that creates the module string. This value mustn't be <c>null</c> and it mustn't return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStreamAsync``1(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module stream is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module stream and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module stream is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream to NodeJS.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleStream">The module in stream form. This value mustn't be <c>null</c>.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStreamAsync(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module stream is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module stream and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module stream is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream to NodeJS.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleStream">The module in stream form. This value mustn't be <c>null</c>.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStreamAsync``1(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module stream using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module stream. This value mustn't be <c>null</c> and it mustn't return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStreamAsync(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module stream using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleFactory">The factory that creates the module stream. This value mustn't be <c>null</c> and it mustn't return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Attempts to invoke a function from a module in NodeJS's cache.
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleCacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns a (bool, T) with the bool set to true on 
            success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleCacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.TryInvokeFromCacheAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Attempts to invoke a function from a module in NodeJS's cache.
            </summary>
            <param name="moduleCacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns true on success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleCacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.Dispose">
            <summary>
            Disposes this instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.Dispose(System.Boolean)">
            <summary>
            Disposes the instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
            <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.HttpNodeJSService">
            <summary>
                <para>An implementation of <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" /> that uses Http for inter-process communication.</para>
                <para>The NodeJS child process starts a Http server on an arbitrary port (unless otherwise specified
            using <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.Port" />) and receives invocation requests as Http requests.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.#ctor(Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions},Jering.Javascript.NodeJS.IHttpContentFactory,Jering.Javascript.NodeJS.IEmbeddedResourcesService,Jering.Javascript.NodeJS.IFileWatcherFactory,Jering.Javascript.NodeJS.IMonitorService,Jering.Javascript.NodeJS.ITaskService,Jering.IocServices.System.Net.Http.IHttpClientService,Jering.Javascript.NodeJS.IJsonService,Jering.Javascript.NodeJS.INodeJSProcessFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSService" />.
            </summary>
            <param name="outOfProcessNodeJSServiceOptionsAccessor">
            </param>
            <param name="httpContentFactory">
            </param>
            <param name="embeddedResourcesService">
            </param>
            <param name="fileWatcherFactory">
            </param>
            <param name="monitorService">
            </param>
            <param name="taskService">
            </param>
            <param name="httpClientService">
            </param>
            <param name="jsonService">
            </param>
            <param name="nodeJSProcessFactory">
            </param>
            <param name="loggerFactory">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.#ctor(Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions},Jering.Javascript.NodeJS.IHttpContentFactory,Jering.Javascript.NodeJS.IEmbeddedResourcesService,Jering.IocServices.System.Net.Http.IHttpClientService,Jering.Javascript.NodeJS.IJsonService,Jering.Javascript.NodeJS.INodeJSProcessFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                <para>Creates a <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSService" />.</para>
                <para>If this constructor is used, file watching is disabled.</para>
            </summary>
            <param name="outOfProcessNodeJSServiceOptionsAccessor">
            </param>
            <param name="httpContentFactory">
            </param>
            <param name="embeddedResourcesService">
            </param>
            <param name="httpClientService">
            </param>
            <param name="jsonService">
            </param>
            <param name="nodeJSProcessFactory">
            </param>
            <param name="loggerFactory">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.TryInvokeAsync``1(Jering.Javascript.NodeJS.InvocationRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes code in the NodeJS instance.
            </summary>
            <typeparam name="T">The type of the object this method will return. It can be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="invocationRequest">The invocation request to send to the NodeJS process.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the invocation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.OnConnectionEstablishedMessageReceived(System.String)">
            <summary>
                <para>This method is called when the connection established message from the NodeJS process is received.</para>
                <para>The message can be used to complete the handshake with the
            NodeJS process, for example by delivering a port and an IP address to use in further communications.</para>
            </summary>
            <param name="connectionEstablishedMessage">The connection established message.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.Dispose(System.Boolean)">
            <summary>
            Disposes the instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
            <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IHttpContentFactory">
            <summary>
                <para>An abstraction for <see cref="T:System.Net.Http.HttpContent" /> creation.</para>
                <para>To use a custom <see cref="T:System.Net.Http.HttpContent" /> implementation, implement this interface and overwrite the default DI service for <see cref="T:Jering.Javascript.NodeJS.IHttpContentFactory" />.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IHttpContentFactory.Create(Jering.Javascript.NodeJS.InvocationRequest)">
            <summary>
            Creates an instance of a <see cref="T:System.Net.Http.HttpContent" /> implementation.
            </summary>
            <param name="invocationRequest">The invocation request to transmit over Http.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationContent">
            <summary>
                <para>An implementation of <see cref="T:System.Net.Http.HttpContent" /> that serializes an <see cref="T:Jering.Javascript.NodeJS.InvocationRequest" /> to a <see cref="T:System.IO.Stream" />.</para>
                <para>Serializion is handled differently if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is specified since a stream cannot be efficiently serialized to JSON. 
            <see cref="T:Jering.Javascript.NodeJS.InvocationContent" /> creates a request with Content-Type multipart/mixed and sends the stream as a separate part.
            </para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContent.#ctor(Jering.Javascript.NodeJS.IJsonService,Jering.Javascript.NodeJS.InvocationRequest)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationContent" />.
            </summary>
            <param name="jsonService">The service for serializing data to JSON.</param>
            <param name="invocationRequest">The invocation request to transmit over Http.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            Serialize the HTTP content to a stream as an asynchronous operation.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <param name="length">The length in bytes of the HTTP content.</param>
            <returns>true if length is a valid length; otherwise, false.</returns>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationContentFactory">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IHttpContentFactory" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContentFactory.#ctor(Jering.Javascript.NodeJS.IJsonService)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationContentFactory" />.
            </summary>
            <param name="jsonService">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContentFactory.Create(Jering.Javascript.NodeJS.InvocationRequest)">
            <summary>
            Creates an instance of a <see cref="T:System.Net.Http.HttpContent" /> implementation.
            </summary>
            <param name="invocationRequest">The invocation request to transmit over Http.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.INodeJSProcess">
            <summary>
                <para>A thread-safe abstraction for a NodeJS process.</para>
                <para>This abstraction exists for these reasons:</para>
                <list type="bullet">
                    <item>Accessing properties of disposed process objects causes exceptions. For example, after calling MyProcess.Dispose(), 
            calling MyProcess.HasExited throws an InvalidOperationException. This abstraction prevents such exceptions by tracking
            the disposed status of the process in a thread safe manner.</item>
                    <item>NodeJS processes have an extra state: connected. This abstraction wraps the state together with the process.</item>
                    <item>This abstraction allows for more simpler and more thorough tests through mocking.</item>
                </list>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)">
            <summary>
                <para>Adds a handler for output messages.</para>
                <para>The added handler is more convenient than what you'd add with <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />:
            when the NodeJS process writes to stdout, the <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> fires once for each line written.
            The handler added by this method fires only when a complete message has been built. This way subscribers don't need to manually build messages.</para>
                <para>This method is not thread-safe.</para>
            </summary>
            <param name="messageReceivedHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)">
            <summary>
                <para>Adds a handler for error messages.</para>
                <para>The added handler is more convenient than what you'd add with <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />:
            when the NodeJS process writes to stderr, the <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> fires once for each line written.
            The handler added by this method fires only when a complete message has been built. This way subscribers don't need to manually build messages.</para>
                <para>This method is not thread-safe.</para>
            </summary>
            <param name="messageReceivedHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Adds a <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> handler to the NodeJS process.
            </summary>
            <param name="dataReceivedEventHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Adds a <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> handler to the NodeJS process.
            </summary>
            <param name="dataReceivedEventHandler">The handler to add.</param>
        </member>
        <member name="P:Jering.Javascript.NodeJS.INodeJSProcess.Connected">
            <summary>
            Gets the value indicating whether the NodeJS process is connected.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.INodeJSProcess.HasExited">
            <summary>
            Gets the value indicating whether the NodeJS process has exited.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.INodeJSProcess.ExitStatus">
            <summary>
                <para>Gets the string describing the NodeJS process's exit status.</para>
                <para>If the process has not exited, returns "Process has not exited".</para>
                <para>If the process has been disposed, returns "Process has been disposed".</para>
                <para>If the process has exit but has not been disposed, returns its exit code.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.INodeJSProcess.SafeID">
            <summary>
                <para>Gets the NodeJS process's ID.</para>
                <para>If the ID can't be retrieved, returns -1.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.SetConnected">
            <summary>
            Sets the NodeJS process's connected state to true.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginErrorReadLine">
            <summary>
            Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginOutputReadLine">
            <summary>
            Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.Kill">
            <summary>
            Kills the underlying NodeJS process.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.INodeJSProcessFactory">
            <summary>
                <para>An abstraction for NodeJS process creation.</para>
                <para>To customize process creation, implement this interface and overwrite the default DI service for <see cref="T:Jering.Javascript.NodeJS.INodeJSProcessFactory" />.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcessFactory.Create(System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.INodeJSProcess" /> running <paramref name="serverScript" />.
            </summary>
            <param name="serverScript">The server script to run on NodeJS.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.MessageReceivedEventHandler">
            <summary>
                <para>Represents the method that will handle the message received event of a process.</para>
                <para>This method is a convenient alternative to <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> which handles each line of a message.</para>
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.NodeJSProcess">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.INodeJSProcess" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.#ctor(System.Diagnostics.Process)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.NodeJSProcess" />.
            </summary>
            <param name="process">The NodeJS process.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="process" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="process" /> has exited.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="process" /> has not started or has been disposed of.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.AddOutputReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)">
            <summary>
                <para>Adds a handler for output messages.</para>
                <para>The added handler is more convenient than what you'd add with <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />:
            when the NodeJS process writes to stdout, the <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> fires once for each line written.
            The handler added by this method fires only when a complete message has been built. This way subscribers don't need to manually build messages.</para>
                <para>This method is not thread-safe.</para>
            </summary>
            <param name="messageReceivedHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.AddErrorReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)">
            <summary>
                <para>Adds a handler for error messages.</para>
                <para>The added handler is more convenient than what you'd add with <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />:
            when the NodeJS process writes to stderr, the <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> fires once for each line written.
            The handler added by this method fires only when a complete message has been built. This way subscribers don't need to manually build messages.</para>
                <para>This method is not thread-safe.</para>
            </summary>
            <param name="messageReceivedHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Adds a <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> handler to the NodeJS process.
            </summary>
            <param name="dataReceivedEventHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.AddErrorDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Adds a <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> handler to the NodeJS process.
            </summary>
            <param name="dataReceivedEventHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.BeginOutputReadLine">
            <summary>
            Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.BeginErrorReadLine">
            <summary>
            Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.SetConnected">
            <summary>
            Sets the NodeJS process's connected state to true.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcess.ExitStatus">
            <summary>
                <para>Gets the string describing the NodeJS process's exit status.</para>
                <para>If the process has not exited, returns "Process has not exited".</para>
                <para>If the process has been disposed, returns "Process has been disposed".</para>
                <para>If the process has exit but has not been disposed, returns its exit code.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcess.HasExited">
            <summary>
            Gets the value indicating whether the NodeJS process has exited.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcess.Connected">
            <summary>
            Gets the value indicating whether the NodeJS process is connected.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.Kill">
            <summary>
            Kills the underlying NodeJS process.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcess.SafeID">
            <summary>
                <para>Gets the NodeJS process's ID.</para>
                <para>If the ID can't be retrieved, returns -1.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.Dispose">
            <summary>
            Kills and disposes of the NodeJS process.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.Dispose(System.Boolean)">
            <summary>
            Kills and disposes of the NodeJS process.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.NodeJSProcessFactory">
            <summary>
            The default <see cref="T:Jering.Javascript.NodeJS.INodeJSProcessFactory" /> implementation.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcessFactory.#ctor(Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.NodeJSProcessOptions})">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessFactory" />.
            </summary>
            <param name="optionsAccessor">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcessFactory.Create(System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.INodeJSProcess" /> running <paramref name="serverScript" />.
            </summary>
            <param name="serverScript">The server script to run on NodeJS.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.NodeJSProcessOptions">
            <summary>
            Options for a NodeJS process.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath">
            <summary>
                <para>The base path for resolving paths of NodeJS modules on disk.</para>
                <para>If this value is <c>null</c>, whitespace or an empty string and the application is an ASP.NET Core application, 
            project path is <see cref="P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.ContentRootPath" />.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.NodeAndV8Options">
            <summary>
                <para>NodeJS and V8 options in the form [NodeJS options] [V8 options].</para>
                <para>The full list of NodeJS options can be found here: https://nodejs.org/api/cli.html#cli_options.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.Port">
            <summary>
                <para>The port that the server running on NodeJS will listen on.</para>
                <para>If set to 0, the OS will choose the port. This value defaults to 0.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.EnvironmentVariables">
            <summary>
                <para>The environment variables for the NodeJS process.</para>
                <para>The full list of NodeJS environment variables can be found here: https://nodejs.org/api/cli.html#cli_environment_variables.</para>
                <para>If this value doesn't contain an element with key "NODE_ENV" and the application is an ASP.NET Core application,
            an element with key "NODE_ENV" is added. The added element's value is "development" if <see cref="P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName" /> is <see cref="F:Microsoft.AspNetCore.Hosting.EnvironmentName.Development" />,
            and "production" otherwise.</para>
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService">
            <summary>
                <para>An abstract <see cref="T:Jering.Javascript.NodeJS.INodeJSService" /> implementation that facilitates working with an out of process NodeJS instance.</para>
                <para>The primary responsibilities of this class are launching and maintaining a NodeJS process.
            This class uses the stdout stream of the child process to perform a simple handshake with the NodeJS process. This is agnostic to the mechanism that
            derived classes use to actually perform the invocations (e.g., they could use HTTP-RPC, or a binary TCP
            protocol, or any other RPC-type mechanism).</para>
            </summary>
            <seealso cref="T:Jering.Javascript.NodeJS.INodeJSService" />
        </member>
        <member name="F:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.CONNECTION_ESTABLISHED_MESSAGE_START">
            <summary>
            Start of the message used to perform a handshake with the NodeJS process.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.Logger">
            <summary>
            The logger for the NodeJS process's stdout and stderr streams as well as messages from <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" /> and its implementations.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.#ctor(Jering.Javascript.NodeJS.INodeJSProcessFactory,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions},Jering.Javascript.NodeJS.IEmbeddedResourcesService,Jering.Javascript.NodeJS.IFileWatcherFactory,Jering.Javascript.NodeJS.IMonitorService,Jering.Javascript.NodeJS.ITaskService,System.Reflection.Assembly,System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" /> instance.
            </summary>
            <param name="nodeProcessFactory">
            </param>
            <param name="logger">
            </param>
            <param name="optionsAccessor">
            </param>
            <param name="embeddedResourcesService">
            </param>
            <param name="fileWatcherFactory">
            </param>
            <param name="monitorService">
            </param>
            <param name="taskService">
            </param>
            <param name="serverScriptAssembly">
            </param>
            <param name="serverScriptName">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.#ctor(Jering.Javascript.NodeJS.INodeJSProcessFactory,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions},Jering.Javascript.NodeJS.IEmbeddedResourcesService,System.Reflection.Assembly,System.String)">
            <summary>
                <para>Creates an <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" /> instance.</para>
                <para>If this constructor is used, file watching is disabled.</para>
            </summary>
            <param name="nodeProcessFactory">
            </param>
            <param name="logger">
            </param>
            <param name="optionsAccessor">
            </param>
            <param name="embeddedResourcesService">
            </param>
            <param name="serverScriptAssembly">
            </param>
            <param name="serverScriptName">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.TryInvokeAsync``1(Jering.Javascript.NodeJS.InvocationRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes code in the NodeJS instance.
            </summary>
            <typeparam name="T">The type of the object this method will return. It can be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="invocationRequest">The invocation request to send to the NodeJS process.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the invocation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.OnConnectionEstablishedMessageReceived(System.String)">
            <summary>
                <para>This method is called when the connection established message from the NodeJS process is received.</para>
                <para>The message can be used to complete the handshake with the
            NodeJS process, for example by delivering a port and an IP address to use in further communications.</para>
            </summary>
            <param name="connectionEstablishedMessage">The connection established message.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromFileAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module on disk.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
                <para>NodeJS caches the module using the module's path as cache identifier. This means subsequent invocations won't reread and recompile the module.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromFileAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module on disk.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
                <para>NodeJS caches the module using the module's path as cache identifier. This means subsequent invocations won't re-read and re-compile the module.</para>
            </summary>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStringAsync``1(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module string is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module string and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module string is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module string.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleString">The module in string form. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStringAsync(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module string is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module string and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module string is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module string.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleString">The module in string form. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStringAsync``1(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module string using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module string. This value mustn't be <c>null</c> and it mustn't return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStringAsync(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module string using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleFactory">The factory that creates the module string. This value mustn't be <c>null</c> and it mustn't return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStreamAsync``1(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module stream is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module stream and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module stream is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream to NodeJS.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleStream">The module in stream form. This value mustn't be <c>null</c>.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStreamAsync(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module stream is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module stream and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused Otherwise, the module stream is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream to NodeJS.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleStream">The module in stream form. This value mustn't be <c>null</c>.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStreamAsync``1(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module stream using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module stream. This value mustn't be <c>null</c> and it mustn't return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStreamAsync(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module stream using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleFactory">The factory that creates the module stream. This value mustn't be <c>null</c> and it mustn't return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Attempts to invoke a function from a module in NodeJS's cache.
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleCacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns a (bool, T) with the bool set to true on 
            success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleCacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.TryInvokeFromCacheAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Attempts to invoke a function from a module in NodeJS's cache.
            </summary>
            <param name="moduleCacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns true on success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleCacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.Dispose">
            <summary>
            Disposes this instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.Dispose(System.Boolean)">
            <summary>
            Disposes the instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
            <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions">
            <summary>
            Options for an <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" />.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.TimeoutMS">
            <summary>
                <para>The maximum duration to wait for the NodeJS process to connect and to wait for responses to invocations.</para>
                <para>If this value is negative, the maximum duration is infinite.</para>
                <para>Defaults to 60000.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumRetries">
            <summary>
                <para>The number of times an invocation is retried.</para>
                <para>If set to a negative value, invocations are retried indefinitely.</para>
                <para>If the module source of an invocation is an unseekable stream, the invocation is not retried.
            If you require retries for such streams, copy their contents to a <see cref="T:System.IO.MemoryStream" />.</para>
                <para>Defaults to 1.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumConnectionRetries">
            <summary>
                <para>The number of times a NodeJS connection attempt is retried.</para>
                <para>If set to a negative value, connection attempts are retried indefinitely.</para>
                <para>Defaults to 1.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.Concurrency">
            <summary>
                <para>The concurrency mode for invocations.</para>
                <para>By default, this value is <see cref="F:Jering.Javascript.NodeJS.Concurrency.None" /> and invocations are executed synchronously by a single NodeJS process; 
            mode pros: lower memory overhead and supports all modules, cons: less performant.</para>
                <para>If this value is <see cref="F:Jering.Javascript.NodeJS.Concurrency.MultiProcess" />, <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.ConcurrencyDegree" /> NodeJS processes are created and invocations are
            distributed among them using round robin load balancing; mode pros: more performant, cons: higher memory overhead and doesn't work with modules that 
            have persistent state.</para>
                <para>Defaults to <see cref="F:Jering.Javascript.NodeJS.Concurrency.None" />.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.ConcurrencyDegree">
            <summary>
                <para>The concurrency degree.</para>
                <para>If <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.Concurrency" /> is <see cref="F:Jering.Javascript.NodeJS.Concurrency.MultiProcess" />, this value is the number of NodeJS processes.</para>
                <para>If this value is less than or equal to 0, concurrency degree is the number of logical processors the current machine has.</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.Concurrency" /> is <see cref="F:Jering.Javascript.NodeJS.Concurrency.None" />.</para>
                <para>Defaults to 0.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching">
            <summary>
                <para>The value specifying whether file watching is enabled.</para>
                <para>If file watching is enabled, when a file in <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchPath" /> with name matching a pattern in <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchFileNamePatterns" /> changes,
            NodeJS is restarted.</para>
                <para>Defaults to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchPath">
            <summary>
                <para>The path of the directory to watch for file changes.</para>
                <para>If this value is <c>null</c>, the path <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" /> is watched.</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" /> is <c>false</c>.</para>
                <para>Defaults to <c>null</c></para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchSubdirectories">
            <summary>
                <para>The value specifying whether to watch subdirectories of <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchPath" />.</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" /> is <c>false</c>.</para>
                <para>Defaults to <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchFileNamePatterns">
            <summary>
                <para>The file name patterns to watch.</para>
                <para>In a pattern, "*" represents 0 or more of any character and "?" represents 0 or 1 of any character. For example,
            "TestFile1.js" matches the pattern "*File?.js".</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" /> is <c>false</c>.</para>
                <para>Defaults to "*.js", "*.jsx", "*.ts", "*.tsx", "*.json" and "*.html".</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchGracefulShutdown">
            <summary>
                <para>The value specifying whether NodeJS processes shutdown gracefully when a file changes.</para>
                <para>If this value is true, NodeJS processes shutdown gracefully. Otherwise they're killed immediately.</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" /> is <c>false</c>.</para>
                <para>What's a graceful shutdown? When a file changes, a new NodeJS process is created and subsequent invocations are sent to it. The old NodeJS process
            might still be handling earlier invocations. If graceful shutdown is enabled, the old NodeJS process is killed after its
            invocations complete. If graceful shutdown is disabled, the old NodeJS process is killed immediately and
            invocations are retried in the new NodeJS process if retries remain (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumRetries" />).</para>
                <para>Should I use graceful shutdown? Shutting down gracefully is safer: chances of an invocation exhausting retries and failing is lower, also,
            you won't face issues from an invocation terminating midway. However, graceful shutdown does incur a small performance cost
            and invocations complete using the outdated version of your script. Weigh these factors for your script and use-case to decide whether to use graceful shutdown.</para>
                <para>Defaults to <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.Void">
            <summary>
            Represents non-existence.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.StaticNodeJSService">
            <summary>
            A class that provides static access to an instance of the default <see cref="T:Jering.Javascript.NodeJS.INodeJSService" /> implementation's public methods.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.DisposeServiceProvider">
            <summary>
                <para>Disposes the underlying <see cref="T:System.IServiceProvider" /> used to resolve <see cref="T:Jering.Javascript.NodeJS.INodeJSService" />.</para>
                <para>This method is not thread safe.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.Configure``1(System.Action{``0})">
            <summary>
                <para>Configures options.</para>
                <para>This method is not thread safe.</para>
            </summary>
            <typeparam name="T">The type of options to configure.</typeparam>
            <param name="configureOptions">The action that configures the options.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.SetServices(Microsoft.Extensions.DependencyInjection.ServiceCollection)">
            <summary>
                <para>Sets the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection" /> used to create an <see cref="T:Jering.Javascript.NodeJS.INodeJSService" />.</para>
                <para>This method is not thread safe.</para>
            </summary>
            <param name="services">
                <para>The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection" /> used to create an <see cref="T:Jering.Javascript.NodeJS.INodeJSService" />.</para>
                <para>If this value doesn't contain a valid service for <see cref="T:Jering.Javascript.NodeJS.INodeJSService" />, <see cref="T:System.InvalidOperationException" />s are
            thrown on subsequent invocations.</para>
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromFileAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module on disk.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
                <para>NodeJS caches the module using the module's path as cache identifier. This means subsequent invocations won't reread and recompile the module.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromFileAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module on disk.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
                <para>NodeJS caches the module using the module's path as cache identifier. This means subsequent invocations won't re-read and re-compile the module.</para>
            </summary>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStringAsync``1(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module string is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module string and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused. Otherwise, the module string is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module string.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleString">The module in string form. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStringAsync(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module string is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module string and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused. Otherwise, the module string is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module string.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleString">The module in string form. This value mustn't be <c>null</c>, whitespace or an empty string.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStringAsync``1(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module string using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module string. This value mustn't be <c>null</c> and it mustn't return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStringAsync(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in string form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module string using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleFactory">The factory that creates the module string. This value mustn't be <c>null</c> and it mustn't return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStreamAsync``1(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module stream is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module stream and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused. Otherwise, the module stream is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream to NodeJS.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleStream">The module in stream form. This value mustn't be <c>null</c>.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStreamAsync(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>If <paramref name="newCacheIdentifier" /> is <c>null</c>, the module stream is sent to NodeJS and compiled for one time use.</para>
                <para>If <paramref name="newCacheIdentifier" /> isn't <c>null</c>, the module stream and the cache identifier are both sent to NodeJS. If the module exists in NodeJS's cache, it's reused. Otherwise, the module stream is compiled and cached.
            On subsequent invocations, you may use <see cref="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream to NodeJS.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleStream">The module in stream form. This value mustn't be <c>null</c>.</param>
            <param name="newCacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache the module.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStreamAsync``1(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module stream using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module stream. This value mustn't be <c>null</c> and it mustn't return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStreamAsync(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
                <para>Invokes a function from a NodeJS module in stream form.</para>
                <para>Initially, only sends the module's cache identifier to NodeJS. If the module exists in NodeJS's cache, it's reused. If the module doesn't exist in NodeJS's cache, creates the module stream using 
            <paramref name="moduleFactory" /> and sends it, together with the module's cache identifier, to NodeJS for compilation and caching.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, the module's exports is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in the module's exports.</para>
            </summary>
            <param name="moduleFactory">The factory that creates the module stream. This value mustn't be <c>null</c> and it mustn't return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Attempts to invoke a function from a module in NodeJS's cache.
            </summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleCacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns a (bool, T) with the bool set to true on 
            success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleCacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Attempts to invoke a function from a module in NodeJS's cache.
            </summary>
            <param name="moduleCacheIdentifier">The module's cache identifier. This value mustn't be <c>null</c>.</param>
            <param name="exportName">The name of the function in the module's exports to invoke. If this value is <c>null</c>, the module's exports is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns true on success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleCacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="T:Jering.Javascript.NodeJS.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_InvocationRequest_ModuleSourceCannotBeNull">
            <summary>
              Looks up a localized string similar to If moduleSourceType is cache, moduleSource cannot be null..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_InvocationRequest_ModuleSourceCannotBeNullWhitespaceOrAnEmptyString">
            <summary>
              Looks up a localized string similar to If moduleSourceType is file or string, moduleSource cannot be null, whitespace or an empty string..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_InvocationRequest_ModuleStreamSourceCannotBeNull">
            <summary>
              Looks up a localized string similar to If moduleSourceType is stream, moduleStreamSource cannot be null..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_NodeJSProcess_ProcessHasExited">
            <summary>
              Looks up a localized string similar to The process has exited..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_NodeJSProcess_ProcessHasNotBeenStartedOrHasBeenDisposed">
            <summary>
              Looks up a localized string similar to The process has not been started or has been disposed of..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_Shared_ValueCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Value cannot be empty..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_Shared_ValueCannotBeNullWhitespaceOrAnEmptyString">
            <summary>
              Looks up a localized string similar to Value cannot be null, whitespace or an empty string..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ConnectionException_OutOfProcessNodeJSService_ConnectionAttemptTimedOut">
            <summary>
              Looks up a localized string similar to Attempt to connect to Node timed out after {0}ms. Process exited: {1}. Exit status: {2}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ConnectionException_OutOfProcessNodeJSService_FailedToConnect">
            <summary>
              Looks up a localized string similar to Failed to connect to NodeJS. Refer to the inner exception for details..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvalidOperationException_InvocationRequest_StreamIsNull">
            <summary>
              Looks up a localized string similar to Stream is null..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvalidOperationException_InvocationRequest_StreamIsUnseekable">
            <summary>
              Looks up a localized string similar to Stream is unseekable..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvalidOperationException_NodeJSProcessFactory_FailedToStartNodeProcess">
            <summary>
               Looks up a localized string similar to Failed to start Node process. To resolve this:
            
            [1] Ensure that NodeJS is installed and can be found in one of the PATH directories. The current PATH enviroment variable is: {0}. Make sure that the Node executable is in one of those directories, or update your PATH.
            
            [2] Refer to the InnerException for further details..
             </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvocationException_HttpNodeJSService_UnexpectedStatusCode">
            <summary>
              Looks up a localized string similar to Received a HTTP response with an unexpected status code: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvocationException_OutOfProcessNodeJSService_InvocationTimedOut">
            <summary>
              Looks up a localized string similar to The Node invocation timed out after {0}ms. You can change the timeout duration by setting the {1} property on {2}. Do ensure that your NodeJS function always invokes the callback (or throws an exception synchronously), even if it encounters an error..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_OutOfProcessNodeJSService_BeforeSet">
            <summary>
              Looks up a localized string similar to Before set, thread ID: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_OutOfProcessNodeJSService_BeforeWait">
            <summary>
              Looks up a localized string similar to Before wait, thread ID: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_ConnectedToNodeJSProcess">
            <summary>
              Looks up a localized string similar to Connected to NodeJS process: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_FileChangedMovingtoNewNodeJSProcess">
            <summary>
              Looks up a localized string similar to File changed: "{0}". Moving to new NodeJS process..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_KillingNodeJSProcess">
            <summary>
              Looks up a localized string similar to Killing NodeJS process: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogWarning_ConnectionAttemptFailed">
            <summary>
               Looks up a localized string similar to An attempt to connect to NodeJS failed. Retries remaining: {0}.
            Exception:
              {1}.
             </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogWarning_InvocationAttemptFailed">
            <summary>
               Looks up a localized string similar to An invocation attempt failed. Retries remaining: {0}.
            Exception:
              {1}.
             </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.EmbeddedResourcesService">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IEmbeddedResourcesService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.EmbeddedResourcesService.ReadAsString(System.Reflection.Assembly,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly, as a string.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="embeddedResourceAssembly">The assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a string.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.EmbeddedResourcesService.ReadAsString(System.Type,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a string.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="typeFromEmbeddedResourceAssembly">Any <see cref="T:System.Type" /> in the assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a string.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.EmbeddedResourcesService.ReadAsStream(System.Reflection.Assembly,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a stream.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="embeddedResourceAssembly">The assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a stream.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.EmbeddedResourcesService.ReadAsStream(System.Type,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a stream.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="typeFromEmbeddedResourceAssembly">Any <see cref="T:System.Type" /> in the assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a stream.</returns>
        </member>
        <member name="T:Jering.Javascript.NodeJS.EnvironmentService">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IEnvironmentService" />.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.EnvironmentService.ProcessorCount">
            <summary>
            Gets the number of processors on the current machine.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.FileChangedEventHandler">
            <summary>
                <para>Represents the method that will handle file changed events.</para>
            </summary>
            <param name="path">The path of the changed file.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.FileWatcher">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IFileWatcher" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcher.#ctor(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex},Jering.Javascript.NodeJS.FileChangedEventHandler)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.FileWatcher" />.
            </summary>
            <param name="directoryPath">The path of the directory to watch for file changes.</param>
            <param name="includeSubdirectories">The value specifying whether to watch subdirectories of <paramref name="directoryPath" />.</param>
            <param name="filters">The filters for file names to watch.</param>
            <param name="fileChangedEventHandler">The method that will handle file changed events.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="directoryPath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filters" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="fileChangedEventHandler" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="filters" /> is empty.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcher.Stop">
            <summary>
            Stops file watching.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcher.Start">
            <summary>
            Starts file watching.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcher.Dispose">
            <summary>
            Disposes of the <see cref="T:Jering.Javascript.NodeJS.FileWatcher" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcher.Dispose(System.Boolean)">
            <summary>
            Disposes of the NodeJS <see cref="T:Jering.Javascript.NodeJS.FileWatcher" />.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.FileWatcherFactory">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IFileWatcherFactory" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcherFactory.#ctor(Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.NodeJSProcessOptions})">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.FileWatcherFactory" />.
            </summary>
            <param name="nodeJSProcessOptionsAccessor">The NodeJS process options.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcherFactory.Create(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},Jering.Javascript.NodeJS.FileChangedEventHandler)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.IFileWatcher" />.
            </summary>
            <param name="watchPath">The path of the directory to watch for file changes.</param>
            <param name="watchSubdirectories">The value specifying whether to watch subdirectories of <paramref name="watchPath" />.</param>
            <param name="watchFileNamesPatterns">The file name patterns to watch.</param>
            <param name="fileChangedEventHandler">The method that will handle file changed events.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IEmbeddedResourcesService">
            <summary>
            An abstraction for reading of embedded resources.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IEmbeddedResourcesService.ReadAsString(System.Reflection.Assembly,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly, as a string.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="embeddedResourceAssembly">The assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a string.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IEmbeddedResourcesService.ReadAsString(System.Type,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a string.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="typeFromEmbeddedResourceAssembly">Any <see cref="T:System.Type" /> in the assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a string.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IEmbeddedResourcesService.ReadAsStream(System.Reflection.Assembly,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a stream.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="embeddedResourceAssembly">The assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a stream.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IEmbeddedResourcesService.ReadAsStream(System.Type,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a stream.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="typeFromEmbeddedResourceAssembly">Any <see cref="T:System.Type" /> in the assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a stream.</returns>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IEnvironmentService">
            <summary>
            An abstraction for <see cref="T:System.Environment" /></summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.IEnvironmentService.ProcessorCount">
            <summary>
            Gets the number of processors on the current machine.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IFileWatcher">
            <summary>
            An abstraction for watching files.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IFileWatcher.Stop">
            <summary>
            Stops file watching.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IFileWatcher.Start">
            <summary>
            Starts file watching.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IFileWatcherFactory">
            <summary>
            An abstraction for creating <see cref="T:Jering.Javascript.NodeJS.IFileWatcher" />s.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IFileWatcherFactory.Create(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},Jering.Javascript.NodeJS.FileChangedEventHandler)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.IFileWatcher" />.
            </summary>
            <param name="watchPath">The path of the directory to watch for file changes.</param>
            <param name="watchSubdirectories">The value specifying whether to watch subdirectories of <paramref name="watchPath" />.</param>
            <param name="watchFileNamesPatterns">The file name patterns to watch.</param>
            <param name="fileChangedEventHandler">The method that will handle file changed events.</param>
            <returns>
            </returns>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IJsonService">
            <summary>
                <para>An abstraction for JSON serialization/deserialization.</para>
                <para>To perform custom JSON serialization/deserialization, implement this interface and overwrite the default DI service for <see cref="T:Jering.Javascript.NodeJS.IJsonService" />.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IJsonService.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes the JSON contained by <paramref name="stream" /> into a <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the JSON to deserialize.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel deserialization.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IJsonService.SerializeAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes <paramref name="value" /> and writes the generated JSON to <paramref name="stream" />.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to write generated JSON to.</param>
            <param name="value">The object to serialize.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel serialization.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IMonitorService">
            <summary>
                <para>An abstraction for <see cref="T:System.Threading.Monitor" />.</para>
                <para>This abstraction is necessary for testing of multi-threading logic in <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" />.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IMonitorService.Exit(System.Object)">
            <summary>
            Releases an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to release the lock.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IMonitorService.TryEnter(System.Object,System.Boolean@)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
            </summary>
            <param name="obj">The object on which to acquire the lock.</param>
            <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is 
            set even if an exception occurs during the attempt to acquire the lock.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IMonitorService.Enter(System.Object,System.Boolean@)">
            <summary>
            Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
            </summary>
            <param name="obj">The object on which to wait.</param>
            <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output 
            is set even if an exception occurs during the attempt to acquire the lock. Note If no exception occurs, the output of this method is always true.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IMonitorService.Enter(System.Object)">
            <summary>
            Acquires an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to acquire the monitor lock.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.ITaskService">
            <summary>
            An abstraction for <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ITaskService.Run(System.Action)">
            <summary>
            Queues the specified work to run on the thread pool and returns a Task object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ITaskService.WaitAll(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided Task objects to complete execution.
            </summary>
            <param name="tasks">An array of Task instances on which to wait.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.JsonService">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IJsonService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.JsonService.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes the JSON contained by <paramref name="stream" /> into a <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the JSON to deserialize.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel deserialization.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.JsonService.SerializeAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes <paramref name="value" /> and writes the generated JSON to <paramref name="stream" />.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to write generated JSON to.</param>
            <param name="value">The object to serialize.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel serialization.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.MonitorService">
            <summary>
            Default implementation of <see cref="T:Jering.Javascript.NodeJS.IMonitorService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.MonitorService.TryEnter(System.Object,System.Boolean@)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
            </summary>
            <param name="obj">The object on which to acquire the lock.</param>
            <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is 
            set even if an exception occurs during the attempt to acquire the lock.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.MonitorService.Exit(System.Object)">
            <summary>
            Releases an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to release the lock.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.MonitorService.Enter(System.Object,System.Boolean@)">
            <summary>
            Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
            </summary>
            <param name="obj">The object on which to wait.</param>
            <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output 
            is set even if an exception occurs during the attempt to acquire the lock. Note If no exception occurs, the output of this method is always true.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.MonitorService.Enter(System.Object)">
            <summary>
            Acquires an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to acquire the monitor lock.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.TaskService">
            <summary>
            Default implementation of <see cref="T:Jering.Javascript.NodeJS.ITaskService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.TaskService.Run(System.Action)">
            <summary>
            Queues the specified work to run on the thread pool and returns a Task object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.TaskService.WaitAll(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided Task objects to complete execution.
            </summary>
            <param name="tasks">An array of Task instances on which to wait.</param>
        </member>
    </members>
</doc>